
Servo_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048cc  080048cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d4  080048d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000214  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011991  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002772  00000000  00000000  00031a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  000341a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e40  00000000  00000000  000350e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271a0  00000000  00000000  00035f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121ee  00000000  00000000  0005d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e067f  00000000  00000000  0006f2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014f92d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004004  00000000  00000000  0014f980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004378 	.word	0x08004378

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08004378 	.word	0x08004378

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <_ZL19ConsoleCommandMatchPKcS0_>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4413      	add	r3, r2
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	440b      	add	r3, r1
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	429a      	cmp	r2, r3
 8000524:	d104      	bne.n	8000530 <_ZL19ConsoleCommandMatchPKcS0_+0x30>
	{
		result = 1u;
 8000526:	2301      	movs	r3, #1
 8000528:	60bb      	str	r3, [r7, #8]
		i++;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d12a      	bne.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
	while ( ( 1u == result ) &&
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2b09      	cmp	r3, #9
 800053a:	d827      	bhi.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000544:	2b20      	cmp	r3, #32
 8000546:	d021      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000550:	2b0a      	cmp	r3, #10
 8000552:	d01b      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b0d      	cmp	r3, #13
 800055e:	d015      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00f      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		)
	{
		if ( buffer[i] != name[i] )
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	4413      	add	r3, r2
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	440b      	add	r3, r1
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	d001      	beq.n	8000584 <_ZL19ConsoleCommandMatchPKcS0_+0x84>
		{
			result = 0u;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 800058a:	e7d1      	b.n	8000530 <_ZL19ConsoleCommandMatchPKcS0_+0x30>
	}

	return result;
 800058c:	68bb      	ldr	r3, [r7, #8]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <_ZL18ConsoleResetBufferPcmm>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800059a:	b480      	push	{r7}
 800059c:	b087      	sub	sp, #28
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d20e      	bcs.n	80005d8 <_ZL18ConsoleResetBufferPcmm+0x3e>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	441a      	add	r2, r3
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	440b      	add	r3, r1
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	701a      	strb	r2, [r3, #0]
		i++;
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3301      	adds	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 80005d6:	e7ec      	b.n	80005b2 <_ZL18ConsoleResetBufferPcmm+0x18>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2bff      	cmp	r3, #255	; 0xff
 80005dc:	d808      	bhi.n	80005f0 <_ZL18ConsoleResetBufferPcmm+0x56>
	{
		receiveBuffer[i] =  NULL_CHAR;
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	4413      	add	r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e7f3      	b.n	80005d8 <_ZL18ConsoleResetBufferPcmm+0x3e>
	}
	return remaining;
 80005f0:	693b      	ldr	r3, [r7, #16]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_ZL21ConsoleCommandEndlinePKcm>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
			&& ( i < filledLength ) )
 800061a:	2b0d      	cmp	r3, #13
 800061c:	d00d      	beq.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b0a      	cmp	r3, #10
 8000628:	d007      	beq.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
			&& ( i < filledLength ) )
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	429a      	cmp	r2, r3
 8000630:	d203      	bcs.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
	{
		i++;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000638:	e7eb      	b.n	8000612 <_ZL21ConsoleCommandEndlinePKcm+0x14>
	}
	if ( i < filledLength )
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d201      	bcs.n	8000646 <_ZL21ConsoleCommandEndlinePKcm+0x48>
	{
		result = i;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000646:	68bb      	ldr	r3, [r7, #8]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 800065a:	f000 fb09 	bl	8000c70 <_Z13ConsoleIoInitv>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");	
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <ConsoleInit+0x48>)
 8000660:	f000 fb50 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(STR_ENDLINE);
 8000664:	480e      	ldr	r0, [pc, #56]	; (80006a0 <ConsoleInit+0x4c>)
 8000666:	f000 fb4d 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(CONSOLE_PROMPT);
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <ConsoleInit+0x50>)
 800066c:	f000 fb4a 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
	mReceivedSoFar = 0u;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <ConsoleInit+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2bff      	cmp	r3, #255	; 0xff
 800067e:	d808      	bhi.n	8000692 <ConsoleInit+0x3e>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <ConsoleInit+0x58>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	e7f3      	b.n	800067a <ConsoleInit+0x26>
	}

}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	08004390 	.word	0x08004390
 80006a0:	080043d8 	.word	0x080043d8
 80006a4:	080043dc 	.word	0x080043dc
 80006a8:	2000018c 	.word	0x2000018c
 80006ac:	2000008c 	.word	0x2000008c

080006b0 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 80006b6:	4b57      	ldr	r3, [pc, #348]	; (8000814 <ConsoleProcess+0x164>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a57      	ldr	r2, [pc, #348]	; (8000818 <ConsoleProcess+0x168>)
 80006bc:	1898      	adds	r0, r3, r2
 80006be:	4b55      	ldr	r3, [pc, #340]	; (8000814 <ConsoleProcess+0x164>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80006c6:	463a      	mov	r2, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	f000 fb01 	bl	8000cd0 <_Z16ConsoleIoReceivePhmPm>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d104      	bne.n	80006de <ConsoleProcess+0x2e>
 80006d4:	4b51      	ldr	r3, [pc, #324]	; (800081c <ConsoleProcess+0x16c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	f000 8097 	beq.w	800080c <ConsoleProcess+0x15c>
	{
		mReceiveBufferNeedsChecking = false;
 80006de:	4b4f      	ldr	r3, [pc, #316]	; (800081c <ConsoleProcess+0x16c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 80006e4:	4b4b      	ldr	r3, [pc, #300]	; (8000814 <ConsoleProcess+0x164>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a49      	ldr	r2, [pc, #292]	; (8000814 <ConsoleProcess+0x164>)
 80006ee:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 80006f0:	4b48      	ldr	r3, [pc, #288]	; (8000814 <ConsoleProcess+0x164>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	4848      	ldr	r0, [pc, #288]	; (8000818 <ConsoleProcess+0x168>)
 80006f8:	f7ff ff81 	bl	80005fe <_ZL21ConsoleCommandEndlinePKcm>
 80006fc:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	f2c0 8083 	blt.w	800080c <ConsoleProcess+0x15c>
		{
			commandTable = ConsoleCommandsGetTable();
 8000706:	f000 faa9 	bl	8000c5c <_Z23ConsoleCommandsGetTablev>
 800070a:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	4613      	mov	r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	4413      	add	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	461a      	mov	r2, r3
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4413      	add	r3, r2
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d047      	beq.n	80007bc <ConsoleProcess+0x10c>
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000732:	d143      	bne.n	80007bc <ConsoleProcess+0x10c>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	4613      	mov	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4413      	add	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	461a      	mov	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4413      	add	r3, r2
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4934      	ldr	r1, [pc, #208]	; (8000818 <ConsoleProcess+0x168>)
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fed9 	bl	8000500 <_ZL19ConsoleCommandMatchPKcS0_>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf14      	ite	ne
 8000754:	2301      	movne	r3, #1
 8000756:	2300      	moveq	r3, #0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d02a      	beq.n	80007b4 <ConsoleProcess+0x104>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	4613      	mov	r3, r2
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	4413      	add	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	461a      	mov	r2, r3
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	4413      	add	r3, r2
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	4829      	ldr	r0, [pc, #164]	; (8000818 <ConsoleProcess+0x168>)
 8000772:	4798      	blx	r3
 8000774:	4603      	mov	r3, r0
 8000776:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d017      	beq.n	80007ae <ConsoleProcess+0xfe>
					{
						ConsoleIoSendString("Error: ");
 800077e:	4828      	ldr	r0, [pc, #160]	; (8000820 <ConsoleProcess+0x170>)
 8000780:	f000 fac0 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(mReceiveBuffer);
 8000784:	4824      	ldr	r0, [pc, #144]	; (8000818 <ConsoleProcess+0x168>)
 8000786:	f000 fabd 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>

						ConsoleIoSendString("Help: ");
 800078a:	4826      	ldr	r0, [pc, #152]	; (8000824 <ConsoleProcess+0x174>)
 800078c:	f000 faba 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	4613      	mov	r3, r2
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	4413      	add	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	461a      	mov	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	4413      	add	r3, r2
 80007a0:	3308      	adds	r3, #8
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 faae 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(STR_ENDLINE);
 80007a8:	481f      	ldr	r0, [pc, #124]	; (8000828 <ConsoleProcess+0x178>)
 80007aa:	f000 faab 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>

					}
					found = cmdIndex;
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	e7b0      	b.n	8000716 <ConsoleProcess+0x66>
				}
				else
				{
					cmdIndex++;
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	3301      	adds	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ba:	e7ac      	b.n	8000716 <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00d      	beq.n	80007de <ConsoleProcess+0x12e>
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c8:	d109      	bne.n	80007de <ConsoleProcess+0x12e>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <ConsoleProcess+0x164>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d905      	bls.n	80007de <ConsoleProcess+0x12e>
				{
					ConsoleIoSendString("Command not found.");
 80007d2:	4816      	ldr	r0, [pc, #88]	; (800082c <ConsoleProcess+0x17c>)
 80007d4:	f000 fa96 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
					ConsoleIoSendString(STR_ENDLINE);
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <ConsoleProcess+0x178>)
 80007da:	f000 fa93 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <ConsoleProcess+0x164>)
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	3301      	adds	r3, #1
 80007e6:	461a      	mov	r2, r3
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <ConsoleProcess+0x168>)
 80007ea:	f7ff fed6 	bl	800059a <_ZL18ConsoleResetBufferPcmm>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a08      	ldr	r2, [pc, #32]	; (8000814 <ConsoleProcess+0x164>)
 80007f2:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <ConsoleProcess+0x164>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf14      	ite	ne
 80007fc:	2301      	movne	r3, #1
 80007fe:	2300      	moveq	r3, #0
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <ConsoleProcess+0x16c>)
 8000804:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000806:	480a      	ldr	r0, [pc, #40]	; (8000830 <ConsoleProcess+0x180>)
 8000808:	f000 fa7c 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
		}
	}
}
 800080c:	bf00      	nop
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000018c 	.word	0x2000018c
 8000818:	2000008c 	.word	0x2000008c
 800081c:	20000190 	.word	0x20000190
 8000820:	080043e0 	.word	0x080043e0
 8000824:	080043e8 	.word	0x080043e8
 8000828:	080043d8 	.word	0x080043d8
 800082c:	080043f0 	.word	0x080043f0
 8000830:	080043dc 	.word	0x080043dc

08000834 <_ZL17ConsoleParamFindNPKchPm>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	460b      	mov	r3, r1
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800084a:	2300      	movs	r3, #0
 800084c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800084e:	7afb      	ldrb	r3, [r7, #11]
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	429a      	cmp	r2, r3
 8000854:	d00f      	beq.n	8000876 <_ZL17ConsoleParamFindNPKchPm+0x42>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	2bff      	cmp	r3, #255	; 0xff
 800085a:	d80c      	bhi.n	8000876 <_ZL17ConsoleParamFindNPKchPm+0x42>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b20      	cmp	r3, #32
 8000866:	d102      	bne.n	800086e <_ZL17ConsoleParamFindNPKchPm+0x3a>
		{
			parameterIndex++;
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	3301      	adds	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3301      	adds	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000874:	e7eb      	b.n	800084e <_ZL17ConsoleParamFindNPKchPm+0x1a>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800087c:	d102      	bne.n	8000884 <_ZL17ConsoleParamFindNPKchPm+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800087e:	2310      	movs	r3, #16
 8000880:	75fb      	strb	r3, [r7, #23]
 8000882:	e002      	b.n	800088a <_ZL17ConsoleParamFindNPKchPm+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69fa      	ldr	r2, [r7, #28]
 8000888:	601a      	str	r2, [r3, #0]
	}
	return result;
 800088a:	7dfb      	ldrb	r3, [r7, #23]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3724      	adds	r7, #36	; 0x24
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	460b      	mov	r3, r1
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80008aa:	f107 021c 	add.w	r2, r7, #28
 80008ae:	7afb      	ldrb	r3, [r7, #11]
 80008b0:	4619      	mov	r1, r3
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f7ff ffbe 	bl	8000834 <_ZL17ConsoleParamFindNPKchPm>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	4413      	add	r3, r2
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80008d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008d6:	2b0a      	cmp	r3, #10
 80008d8:	d01d      	beq.n	8000916 <ConsoleReceiveParamInt16+0x7e>
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 80008da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008de:	2b0d      	cmp	r3, #13
 80008e0:	d019      	beq.n	8000916 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 80008e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008e6:	2b20      	cmp	r3, #32
 80008e8:	d015      	beq.n	8000916 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	2b07      	cmp	r3, #7
 80008ee:	d812      	bhi.n	8000916 <ConsoleReceiveParamInt16+0x7e>
	{
		str[i] = charVal;					// copy the relevant part
 80008f0:	f107 0214 	add.w	r2, r7, #20
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	4413      	add	r3, r2
 80008f8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80008fc:	701a      	strb	r2, [r3, #0]
		i++;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	3301      	adds	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000904:	69fa      	ldr	r2, [r7, #28]
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	4413      	add	r3, r2
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4413      	add	r3, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000914:	e7dd      	b.n	80008d2 <ConsoleReceiveParamInt16+0x3a>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	2b08      	cmp	r3, #8
 800091a:	d102      	bne.n	8000922 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 800091c:	2310      	movs	r3, #16
 800091e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10e      	bne.n	8000948 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 800092a:	f107 0214 	add.w	r2, r7, #20
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	4413      	add	r3, r2
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fc5a 	bl	80041f4 <atoi>
 8000940:	4603      	mov	r3, r0
 8000942:	b21a      	sxth	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800094c:	4618      	mov	r0, r3
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <_ZL9smallItoaiPci>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000954:	b480      	push	{r7}
 8000956:	b089      	sub	sp, #36	; 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000960:	2300      	movs	r3, #0
 8000962:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000964:	2301      	movs	r3, #1
 8000966:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b00      	cmp	r3, #0
 800096c:	da07      	bge.n	800097e <_ZL9smallItoaiPci+0x2a>
		isNegative = true;
 800096e:	2301      	movs	r3, #1
 8000970:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	425b      	negs	r3, r3
 8000976:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	3301      	adds	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	fb92 f3f3 	sdiv	r3, r2, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d008      	beq.n	80009a0 <_ZL9smallItoaiPci+0x4c>
		tmpIn = (int)tmpIn/radix;
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	fb92 f3f3 	sdiv	r3, r2, r3
 8000996:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	3301      	adds	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 800099e:	e7f0      	b.n	8000982 <_ZL9smallItoaiPci+0x2e>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
    stringLen--;
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	fb93 f2f2 	sdiv	r2, r3, r2
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	fb01 f202 	mul.w	r2, r1, r2
 80009c2:	1a9b      	subs	r3, r3, r2
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	440b      	add	r3, r1
 80009cc:	3230      	adds	r2, #48	; 0x30
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80009da:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	617a      	str	r2, [r7, #20]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bf14      	ite	ne
 80009e6:	2301      	movne	r3, #1
 80009e8:	2300      	moveq	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d000      	beq.n	80009f2 <_ZL9smallItoaiPci+0x9e>
	do {
 80009f0:	e7e0      	b.n	80009b4 <_ZL9smallItoaiPci+0x60>

	if (isNegative) {
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d002      	beq.n	80009fe <_ZL9smallItoaiPci+0xaa>
		*(outBuffer) = '-';
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	222d      	movs	r2, #45	; 0x2d
 80009fc:	701a      	strb	r2, [r3, #0]
	}
}
 80009fe:	bf00      	nop
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a18:	f107 0108 	add.w	r1, r7, #8
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff98 	bl	8000954 <_ZL9smallItoaiPci>
	ConsoleIoSendString(out);
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f96b 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>

	return COMMAND_SUCCESS;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_ZL21ConsoleCommandCommentPKc>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <_ZL18ConsoleCommandHelpPKc>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000a5c:	230a      	movs	r3, #10
 8000a5e:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d21f      	bcs.n	8000aae <_ZL18ConsoleCommandHelpPKc+0x5e>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000a6e:	4912      	ldr	r1, [pc, #72]	; (8000ab8 <_ZL18ConsoleCommandHelpPKc+0x68>)
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	4613      	mov	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	4413      	add	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	440b      	add	r3, r1
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f940 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <_ZL18ConsoleCommandHelpPKc+0x6c>)
 8000a86:	f000 f93d 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	3308      	adds	r3, #8
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <_ZL18ConsoleCommandHelpPKc+0x68>)
 8000a98:	4413      	add	r3, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f932 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <_ZL18ConsoleCommandHelpPKc+0x70>)
 8000aa2:	f000 f92f 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	e7da      	b.n	8000a64 <_ZL18ConsoleCommandHelpPKc+0x14>
	}
	return result;
 8000aae:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	080044e0 	.word	0x080044e0
 8000abc:	0800445c 	.word	0x0800445c
 8000ac0:	08004460 	.word	0x08004460

08000ac4 <_ZL20ConsoleCommandLedRedPKc>:
	}
	return result;
}

static eCommandResult_T ConsoleCommandLedRed(const char buffer[])
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 65535;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad6:	609a      	str	r2, [r3, #8]
	systemState.LEDGreen = 0;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
	systemState.LEDBlue = 0;
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
	return result;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	200001e4 	.word	0x200001e4

08000af8 <_ZL22ConsoleCommandLedGreenPKc>:

static eCommandResult_T ConsoleCommandLedGreen(const char buffer[])
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 0;
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
	systemState.LEDGreen = 65535;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b10:	60da      	str	r2, [r3, #12]
	systemState.LEDBlue = 0;
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
	return result;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200001e4 	.word	0x200001e4

08000b2c <_ZL21ConsoleCommandLedBluePKc>:

static eCommandResult_T ConsoleCommandLedBlue(const char buffer[])
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 0;
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
	systemState.LEDGreen = 0;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
	systemState.LEDBlue = 65535;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4a:	611a      	str	r2, [r3, #16]
	return result;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200001e4 	.word	0x200001e4

08000b60 <_ZL25ConsoleCommandGetSetpointPKc>:

static eCommandResult_T ConsoleCommandGetSetpoint(const char buffer[])
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString("setpoint = ");
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <_ZL25ConsoleCommandGetSetpointPKc+0x30>)
 8000b6a:	f000 f8cb 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
	ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <_ZL25ConsoleCommandGetSetpointPKc+0x34>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff48 	bl	8000a0a <ConsoleSendParamInt16>
	ConsoleIoSendString(STR_ENDLINE);
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <_ZL25ConsoleCommandGetSetpointPKc+0x38>)
 8000b7c:	f000 f8c2 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>

	eCommandResult_T result = COMMAND_SUCCESS;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
	return result;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	08004490 	.word	0x08004490
 8000b94:	200001e4 	.word	0x200001e4
 8000b98:	08004460 	.word	0x08004460

08000b9c <_ZL25ConsoleCommandSetSetpointPKc>:

static eCommandResult_T ConsoleCommandSetSetpoint(const char buffer[])
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2101      	movs	r1, #1
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fe73 	bl	8000898 <ConsoleReceiveParamInt16>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d110      	bne.n	8000bde <_ZL25ConsoleCommandSetSetpointPKc+0x42>
		{
			systemState.setpoint = (uint32_t)parameterInt;
 8000bbc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <_ZL25ConsoleCommandSetSetpointPKc+0x4c>)
 8000bc4:	601a      	str	r2, [r3, #0]
			ConsoleIoSendString("Setpoint updated to ");
 8000bc6:	4809      	ldr	r0, [pc, #36]	; (8000bec <_ZL25ConsoleCommandSetSetpointPKc+0x50>)
 8000bc8:	f000 f89c 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <_ZL25ConsoleCommandSetSetpointPKc+0x4c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff19 	bl	8000a0a <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <_ZL25ConsoleCommandSetSetpointPKc+0x54>)
 8000bda:	f000 f893 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200001e4 	.word	0x200001e4
 8000bec:	0800449c 	.word	0x0800449c
 8000bf0:	08004460 	.word	0x08004460

08000bf4 <_ZL27ConsoleCommandGetCurrentPosPKc>:

static eCommandResult_T ConsoleCommandGetCurrentPos(const char buffer[])
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString("Current position = ");
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <_ZL27ConsoleCommandGetCurrentPosPKc+0x30>)
 8000bfe:	f000 f881 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
	ConsoleSendParamInt16((uint16_t)systemState.currentPos);
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <_ZL27ConsoleCommandGetCurrentPosPKc+0x34>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fefe 	bl	8000a0a <ConsoleSendParamInt16>
	ConsoleIoSendString(STR_ENDLINE);
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <_ZL27ConsoleCommandGetCurrentPosPKc+0x38>)
 8000c10:	f000 f878 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>

	eCommandResult_T result = COMMAND_SUCCESS;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]
	return result;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	080044b4 	.word	0x080044b4
 8000c28:	200001e4 	.word	0x200001e4
 8000c2c:	08004460 	.word	0x08004460

08000c30 <_ZL17ConsoleCommandVerPKc>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <_ZL17ConsoleCommandVerPKc+0x24>)
 8000c3e:	f000 f861 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(STR_ENDLINE);
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <_ZL17ConsoleCommandVerPKc+0x28>)
 8000c44:	f000 f85e 	bl	8000d04 <_Z19ConsoleIoSendStringPKc>
	return result;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	080044c8 	.word	0x080044c8
 8000c58:	08004460 	.word	0x08004460

08000c5c <_Z23ConsoleCommandsGetTablev>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <_Z23ConsoleCommandsGetTablev+0x10>)
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	080044e0 	.word	0x080044e0

08000c70 <_Z13ConsoleIoInitv>:
#include <global.h>

UART_HandleTypeDef huart1;

eConsoleError ConsoleIoInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	    huart1.Instance = USART1;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <_Z13ConsoleIoInitv+0x58>)
 8000c76:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <_Z13ConsoleIoInitv+0x5c>)
 8000c78:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_Z13ConsoleIoInitv+0x58>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_Z13ConsoleIoInitv+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <_Z13ConsoleIoInitv+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <_Z13ConsoleIoInitv+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <_Z13ConsoleIoInitv+0x58>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <_Z13ConsoleIoInitv+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <_Z13ConsoleIoInitv+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ca6:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <_Z13ConsoleIoInitv+0x58>)
 8000ca8:	f002 fe40 	bl	800392c <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bf14      	ite	ne
 8000cb2:	2301      	movne	r3, #1
 8000cb4:	2300      	moveq	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <_Z13ConsoleIoInitv+0x50>
		{
		  Error_Handler();
 8000cbc:	f000 fa86 	bl	80011cc <Error_Handler>
		}


	return CONSOLE_SUCCESS;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000194 	.word	0x20000194
 8000ccc:	40011000 	.word	0x40011000

08000cd0 <_Z16ConsoleIoReceivePhmPm>:
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]


	HAL_UART_Receive(&huart1, (uint8_t *)buffer, bufferLength, 100);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	2364      	movs	r3, #100	; 0x64
 8000ce2:	68f9      	ldr	r1, [r7, #12]
 8000ce4:	4806      	ldr	r0, [pc, #24]	; (8000d00 <_Z16ConsoleIoReceivePhmPm+0x30>)
 8000ce6:	f002 ff00 	bl	8003aea <HAL_UART_Receive>
	*readLength = strlen((const char*)buffer);
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f7ff fa7e 	bl	80001ec <strlen>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	601a      	str	r2, [r3, #0]

	return CONSOLE_SUCCESS;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000194 	.word	0x20000194

08000d04 <_Z19ConsoleIoSendStringPKc>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer) , 10);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fa6d 	bl	80001ec <strlen>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	230a      	movs	r3, #10
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <_Z19ConsoleIoSendStringPKc+0x28>)
 8000d1c:	f002 fe53 	bl	80039c6 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000194 	.word	0x20000194

08000d30 <_ZN7encoder4initEv>:
#include <main.h>
#include <global.h>
#include <stdint.h>

void encoder::init()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
	//SPI
	hspi1.Instance = SPI1;
 8000d36:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d38:	4a34      	ldr	r2, [pc, #208]	; (8000e0c <_ZN7encoder4initEv+0xdc>)
 8000d3a:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d3e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d42:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d44:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d50:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d64:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d6c:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d72:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d80:	220a      	movs	r2, #10
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d84:	4820      	ldr	r0, [pc, #128]	; (8000e08 <_ZN7encoder4initEv+0xd8>)
 8000d86:	f001 fc03 	bl	8002590 <HAL_SPI_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf14      	ite	ne
 8000d90:	2301      	movne	r3, #1
 8000d92:	2300      	moveq	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <_ZN7encoder4initEv+0x6e>
	{
	  Error_Handler();
 8000d9a:	f000 f8a1 	bl	8000ee0 <_ZN7encoder13Error_HandlerEv>
	}

	//CS pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2110      	movs	r1, #16
 8000da2:	481b      	ldr	r0, [pc, #108]	; (8000e10 <_ZN7encoder4initEv+0xe0>)
 8000da4:	f000 ff1a 	bl	8001bdc <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <_ZN7encoder4initEv+0xe4>)
 8000daa:	2210      	movs	r2, #16
 8000dac:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <_ZN7encoder4initEv+0xe4>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <_ZN7encoder4initEv+0xe4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <_ZN7encoder4initEv+0xe4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	4914      	ldr	r1, [pc, #80]	; (8000e14 <_ZN7encoder4initEv+0xe4>)
 8000dc2:	4813      	ldr	r0, [pc, #76]	; (8000e10 <_ZN7encoder4initEv+0xe0>)
 8000dc4:	f000 fd5e 	bl	8001884 <HAL_GPIO_Init>

	//set CS high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2110      	movs	r1, #16
 8000dcc:	4810      	ldr	r0, [pc, #64]	; (8000e10 <_ZN7encoder4initEv+0xe0>)
 8000dce:	f000 ff05 	bl	8001bdc <HAL_GPIO_WritePin>

	uint16_t readBit = 0x8000;
 8000dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dd6:	80fb      	strh	r3, [r7, #6]
	uint16_t readAngleAddress = 0x3fff;
 8000dd8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000ddc:	80bb      	strh	r3, [r7, #4]
	readCommand = (readBit | readAngleAddress);
 8000dde:	88fa      	ldrh	r2, [r7, #6]
 8000de0:	88bb      	ldrh	r3, [r7, #4]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <_ZN7encoder4initEv+0xe8>)
 8000de8:	801a      	strh	r2, [r3, #0]
	dummyCommand = 0x0;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <_ZN7encoder4initEv+0xec>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]

	valueMask = 0x3fff;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <_ZN7encoder4initEv+0xf0>)
 8000df2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000df6:	801a      	strh	r2, [r3, #0]
	value = 0;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <_ZN7encoder4initEv+0xf4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	801a      	strh	r2, [r3, #0]

}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000214 	.word	0x20000214
 8000e0c:	40013000 	.word	0x40013000
 8000e10:	40020000 	.word	0x40020000
 8000e14:	2000026c 	.word	0x2000026c
 8000e18:	200001d8 	.word	0x200001d8
 8000e1c:	200001da 	.word	0x200001da
 8000e20:	200001e2 	.word	0x200001e2
 8000e24:	200001e0 	.word	0x200001e0

08000e28 <_ZN7encoder6getRawEv>:

void encoder::getRaw()
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af02      	add	r7, sp, #8
	//Setup commands
	uint16_t test = 0xffff;
 8000e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e32:	807b      	strh	r3, [r7, #2]
	uint16_t test2 = 0xAAAA;
 8000e34:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000e38:	80fb      	strh	r3, [r7, #6]
	uint16_t readValue = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	80bb      	strh	r3, [r7, #4]
	uint8_t spi_buf[2];

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2110      	movs	r1, #16
 8000e42:	4821      	ldr	r0, [pc, #132]	; (8000ec8 <_ZN7encoder6getRawEv+0xa0>)
 8000e44:	f000 feca 	bl	8001bdc <HAL_GPIO_WritePin>
	sendBuffer = &test;
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <_ZN7encoder6getRawEv+0xa4>)
 8000e4a:	1cbb      	adds	r3, r7, #2
 8000e4c:	6013      	str	r3, [r2, #0]
	//HAL_SPI_Transmit(&hspi1, (uint8_t*)sendBuffer, 1, 1);
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)sendBuffer,spi_buf, 1, 100);
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <_ZN7encoder6getRawEv+0xa4>)
 8000e50:	6819      	ldr	r1, [r3, #0]
 8000e52:	463a      	mov	r2, r7
 8000e54:	2364      	movs	r3, #100	; 0x64
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	481d      	ldr	r0, [pc, #116]	; (8000ed0 <_ZN7encoder6getRawEv+0xa8>)
 8000e5c:	f001 fc21 	bl	80026a2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <_ZN7encoder6getRawEv+0xa0>)
 8000e66:	f000 feb9 	bl	8001bdc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <_ZN7encoder6getRawEv+0xa0>)
 8000e70:	f000 feb4 	bl	8001bdc <HAL_GPIO_WritePin>
	sendBuffer = &test;
 8000e74:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <_ZN7encoder6getRawEv+0xa4>)
 8000e76:	1cbb      	adds	r3, r7, #2
 8000e78:	6013      	str	r3, [r2, #0]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)sendBuffer,spi_buf, 1, 100);
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <_ZN7encoder6getRawEv+0xa4>)
 8000e7c:	6819      	ldr	r1, [r3, #0]
 8000e7e:	463a      	mov	r2, r7
 8000e80:	2364      	movs	r3, #100	; 0x64
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2301      	movs	r3, #1
 8000e86:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <_ZN7encoder6getRawEv+0xa8>)
 8000e88:	f001 fc0b 	bl	80026a2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2110      	movs	r1, #16
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <_ZN7encoder6getRawEv+0xa0>)
 8000e92:	f000 fea3 	bl	8001bdc <HAL_GPIO_WritePin>


	readValue = spi_buf[0] | (spi_buf[1] << 8);
 8000e96:	783b      	ldrb	r3, [r7, #0]
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	787b      	ldrb	r3, [r7, #1]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	80bb      	strh	r3, [r7, #4]
	value = readValue & valueMask;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <_ZN7encoder6getRawEv+0xac>)
 8000ea8:	881a      	ldrh	r2, [r3, #0]
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	4013      	ands	r3, r2
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <_ZN7encoder6getRawEv+0xb0>)
 8000eb2:	801a      	strh	r2, [r3, #0]
	systemState.currentPos = (uint32_t)value;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <_ZN7encoder6getRawEv+0xb0>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <_ZN7encoder6getRawEv+0xb4>)
 8000ebc:	605a      	str	r2, [r3, #4]

}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	200001dc 	.word	0x200001dc
 8000ed0:	20000214 	.word	0x20000214
 8000ed4:	200001e2 	.word	0x200001e2
 8000ed8:	200001e0 	.word	0x200001e0
 8000edc:	200001e4 	.word	0x200001e4

08000ee0 <_ZN7encoder13Error_HandlerEv>:

void encoder::Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  __disable_irq();
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <_ZN7encoder13Error_HandlerEv+0x8>
	...

08000eec <_ZN3led4initEv>:
#include <led.h>
#include <io_mapping.h>
#include <processor.h>
#include <main.h>

void led::init(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0a8      	sub	sp, #160	; 0xa0
 8000ef0:	af00      	add	r7, sp, #0
	  TIM_HandleTypeDef htim1;

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2220      	movs	r2, #32
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f003 f993 	bl	8004250 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8000f2a:	4b6b      	ldr	r3, [pc, #428]	; (80010d8 <_ZN3led4initEv+0x1ec>)
 8000f2c:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Prescaler = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	2300      	movs	r3, #0
 8000f34:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.Period = 65535;
 8000f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f3a:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	66bb      	str	r3, [r7, #104]	; 0x68
	  htim1.Init.RepetitionCounter = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	66fb      	str	r3, [r7, #108]	; 0x6c
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	673b      	str	r3, [r7, #112]	; 0x70
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 fe15 	bl	8002b7c <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf14      	ite	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	2300      	moveq	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <_ZN3led4initEv+0x7a>
	  {
	    Error_Handler();
 8000f62:	f000 f8fb 	bl	800115c <_ZN3led13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6a:	64bb      	str	r3, [r7, #72]	; 0x48
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f6c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 f832 	bl	8002fe0 <HAL_TIM_ConfigClockSource>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf14      	ite	ne
 8000f82:	2301      	movne	r3, #1
 8000f84:	2300      	moveq	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <_ZN3led4initEv+0xa4>
	  {
	    Error_Handler();
 8000f8c:	f000 f8e6 	bl	800115c <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fe40 	bl	8002c1a <HAL_TIM_PWM_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bf14      	ite	ne
 8000fa0:	2301      	movne	r3, #1
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <_ZN3led4initEv+0xc2>
	  {
	    Error_Handler();
 8000faa:	f000 f8d7 	bl	800115c <_ZN3led13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	643b      	str	r3, [r7, #64]	; 0x40
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000fba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 fbe5 	bl	8003790 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf14      	ite	ne
 8000fcc:	2301      	movne	r3, #1
 8000fce:	2300      	moveq	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <_ZN3led4initEv+0xee>
	  {
	    Error_Handler();
 8000fd6:	f000 f8c1 	bl	800115c <_ZN3led13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fda:	2360      	movs	r3, #96	; 0x60
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
	  sConfigOC.Pulse = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000ffa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ffe:	2200      	movs	r2, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f001 ff2b 	bl	8002e5c <HAL_TIM_PWM_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	bf14      	ite	ne
 800100c:	2301      	movne	r3, #1
 800100e:	2300      	moveq	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <_ZN3led4initEv+0x12e>
	  {
	    Error_Handler();
 8001016:	f000 f8a1 	bl	800115c <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800101a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800101e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001022:	2204      	movs	r2, #4
 8001024:	4618      	mov	r0, r3
 8001026:	f001 ff19 	bl	8002e5c <HAL_TIM_PWM_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	bf14      	ite	ne
 8001030:	2301      	movne	r3, #1
 8001032:	2300      	moveq	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <_ZN3led4initEv+0x152>
	  {
	    Error_Handler();
 800103a:	f000 f88f 	bl	800115c <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800103e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001042:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001046:	2208      	movs	r2, #8
 8001048:	4618      	mov	r0, r3
 800104a:	f001 ff07 	bl	8002e5c <HAL_TIM_PWM_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	bf14      	ite	ne
 8001054:	2301      	movne	r3, #1
 8001056:	2300      	moveq	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <_ZN3led4initEv+0x176>
	  {
	    Error_Handler();
 800105e:	f000 f87d 	bl	800115c <_ZN3led13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.DeadTime = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107a:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001080:	1d3a      	adds	r2, r7, #4
 8001082:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fbfd 	bl	8003888 <HAL_TIMEx_ConfigBreakDeadTime>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf14      	ite	ne
 8001094:	2301      	movne	r3, #1
 8001096:	2300      	moveq	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <_ZN3led4initEv+0x1b6>
	  {
	    Error_Handler();
 800109e:	f000 f85d 	bl	800115c <_ZN3led13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 80010a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f928 	bl	80012fc <HAL_TIM_MspPostInit>

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 fe0a 	bl	8002ccc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80010b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010bc:	2104      	movs	r1, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 fe04 	bl	8002ccc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80010c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010c8:	2108      	movs	r1, #8
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fdfe 	bl	8002ccc <HAL_TIM_PWM_Start>
}
 80010d0:	bf00      	nop
 80010d2:	37a0      	adds	r7, #160	; 0xa0
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40010000 	.word	0x40010000

080010dc <_ZN3led6SetRGBEiii>:

void led::SetRGB(int red, int green, int blue){
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	int32_t max = 65535;
 80010e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ec:	617b      	str	r3, [r7, #20]
	int32_t min = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]

	if(red > max){red = max;};
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dd01      	ble.n	80010fe <_ZN3led6SetRGBEiii+0x22>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	60fb      	str	r3, [r7, #12]
	if(green > max){green = max;};
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	429a      	cmp	r2, r3
 8001104:	dd01      	ble.n	800110a <_ZN3led6SetRGBEiii+0x2e>
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	60bb      	str	r3, [r7, #8]
	if(blue > max){blue = max;};
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	429a      	cmp	r2, r3
 8001110:	dd01      	ble.n	8001116 <_ZN3led6SetRGBEiii+0x3a>
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	607b      	str	r3, [r7, #4]

	if(red < min){red = min;};
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	429a      	cmp	r2, r3
 800111c:	da01      	bge.n	8001122 <_ZN3led6SetRGBEiii+0x46>
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	60fb      	str	r3, [r7, #12]
	if(green < min){green = min;};
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	429a      	cmp	r2, r3
 8001128:	da01      	bge.n	800112e <_ZN3led6SetRGBEiii+0x52>
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	60bb      	str	r3, [r7, #8]
	if(blue < min){blue = min;};
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	429a      	cmp	r2, r3
 8001134:	da01      	bge.n	800113a <_ZN3led6SetRGBEiii+0x5e>
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	607b      	str	r3, [r7, #4]

	TIM1->CCR1 = (int32_t)red;
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <_ZN3led6SetRGBEiii+0x7c>)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = (int32_t)green;
 8001140:	4a05      	ldr	r2, [pc, #20]	; (8001158 <_ZN3led6SetRGBEiii+0x7c>)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = (int32_t)blue;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <_ZN3led6SetRGBEiii+0x7c>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	63d3      	str	r3, [r2, #60]	; 0x3c

}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40010000 	.word	0x40010000

0800115c <_ZN3led13Error_HandlerEv>:

void led::Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  __disable_irq();
  while (1)
 8001164:	e7fe      	b.n	8001164 <_ZN3led13Error_HandlerEv+0x8>
	...

08001168 <main>:
SPI_HandleTypeDef hspi1;
TIM_HandleTypeDef htim14;
GPIO_InitTypeDef GPIO_InitStruct = {0};

int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  //Initialize the various parts of the system (each is encapsulated in its own c++ class with the exception of globals above)
  Machine::init();
 800116c:	f000 f98c 	bl	8001488 <_ZN7Machine4initEv>
  led::init();
 8001170:	f7ff febc 	bl	8000eec <_ZN3led4initEv>
  //motor::init();
  encoder::init();
 8001174:	f7ff fddc 	bl	8000d30 <_ZN7encoder4initEv>

  motor motor1();

  systemState.setpoint = 100;
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <main+0x60>)
 800117a:	2264      	movs	r2, #100	; 0x64
 800117c:	601a      	str	r2, [r3, #0]
  systemState.currentPos = 0;
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <main+0x60>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  systemState.LEDRed = 0;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <main+0x60>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  systemState.LEDGreen = 0;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <main+0x60>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  systemState.LEDBlue = 0;
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <main+0x60>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  systemState.currentSpeed = 0;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <main+0x60>)
 8001198:	2200      	movs	r2, #0
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
  systemState.motorOnOff = 0;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <main+0x60>)
 800119e:	2200      	movs	r2, #0
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28


  ConsoleInit();
 80011a2:	f7ff fa57 	bl	8000654 <ConsoleInit>
  //motor::turnOnMotor();

  while (1)
  {
	  led::SetRGB(systemState.LEDRed, systemState.LEDGreen, systemState.LEDBlue);
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <main+0x60>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4618      	mov	r0, r3
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <main+0x60>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <main+0x60>)
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f7ff ff90 	bl	80010dc <_ZN3led6SetRGBEiii>
	  //led::SetRGB(0,65535,0);
	  //HAL_Delay(100);
	  //led::SetRGB(0,0,65535);
	  //HAL_Delay(100);

	  ConsoleProcess();
 80011bc:	f7ff fa78 	bl	80006b0 <ConsoleProcess>

	  encoder::getRaw();
 80011c0:	f7ff fe32 	bl	8000e28 <_ZN7encoder6getRawEv>
	  led::SetRGB(systemState.LEDRed, systemState.LEDGreen, systemState.LEDBlue);
 80011c4:	e7ef      	b.n	80011a6 <main+0x3e>
 80011c6:	bf00      	nop
 80011c8:	200001e4 	.word	0x200001e4

080011cc <Error_Handler>:
	}

}

void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <HAL_MspInit+0x4c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_MspInit+0x4c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a19      	ldr	r2, [pc, #100]	; (80012ac <HAL_SPI_MspInit+0x84>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12b      	bne.n	80012a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_SPI_MspInit+0x88>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_SPI_MspInit+0x88>)
 8001254:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_SPI_MspInit+0x88>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_SPI_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_SPI_MspInit+0x88>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_SPI_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001282:	23e0      	movs	r3, #224	; 0xe0
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001292:	2305      	movs	r3, #5
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_SPI_MspInit+0x8c>)
 800129e:	f000 faf1 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40013000 	.word	0x40013000
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_TIM_Base_MspInit+0x3c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10d      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_TIM_Base_MspInit+0x40>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <HAL_TIM_Base_MspInit+0x40>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_TIM_Base_MspInit+0x40>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40010000 	.word	0x40010000
 80012f8:	40023800 	.word	0x40023800

080012fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_TIM_MspPostInit+0x68>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d11e      	bne.n	800135c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_TIM_MspPostInit+0x6c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_TIM_MspPostInit+0x6c>)
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_TIM_MspPostInit+0x6c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800133a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800133e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800134c:	2301      	movs	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_TIM_MspPostInit+0x70>)
 8001358:	f000 fa94 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40010000 	.word	0x40010000
 8001368:	40023800 	.word	0x40023800
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_UART_MspInit+0x84>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d12c      	bne.n	80013ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_UART_MspInit+0x88>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <HAL_UART_MspInit+0x88>)
 800139c:	f043 0310 	orr.w	r3, r3, #16
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_UART_MspInit+0x88>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_UART_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_UART_MspInit+0x88>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_UART_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013dc:	2307      	movs	r3, #7
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <HAL_UART_MspInit+0x8c>)
 80013e8:	f000 fa4c 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40011000 	.word	0x40011000
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 f914 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI0_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(Button_Pin);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <SystemInit+0x20>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <SystemInit+0x20>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <_ZN7Machine4initEv>:
#include <machine.h>
#include <processor.h>


void Machine::init()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	HAL_Init();
 800148c:	f000 f8a2 	bl	80015d4 <HAL_Init>
	Machine::Config_Clock();
 8001490:	f000 f802 	bl	8001498 <_ZN7Machine12Config_ClockEv>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <_ZN7Machine12Config_ClockEv>:

void Machine::Config_Clock(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	; 0x50
 800149c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	2230      	movs	r2, #48	; 0x30
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 fed2 	bl	8004250 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <_ZN7Machine12Config_ClockEv+0xd4>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a29      	ldr	r2, [pc, #164]	; (800156c <_ZN7Machine12Config_ClockEv+0xd4>)
 80014c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <_ZN7Machine12Config_ClockEv+0xd4>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <_ZN7Machine12Config_ClockEv+0xd8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014e4:	4a22      	ldr	r2, [pc, #136]	; (8001570 <_ZN7Machine12Config_ClockEv+0xd8>)
 80014e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <_ZN7Machine12Config_ClockEv+0xd8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f8:	2302      	movs	r3, #2
 80014fa:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fc:	2301      	movs	r3, #1
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001500:	2310      	movs	r3, #16
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fb7f 	bl	8001c10 <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf14      	ite	ne
 8001518:	2301      	movne	r3, #1
 800151a:	2300      	moveq	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <_ZN7Machine12Config_ClockEv+0x8e>
	  {
	    Error_Handler();
 8001522:	f000 f827 	bl	8001574 <_ZN7Machine13Error_HandlerEv>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fddd 	bl	8002100 <HAL_RCC_ClockConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf14      	ite	ne
 800154c:	2301      	movne	r3, #1
 800154e:	2300      	moveq	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <_ZN7Machine12Config_ClockEv+0xc2>
	  {
	    Error_Handler();
 8001556:	f000 f80d 	bl	8001574 <_ZN7Machine13Error_HandlerEv>
	  }
	  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2000      	movs	r0, #0
 8001560:	f000 feb4 	bl	80022cc <HAL_RCC_MCOConfig>
}
 8001564:	bf00      	nop
 8001566:	3750      	adds	r7, #80	; 0x50
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <_ZN7Machine13Error_HandlerEv>:

void Machine::Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  __disable_irq();
  while (1)
 800157c:	e7fe      	b.n	800157c <_ZN7Machine13Error_HandlerEv+0x8>
	...

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001586:	490e      	ldr	r1, [pc, #56]	; (80015c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800159c:	4c0b      	ldr	r4, [pc, #44]	; (80015cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015aa:	f7ff ff5b 	bl	8001464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ae:	f002 fe2b 	bl	8004208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7ff fdd9 	bl	8001168 <main>
  bx  lr    
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015c4:	080048dc 	.word	0x080048dc
  ldr r2, =_sbss
 80015c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015cc:	20000284 	.word	0x20000284

080015d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <HAL_Init+0x40>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_Init+0x40>)
 80015ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x40>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f90d 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f808 	bl	8001618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fde6 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x54>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f917 	bl	800186a <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f000 f8ed 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HAL_InitTick+0x5c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000000 	.word	0x20000000
 8001670:	20000008 	.word	0x20000008
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000008 	.word	0x20000008
 800169c:	20000280 	.word	0x20000280

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000280 	.word	0x20000280

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff47 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff5c 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffb0 	bl	80017d8 <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e177      	b.n	8001b90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8166 	bne.w	8001b8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d005      	beq.n	80018d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d130      	bne.n	8001938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 0201 	and.w	r2, r3, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b03      	cmp	r3, #3
 8001942:	d017      	beq.n	8001974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d123      	bne.n	80019c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80c0 	beq.w	8001b8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b66      	ldr	r3, [pc, #408]	; (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a65      	ldr	r2, [pc, #404]	; (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b63      	ldr	r3, [pc, #396]	; (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a26:	4a61      	ldr	r2, [pc, #388]	; (8001bac <HAL_GPIO_Init+0x328>)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_GPIO_Init+0x32c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d037      	beq.n	8001ac2 <HAL_GPIO_Init+0x23e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a57      	ldr	r2, [pc, #348]	; (8001bb4 <HAL_GPIO_Init+0x330>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d031      	beq.n	8001abe <HAL_GPIO_Init+0x23a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a56      	ldr	r2, [pc, #344]	; (8001bb8 <HAL_GPIO_Init+0x334>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d02b      	beq.n	8001aba <HAL_GPIO_Init+0x236>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a55      	ldr	r2, [pc, #340]	; (8001bbc <HAL_GPIO_Init+0x338>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d025      	beq.n	8001ab6 <HAL_GPIO_Init+0x232>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a54      	ldr	r2, [pc, #336]	; (8001bc0 <HAL_GPIO_Init+0x33c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01f      	beq.n	8001ab2 <HAL_GPIO_Init+0x22e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <HAL_GPIO_Init+0x340>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d019      	beq.n	8001aae <HAL_GPIO_Init+0x22a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_GPIO_Init+0x344>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0x226>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a51      	ldr	r2, [pc, #324]	; (8001bcc <HAL_GPIO_Init+0x348>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00d      	beq.n	8001aa6 <HAL_GPIO_Init+0x222>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a50      	ldr	r2, [pc, #320]	; (8001bd0 <HAL_GPIO_Init+0x34c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x21e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4f      	ldr	r2, [pc, #316]	; (8001bd4 <HAL_GPIO_Init+0x350>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_GPIO_Init+0x21a>
 8001a9a:	2309      	movs	r3, #9
 8001a9c:	e012      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	e010      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	e00e      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	e00c      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aaa:	2306      	movs	r3, #6
 8001aac:	e00a      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aae:	2305      	movs	r3, #5
 8001ab0:	e008      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e004      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	f002 0203 	and.w	r2, r2, #3
 8001aca:	0092      	lsls	r2, r2, #2
 8001acc:	4093      	lsls	r3, r2
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad4:	4935      	ldr	r1, [pc, #212]	; (8001bac <HAL_GPIO_Init+0x328>)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b06:	4a34      	ldr	r2, [pc, #208]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b0c:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b30:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	f67f ae84 	bls.w	80018a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40013800 	.word	0x40013800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020400 	.word	0x40020400
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020c00 	.word	0x40020c00
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40021400 	.word	0x40021400
 8001bc8:	40021800 	.word	0x40021800
 8001bcc:	40021c00 	.word	0x40021c00
 8001bd0:	40022000 	.word	0x40022000
 8001bd4:	40022400 	.word	0x40022400
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e267      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d075      	beq.n	8001d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c2e:	4b88      	ldr	r3, [pc, #544]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d00c      	beq.n	8001c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3a:	4b85      	ldr	r3, [pc, #532]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d112      	bne.n	8001c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c46:	4b82      	ldr	r3, [pc, #520]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c52:	d10b      	bne.n	8001c6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	4b7e      	ldr	r3, [pc, #504]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d05b      	beq.n	8001d18 <HAL_RCC_OscConfig+0x108>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d157      	bne.n	8001d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e242      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c74:	d106      	bne.n	8001c84 <HAL_RCC_OscConfig+0x74>
 8001c76:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a75      	ldr	r2, [pc, #468]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e01d      	b.n	8001cc0 <HAL_RCC_OscConfig+0xb0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x98>
 8001c8e:	4b70      	ldr	r3, [pc, #448]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6f      	ldr	r2, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6c      	ldr	r2, [pc, #432]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0xb0>
 8001ca8:	4b69      	ldr	r3, [pc, #420]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a68      	ldr	r2, [pc, #416]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b66      	ldr	r3, [pc, #408]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a65      	ldr	r2, [pc, #404]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d013      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fcea 	bl	80016a0 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fce6 	bl	80016a0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e207      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xc0>
 8001cee:	e014      	b.n	8001d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fcd6 	bl	80016a0 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff fcd2 	bl	80016a0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e1f3      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	4b51      	ldr	r3, [pc, #324]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0xe8>
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d063      	beq.n	8001dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d26:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d11c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3e:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d116      	bne.n	8001d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_RCC_OscConfig+0x152>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e1c7      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4937      	ldr	r1, [pc, #220]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	e03a      	b.n	8001dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d80:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_RCC_OscConfig+0x244>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7ff fc8b 	bl	80016a0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fc87 	bl	80016a0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e1a8      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4925      	ldr	r1, [pc, #148]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_OscConfig+0x244>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fc6a 	bl	80016a0 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fc66 	bl	80016a0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e187      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d036      	beq.n	8001e68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d016      	beq.n	8001e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_RCC_OscConfig+0x248>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff fc4a 	bl	80016a0 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff fc46 	bl	80016a0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e167      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x200>
 8001e2e:	e01b      	b.n	8001e68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_OscConfig+0x248>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7ff fc33 	bl	80016a0 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	e00e      	b.n	8001e5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fc2f 	bl	80016a0 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d907      	bls.n	8001e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e150      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
 8001e50:	40023800 	.word	0x40023800
 8001e54:	42470000 	.word	0x42470000
 8001e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	4b88      	ldr	r3, [pc, #544]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ea      	bne.n	8001e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8097 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b81      	ldr	r3, [pc, #516]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b7d      	ldr	r3, [pc, #500]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a7c      	ldr	r2, [pc, #496]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b7a      	ldr	r3, [pc, #488]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b77      	ldr	r3, [pc, #476]	; (8002084 <HAL_RCC_OscConfig+0x474>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	4b74      	ldr	r3, [pc, #464]	; (8002084 <HAL_RCC_OscConfig+0x474>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a73      	ldr	r2, [pc, #460]	; (8002084 <HAL_RCC_OscConfig+0x474>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fbef 	bl	80016a0 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7ff fbeb 	bl	80016a0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e10c      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b6a      	ldr	r3, [pc, #424]	; (8002084 <HAL_RCC_OscConfig+0x474>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x2ea>
 8001eec:	4b64      	ldr	r3, [pc, #400]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a63      	ldr	r2, [pc, #396]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	e01c      	b.n	8001f34 <HAL_RCC_OscConfig+0x324>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x30c>
 8001f02:	4b5f      	ldr	r3, [pc, #380]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	4a5e      	ldr	r2, [pc, #376]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0e:	4b5c      	ldr	r3, [pc, #368]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a5b      	ldr	r2, [pc, #364]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0x324>
 8001f1c:	4b58      	ldr	r3, [pc, #352]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a57      	ldr	r2, [pc, #348]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	4b55      	ldr	r3, [pc, #340]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	4a54      	ldr	r2, [pc, #336]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f2e:	f023 0304 	bic.w	r3, r3, #4
 8001f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d015      	beq.n	8001f68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fbb0 	bl	80016a0 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f44:	f7ff fbac 	bl	80016a0 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0cb      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5a:	4b49      	ldr	r3, [pc, #292]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0ee      	beq.n	8001f44 <HAL_RCC_OscConfig+0x334>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff fb9a 	bl	80016a0 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7ff fb96 	bl	80016a0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0b5      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f86:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1ee      	bne.n	8001f70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f98:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a38      	ldr	r2, [pc, #224]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80a1 	beq.w	80020f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fae:	4b34      	ldr	r3, [pc, #208]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d05c      	beq.n	8002074 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d141      	bne.n	8002046 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_RCC_OscConfig+0x478>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fb6a 	bl	80016a0 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff fb66 	bl	80016a0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e087      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	4b27      	ldr	r3, [pc, #156]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	019b      	lsls	r3, r3, #6
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	085b      	lsrs	r3, r3, #1
 8002006:	3b01      	subs	r3, #1
 8002008:	041b      	lsls	r3, r3, #16
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	061b      	lsls	r3, r3, #24
 8002012:	491b      	ldr	r1, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x478>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff fb3f 	bl	80016a0 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff fb3b 	bl	80016a0 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e05c      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x416>
 8002044:	e054      	b.n	80020f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_RCC_OscConfig+0x478>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fb28 	bl	80016a0 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff fb24 	bl	80016a0 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e045      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_RCC_OscConfig+0x470>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x444>
 8002072:	e03d      	b.n	80020f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e038      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
 8002080:	40023800 	.word	0x40023800
 8002084:	40007000 	.word	0x40007000
 8002088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_RCC_OscConfig+0x4ec>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d028      	beq.n	80020ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d121      	bne.n	80020ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d11a      	bne.n	80020ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020bc:	4013      	ands	r3, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d111      	bne.n	80020ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	3b01      	subs	r3, #1
 80020d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d107      	bne.n	80020ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800

08002100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0cc      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002114:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d90c      	bls.n	800213c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b65      	ldr	r3, [pc, #404]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0b8      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002154:	4b59      	ldr	r3, [pc, #356]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a58      	ldr	r2, [pc, #352]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800215e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800216c:	4b53      	ldr	r3, [pc, #332]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a52      	ldr	r2, [pc, #328]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b50      	ldr	r3, [pc, #320]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	494d      	ldr	r1, [pc, #308]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d044      	beq.n	8002220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b47      	ldr	r3, [pc, #284]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d119      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d003      	beq.n	80021be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021be:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ce:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e067      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021de:	4b37      	ldr	r3, [pc, #220]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f023 0203 	bic.w	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4934      	ldr	r1, [pc, #208]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f0:	f7ff fa56 	bl	80016a0 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	e00a      	b.n	800220e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f8:	f7ff fa52 	bl	80016a0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e04f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 020c 	and.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	429a      	cmp	r2, r3
 800221e:	d1eb      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d20c      	bcs.n	8002248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e032      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4916      	ldr	r1, [pc, #88]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	490e      	ldr	r1, [pc, #56]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002286:	f000 f889 	bl	800239c <HAL_RCC_GetSysClockFreq>
 800228a:	4602      	mov	r2, r0
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	490a      	ldr	r1, [pc, #40]	; (80022c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	5ccb      	ldrb	r3, [r1, r3]
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff f9b6 	bl	8001618 <HAL_InitTick>

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023c00 	.word	0x40023c00
 80022bc:	40023800 	.word	0x40023800
 80022c0:	080047b0 	.word	0x080047b0
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000004 	.word	0x20000004

080022cc <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d129      	bne.n	8002332 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <HAL_RCC_MCOConfig+0xc4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a2a      	ldr	r2, [pc, #168]	; (8002390 <HAL_RCC_MCOConfig+0xc4>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_RCC_MCOConfig+0xc4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80022fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	4619      	mov	r1, r3
 8002316:	481f      	ldr	r0, [pc, #124]	; (8002394 <HAL_RCC_MCOConfig+0xc8>)
 8002318:	f7ff fab4 	bl	8001884 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_RCC_MCOConfig+0xc4>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	430b      	orrs	r3, r1
 800232a:	4919      	ldr	r1, [pc, #100]	; (8002390 <HAL_RCC_MCOConfig+0xc4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002330:	e029      	b.n	8002386 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <HAL_RCC_MCOConfig+0xc4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a15      	ldr	r2, [pc, #84]	; (8002390 <HAL_RCC_MCOConfig+0xc4>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_RCC_MCOConfig+0xc4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800234e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	4619      	mov	r1, r3
 800236a:	480b      	ldr	r0, [pc, #44]	; (8002398 <HAL_RCC_MCOConfig+0xcc>)
 800236c:	f7ff fa8a 	bl	8001884 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <HAL_RCC_MCOConfig+0xc4>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	00d9      	lsls	r1, r3, #3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	430b      	orrs	r3, r1
 8002380:	4903      	ldr	r1, [pc, #12]	; (8002390 <HAL_RCC_MCOConfig+0xc4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
}
 8002386:	bf00      	nop
 8002388:	3730      	adds	r7, #48	; 0x30
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40020000 	.word	0x40020000
 8002398:	40020800 	.word	0x40020800

0800239c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800239c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a0:	b090      	sub	sp, #64	; 0x40
 80023a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
 80023a8:	2300      	movs	r3, #0
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ac:	2300      	movs	r3, #0
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_GetSysClockFreq+0x180>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d00d      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x40>
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	f200 80a1 	bhi.w	8002508 <HAL_RCC_GetSysClockFreq+0x16c>
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x34>
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ce:	e09b      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_GetSysClockFreq+0x184>)
 80023d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023d4:	e09b      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023d6:	4b53      	ldr	r3, [pc, #332]	; (8002524 <HAL_RCC_GetSysClockFreq+0x188>)
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023da:	e098      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023dc:	4b4f      	ldr	r3, [pc, #316]	; (800251c <HAL_RCC_GetSysClockFreq+0x180>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e6:	4b4d      	ldr	r3, [pc, #308]	; (800251c <HAL_RCC_GetSysClockFreq+0x180>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d028      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f2:	4b4a      	ldr	r3, [pc, #296]	; (800251c <HAL_RCC_GetSysClockFreq+0x180>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	099b      	lsrs	r3, r3, #6
 80023f8:	2200      	movs	r2, #0
 80023fa:	623b      	str	r3, [r7, #32]
 80023fc:	627a      	str	r2, [r7, #36]	; 0x24
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002404:	2100      	movs	r1, #0
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_GetSysClockFreq+0x188>)
 8002408:	fb03 f201 	mul.w	r2, r3, r1
 800240c:	2300      	movs	r3, #0
 800240e:	fb00 f303 	mul.w	r3, r0, r3
 8002412:	4413      	add	r3, r2
 8002414:	4a43      	ldr	r2, [pc, #268]	; (8002524 <HAL_RCC_GetSysClockFreq+0x188>)
 8002416:	fba0 1202 	umull	r1, r2, r0, r2
 800241a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800241c:	460a      	mov	r2, r1
 800241e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002422:	4413      	add	r3, r2
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002428:	2200      	movs	r2, #0
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	61fa      	str	r2, [r7, #28]
 800242e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002432:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002436:	f7fd fee1 	bl	80001fc <__aeabi_uldivmod>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4613      	mov	r3, r2
 8002440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002442:	e053      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002444:	4b35      	ldr	r3, [pc, #212]	; (800251c <HAL_RCC_GetSysClockFreq+0x180>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	2200      	movs	r2, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	617a      	str	r2, [r7, #20]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002456:	f04f 0b00 	mov.w	fp, #0
 800245a:	4652      	mov	r2, sl
 800245c:	465b      	mov	r3, fp
 800245e:	f04f 0000 	mov.w	r0, #0
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	0159      	lsls	r1, r3, #5
 8002468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800246c:	0150      	lsls	r0, r2, #5
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	ebb2 080a 	subs.w	r8, r2, sl
 8002476:	eb63 090b 	sbc.w	r9, r3, fp
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002486:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800248a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800248e:	ebb2 0408 	subs.w	r4, r2, r8
 8002492:	eb63 0509 	sbc.w	r5, r3, r9
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	00eb      	lsls	r3, r5, #3
 80024a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024a4:	00e2      	lsls	r2, r4, #3
 80024a6:	4614      	mov	r4, r2
 80024a8:	461d      	mov	r5, r3
 80024aa:	eb14 030a 	adds.w	r3, r4, sl
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	eb45 030b 	adc.w	r3, r5, fp
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024c2:	4629      	mov	r1, r5
 80024c4:	028b      	lsls	r3, r1, #10
 80024c6:	4621      	mov	r1, r4
 80024c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024cc:	4621      	mov	r1, r4
 80024ce:	028a      	lsls	r2, r1, #10
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d6:	2200      	movs	r2, #0
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	60fa      	str	r2, [r7, #12]
 80024dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024e0:	f7fd fe8c 	bl	80001fc <__aeabi_uldivmod>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4613      	mov	r3, r2
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_GetSysClockFreq+0x180>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	3301      	adds	r3, #1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80024fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002506:	e002      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_GetSysClockFreq+0x184>)
 800250a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800250c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002510:	4618      	mov	r0, r3
 8002512:	3740      	adds	r7, #64	; 0x40
 8002514:	46bd      	mov	sp, r7
 8002516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	00f42400 	.word	0x00f42400
 8002524:	017d7840 	.word	0x017d7840

08002528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_RCC_GetHCLKFreq+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000

08002540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002544:	f7ff fff0 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	0a9b      	lsrs	r3, r3, #10
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4903      	ldr	r1, [pc, #12]	; (8002564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	080047c0 	.word	0x080047c0

08002568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800256c:	f7ff ffdc 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0b5b      	lsrs	r3, r3, #13
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	; (800258c <HAL_RCC_GetPCLK2Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	080047c0 	.word	0x080047c0

08002590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e07b      	b.n	800269a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d108      	bne.n	80025bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025b2:	d009      	beq.n	80025c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
 80025ba:	e005      	b.n	80025c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe fe20 	bl	8001228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	ea42 0103 	orr.w	r1, r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	f003 0104 	and.w	r1, r3, #4
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	f003 0210 	and.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002688:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b08c      	sub	sp, #48	; 0x30
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026b0:	2301      	movs	r3, #1
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x26>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e18a      	b.n	80029de <HAL_SPI_TransmitReceive+0x33c>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026d0:	f7fe ffe6 	bl	80016a0 <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d00f      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x70>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026f8:	d107      	bne.n	800270a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <HAL_SPI_TransmitReceive+0x68>
 8002702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002706:	2b04      	cmp	r3, #4
 8002708:	d003      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800270a:	2302      	movs	r3, #2
 800270c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002710:	e15b      	b.n	80029ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x82>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x82>
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800272a:	e14e      	b.n	80029ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b04      	cmp	r3, #4
 8002736:	d003      	beq.n	8002740 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2205      	movs	r2, #5
 800273c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	887a      	ldrh	r2, [r7, #2]
 8002756:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	887a      	ldrh	r2, [r7, #2]
 8002762:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d007      	beq.n	8002794 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002792:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800279c:	d178      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_SPI_TransmitReceive+0x10a>
 80027a6:	8b7b      	ldrh	r3, [r7, #26]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d166      	bne.n	800287a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	1c9a      	adds	r2, r3, #2
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027d0:	e053      	b.n	800287a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d11b      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x176>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_SPI_TransmitReceive+0x176>
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d113      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	1c9a      	adds	r2, r3, #2
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d119      	bne.n	800285a <HAL_SPI_TransmitReceive+0x1b8>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d014      	beq.n	800285a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	b292      	uxth	r2, r2
 800283c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	1c9a      	adds	r2, r3, #2
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002856:	2301      	movs	r3, #1
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800285a:	f7fe ff21 	bl	80016a0 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002866:	429a      	cmp	r2, r3
 8002868:	d807      	bhi.n	800287a <HAL_SPI_TransmitReceive+0x1d8>
 800286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d003      	beq.n	800287a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002878:	e0a7      	b.n	80029ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1a6      	bne.n	80027d2 <HAL_SPI_TransmitReceive+0x130>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1a1      	bne.n	80027d2 <HAL_SPI_TransmitReceive+0x130>
 800288e:	e07c      	b.n	800298a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_SPI_TransmitReceive+0x1fc>
 8002898:	8b7b      	ldrh	r3, [r7, #26]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d16b      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c4:	e057      	b.n	8002976 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d11c      	bne.n	800290e <HAL_SPI_TransmitReceive+0x26c>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d017      	beq.n	800290e <HAL_SPI_TransmitReceive+0x26c>
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d114      	bne.n	800290e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	7812      	ldrb	r2, [r2, #0]
 80028f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d119      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x2ae>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d014      	beq.n	8002950 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800294c:	2301      	movs	r3, #1
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002950:	f7fe fea6 	bl	80016a0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800295c:	429a      	cmp	r2, r3
 800295e:	d803      	bhi.n	8002968 <HAL_SPI_TransmitReceive+0x2c6>
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d102      	bne.n	800296e <HAL_SPI_TransmitReceive+0x2cc>
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	2b00      	cmp	r3, #0
 800296c:	d103      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002974:	e029      	b.n	80029ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1a2      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x224>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d19d      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800298a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f8b2 	bl	8002af8 <SPI_EndRxTxTransaction>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80029a6:	e010      	b.n	80029ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10b      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	e000      	b.n	80029ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80029c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3730      	adds	r7, #48	; 0x30
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029f8:	f7fe fe52 	bl	80016a0 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a08:	f7fe fe4a 	bl	80016a0 <HAL_GetTick>
 8002a0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a0e:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	015b      	lsls	r3, r3, #5
 8002a14:	0d1b      	lsrs	r3, r3, #20
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a1e:	e054      	b.n	8002aca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d050      	beq.n	8002aca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a28:	f7fe fe3a 	bl	80016a0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d902      	bls.n	8002a3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d13d      	bne.n	8002aba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a56:	d111      	bne.n	8002a7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a60:	d004      	beq.n	8002a6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d107      	bne.n	8002a7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a84:	d10f      	bne.n	8002aa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e017      	b.n	8002aea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	bf0c      	ite	eq
 8002ada:	2301      	moveq	r3, #1
 8002adc:	2300      	movne	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d19b      	bne.n	8002a20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000000 	.word	0x20000000

08002af8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <SPI_EndRxTxTransaction+0x7c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <SPI_EndRxTxTransaction+0x80>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0d5b      	lsrs	r3, r3, #21
 8002b10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b22:	d112      	bne.n	8002b4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff ff5a 	bl	80029e8 <SPI_WaitFlagStateUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d016      	beq.n	8002b68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e00f      	b.n	8002b6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b80      	cmp	r3, #128	; 0x80
 8002b62:	d0f2      	beq.n	8002b4a <SPI_EndRxTxTransaction+0x52>
 8002b64:	e000      	b.n	8002b68 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b66:	bf00      	nop
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000000 	.word	0x20000000
 8002b78:	165e9f81 	.word	0x165e9f81

08002b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e041      	b.n	8002c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe fb88 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	f000 fad8 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e041      	b.n	8002cb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f839 	bl	8002cb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3304      	adds	r3, #4
 8002c56:	4619      	mov	r1, r3
 8002c58:	4610      	mov	r0, r2
 8002c5a:	f000 fa89 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_TIM_PWM_Start+0x24>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	bf14      	ite	ne
 8002ce8:	2301      	movne	r3, #1
 8002cea:	2300      	moveq	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	e022      	b.n	8002d36 <HAL_TIM_PWM_Start+0x6a>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d109      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x3e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	bf14      	ite	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	2300      	moveq	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	e015      	b.n	8002d36 <HAL_TIM_PWM_Start+0x6a>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d109      	bne.n	8002d24 <HAL_TIM_PWM_Start+0x58>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	bf14      	ite	ne
 8002d1c:	2301      	movne	r3, #1
 8002d1e:	2300      	moveq	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e008      	b.n	8002d36 <HAL_TIM_PWM_Start+0x6a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07c      	b.n	8002e38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_PWM_Start+0x82>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d4c:	e013      	b.n	8002d76 <HAL_TIM_PWM_Start+0xaa>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d104      	bne.n	8002d5e <HAL_TIM_PWM_Start+0x92>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d5c:	e00b      	b.n	8002d76 <HAL_TIM_PWM_Start+0xaa>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d104      	bne.n	8002d6e <HAL_TIM_PWM_Start+0xa2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d6c:	e003      	b.n	8002d76 <HAL_TIM_PWM_Start+0xaa>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2202      	movs	r2, #2
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	6839      	ldr	r1, [r7, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fce0 	bl	8003744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a2d      	ldr	r2, [pc, #180]	; (8002e40 <HAL_TIM_PWM_Start+0x174>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_TIM_PWM_Start+0xcc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a2c      	ldr	r2, [pc, #176]	; (8002e44 <HAL_TIM_PWM_Start+0x178>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d101      	bne.n	8002d9c <HAL_TIM_PWM_Start+0xd0>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_TIM_PWM_Start+0xd2>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d007      	beq.n	8002db2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <HAL_TIM_PWM_Start+0x174>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d022      	beq.n	8002e02 <HAL_TIM_PWM_Start+0x136>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d01d      	beq.n	8002e02 <HAL_TIM_PWM_Start+0x136>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <HAL_TIM_PWM_Start+0x17c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d018      	beq.n	8002e02 <HAL_TIM_PWM_Start+0x136>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <HAL_TIM_PWM_Start+0x180>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_TIM_PWM_Start+0x136>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <HAL_TIM_PWM_Start+0x184>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00e      	beq.n	8002e02 <HAL_TIM_PWM_Start+0x136>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <HAL_TIM_PWM_Start+0x178>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d009      	beq.n	8002e02 <HAL_TIM_PWM_Start+0x136>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <HAL_TIM_PWM_Start+0x188>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d004      	beq.n	8002e02 <HAL_TIM_PWM_Start+0x136>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <HAL_TIM_PWM_Start+0x18c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d111      	bne.n	8002e26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b06      	cmp	r3, #6
 8002e12:	d010      	beq.n	8002e36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e24:	e007      	b.n	8002e36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40010400 	.word	0x40010400
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	40000c00 	.word	0x40000c00
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40001800 	.word	0x40001800

08002e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e0ae      	b.n	8002fd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	f200 809f 	bhi.w	8002fc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e8a:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e90:	08002ec5 	.word	0x08002ec5
 8002e94:	08002fc9 	.word	0x08002fc9
 8002e98:	08002fc9 	.word	0x08002fc9
 8002e9c:	08002fc9 	.word	0x08002fc9
 8002ea0:	08002f05 	.word	0x08002f05
 8002ea4:	08002fc9 	.word	0x08002fc9
 8002ea8:	08002fc9 	.word	0x08002fc9
 8002eac:	08002fc9 	.word	0x08002fc9
 8002eb0:	08002f47 	.word	0x08002f47
 8002eb4:	08002fc9 	.word	0x08002fc9
 8002eb8:	08002fc9 	.word	0x08002fc9
 8002ebc:	08002fc9 	.word	0x08002fc9
 8002ec0:	08002f87 	.word	0x08002f87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f9f0 	bl	80032b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0208 	orr.w	r2, r2, #8
 8002ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0204 	bic.w	r2, r2, #4
 8002eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6999      	ldr	r1, [r3, #24]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	619a      	str	r2, [r3, #24]
      break;
 8002f02:	e064      	b.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fa40 	bl	8003390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6999      	ldr	r1, [r3, #24]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	021a      	lsls	r2, r3, #8
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	619a      	str	r2, [r3, #24]
      break;
 8002f44:	e043      	b.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fa95 	bl	800347c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0208 	orr.w	r2, r2, #8
 8002f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0204 	bic.w	r2, r2, #4
 8002f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69d9      	ldr	r1, [r3, #28]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	61da      	str	r2, [r3, #28]
      break;
 8002f84:	e023      	b.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fae9 	bl	8003564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69d9      	ldr	r1, [r3, #28]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	021a      	lsls	r2, r3, #8
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	61da      	str	r2, [r3, #28]
      break;
 8002fc6:	e002      	b.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	75fb      	strb	r3, [r7, #23]
      break;
 8002fcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIM_ConfigClockSource+0x1c>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e0b4      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x186>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800301a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003034:	d03e      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303a:	f200 8087 	bhi.w	800314c <HAL_TIM_ConfigClockSource+0x16c>
 800303e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003042:	f000 8086 	beq.w	8003152 <HAL_TIM_ConfigClockSource+0x172>
 8003046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304a:	d87f      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 800304c:	2b70      	cmp	r3, #112	; 0x70
 800304e:	d01a      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0xa6>
 8003050:	2b70      	cmp	r3, #112	; 0x70
 8003052:	d87b      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d050      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x11a>
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	d877      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 800305c:	2b50      	cmp	r3, #80	; 0x50
 800305e:	d03c      	beq.n	80030da <HAL_TIM_ConfigClockSource+0xfa>
 8003060:	2b50      	cmp	r3, #80	; 0x50
 8003062:	d873      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d058      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x13a>
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d86f      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b30      	cmp	r3, #48	; 0x30
 800306e:	d064      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15a>
 8003070:	2b30      	cmp	r3, #48	; 0x30
 8003072:	d86b      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 8003074:	2b20      	cmp	r3, #32
 8003076:	d060      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15a>
 8003078:	2b20      	cmp	r3, #32
 800307a:	d867      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d05c      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15a>
 8003080:	2b10      	cmp	r3, #16
 8003082:	d05a      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x15a>
 8003084:	e062      	b.n	800314c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f000 fb35 	bl	8003704 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	609a      	str	r2, [r3, #8]
      break;
 80030b2:	e04f      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f000 fb1e 	bl	8003704 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d6:	609a      	str	r2, [r3, #8]
      break;
 80030d8:	e03c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 fa92 	bl	8003610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2150      	movs	r1, #80	; 0x50
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 faeb 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 80030f8:	e02c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	461a      	mov	r2, r3
 8003108:	f000 fab1 	bl	800366e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2160      	movs	r1, #96	; 0x60
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fadb 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 8003118:	e01c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6859      	ldr	r1, [r3, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	461a      	mov	r2, r3
 8003128:	f000 fa72 	bl	8003610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2140      	movs	r1, #64	; 0x40
 8003132:	4618      	mov	r0, r3
 8003134:	f000 facb 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 8003138:	e00c      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f000 fac2 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 800314a:	e003      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
      break;
 8003150:	e000      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a40      	ldr	r2, [pc, #256]	; (8003284 <TIM_Base_SetConfig+0x114>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d013      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d00f      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a3d      	ldr	r2, [pc, #244]	; (8003288 <TIM_Base_SetConfig+0x118>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00b      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a3c      	ldr	r2, [pc, #240]	; (800328c <TIM_Base_SetConfig+0x11c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3b      	ldr	r2, [pc, #236]	; (8003290 <TIM_Base_SetConfig+0x120>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3a      	ldr	r2, [pc, #232]	; (8003294 <TIM_Base_SetConfig+0x124>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d108      	bne.n	80031c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <TIM_Base_SetConfig+0x114>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02b      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d027      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <TIM_Base_SetConfig+0x118>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d023      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2b      	ldr	r2, [pc, #172]	; (800328c <TIM_Base_SetConfig+0x11c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2a      	ldr	r2, [pc, #168]	; (8003290 <TIM_Base_SetConfig+0x120>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01b      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a29      	ldr	r2, [pc, #164]	; (8003294 <TIM_Base_SetConfig+0x124>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d017      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a28      	ldr	r2, [pc, #160]	; (8003298 <TIM_Base_SetConfig+0x128>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a27      	ldr	r2, [pc, #156]	; (800329c <TIM_Base_SetConfig+0x12c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00f      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <TIM_Base_SetConfig+0x130>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00b      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a25      	ldr	r2, [pc, #148]	; (80032a4 <TIM_Base_SetConfig+0x134>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <TIM_Base_SetConfig+0x138>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a23      	ldr	r2, [pc, #140]	; (80032ac <TIM_Base_SetConfig+0x13c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <TIM_Base_SetConfig+0x114>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0xf8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <TIM_Base_SetConfig+0x124>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d103      	bne.n	8003270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	615a      	str	r2, [r3, #20]
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40010000 	.word	0x40010000
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40000c00 	.word	0x40000c00
 8003294:	40010400 	.word	0x40010400
 8003298:	40014000 	.word	0x40014000
 800329c:	40014400 	.word	0x40014400
 80032a0:	40014800 	.word	0x40014800
 80032a4:	40001800 	.word	0x40001800
 80032a8:	40001c00 	.word	0x40001c00
 80032ac:	40002000 	.word	0x40002000

080032b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f023 0201 	bic.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f023 0302 	bic.w	r3, r3, #2
 80032f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a20      	ldr	r2, [pc, #128]	; (8003388 <TIM_OC1_SetConfig+0xd8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC1_SetConfig+0x64>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a1f      	ldr	r2, [pc, #124]	; (800338c <TIM_OC1_SetConfig+0xdc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10c      	bne.n	800332e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0308 	bic.w	r3, r3, #8
 800331a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a15      	ldr	r2, [pc, #84]	; (8003388 <TIM_OC1_SetConfig+0xd8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d003      	beq.n	800333e <TIM_OC1_SetConfig+0x8e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a14      	ldr	r2, [pc, #80]	; (800338c <TIM_OC1_SetConfig+0xdc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d111      	bne.n	8003362 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800334c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	621a      	str	r2, [r3, #32]
}
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40010000 	.word	0x40010000
 800338c:	40010400 	.word	0x40010400

08003390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f023 0210 	bic.w	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0320 	bic.w	r3, r3, #32
 80033da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a22      	ldr	r2, [pc, #136]	; (8003474 <TIM_OC2_SetConfig+0xe4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_OC2_SetConfig+0x68>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a21      	ldr	r2, [pc, #132]	; (8003478 <TIM_OC2_SetConfig+0xe8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d10d      	bne.n	8003414 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a17      	ldr	r2, [pc, #92]	; (8003474 <TIM_OC2_SetConfig+0xe4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <TIM_OC2_SetConfig+0x94>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a16      	ldr	r2, [pc, #88]	; (8003478 <TIM_OC2_SetConfig+0xe8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d113      	bne.n	800344c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800342a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40010000 	.word	0x40010000
 8003478:	40010400 	.word	0x40010400

0800347c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a21      	ldr	r2, [pc, #132]	; (800355c <TIM_OC3_SetConfig+0xe0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_OC3_SetConfig+0x66>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <TIM_OC3_SetConfig+0xe4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10d      	bne.n	80034fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a16      	ldr	r2, [pc, #88]	; (800355c <TIM_OC3_SetConfig+0xe0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_OC3_SetConfig+0x92>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a15      	ldr	r2, [pc, #84]	; (8003560 <TIM_OC3_SetConfig+0xe4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d113      	bne.n	8003536 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800351c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	621a      	str	r2, [r3, #32]
}
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40010000 	.word	0x40010000
 8003560:	40010400 	.word	0x40010400

08003564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	031b      	lsls	r3, r3, #12
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <TIM_OC4_SetConfig+0xa4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_OC4_SetConfig+0x68>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a11      	ldr	r2, [pc, #68]	; (800360c <TIM_OC4_SetConfig+0xa8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d109      	bne.n	80035e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	40010400 	.word	0x40010400

08003610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f023 0201 	bic.w	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 030a 	bic.w	r3, r3, #10
 800364c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800366e:	b480      	push	{r7}
 8003670:	b087      	sub	sp, #28
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0210 	bic.w	r2, r3, #16
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	031b      	lsls	r3, r3, #12
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f043 0307 	orr.w	r3, r3, #7
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800371e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	021a      	lsls	r2, r3, #8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	431a      	orrs	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	2201      	movs	r2, #1
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a1a      	ldr	r2, [r3, #32]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	43db      	mvns	r3, r3
 8003766:	401a      	ands	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1a      	ldr	r2, [r3, #32]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	431a      	orrs	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e05a      	b.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a21      	ldr	r2, [pc, #132]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d022      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d01d      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d018      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1b      	ldr	r2, [pc, #108]	; (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1a      	ldr	r2, [pc, #104]	; (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a18      	ldr	r2, [pc, #96]	; (800387c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a17      	ldr	r2, [pc, #92]	; (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a15      	ldr	r2, [pc, #84]	; (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d10c      	bne.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	4313      	orrs	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800
 8003878:	40000c00 	.word	0x40000c00
 800387c:	40010400 	.word	0x40010400
 8003880:	40014000 	.word	0x40014000
 8003884:	40001800 	.word	0x40001800

08003888 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e03d      	b.n	8003920 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e03f      	b.n	80039be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd fd0c 	bl	8001370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	; 0x24
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f9cb 	bl	8003d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b08a      	sub	sp, #40	; 0x28
 80039ca:	af02      	add	r7, sp, #8
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d17c      	bne.n	8003ae0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_UART_Transmit+0x2c>
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e075      	b.n	8003ae2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_UART_Transmit+0x3e>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e06e      	b.n	8003ae2 <HAL_UART_Transmit+0x11c>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2221      	movs	r2, #33	; 0x21
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a1a:	f7fd fe41 	bl	80016a0 <HAL_GetTick>
 8003a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	88fa      	ldrh	r2, [r7, #6]
 8003a24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a34:	d108      	bne.n	8003a48 <HAL_UART_Transmit+0x82>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e003      	b.n	8003a50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a58:	e02a      	b.n	8003ab0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2180      	movs	r1, #128	; 0x80
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f8e2 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e036      	b.n	8003ae2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e007      	b.n	8003aa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1cf      	bne.n	8003a5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2140      	movs	r1, #64	; 0x40
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f8b2 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e006      	b.n	8003ae2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3720      	adds	r7, #32
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b08a      	sub	sp, #40	; 0x28
 8003aee:	af02      	add	r7, sp, #8
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	4613      	mov	r3, r2
 8003af8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	f040 808c 	bne.w	8003c24 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_UART_Receive+0x2e>
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e084      	b.n	8003c26 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Receive+0x40>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e07d      	b.n	8003c26 <HAL_UART_Receive+0x13c>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2222      	movs	r2, #34	; 0x22
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b46:	f7fd fdab 	bl	80016a0 <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b60:	d108      	bne.n	8003b74 <HAL_UART_Receive+0x8a>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	e003      	b.n	8003b7c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b84:	e043      	b.n	8003c0e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2120      	movs	r1, #32
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f84c 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e042      	b.n	8003c26 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	3302      	adds	r3, #2
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e01f      	b.n	8003c00 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d007      	beq.n	8003bda <HAL_UART_Receive+0xf0>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <HAL_UART_Receive+0xfe>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	e008      	b.n	8003bfa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1b6      	bne.n	8003b86 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b090      	sub	sp, #64	; 0x40
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3e:	e050      	b.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d04c      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c4e:	f7fd fd27 	bl	80016a0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d241      	bcs.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c7e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e5      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3314      	adds	r3, #20
 8003cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb2:	623a      	str	r2, [r7, #32]
 8003cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	69f9      	ldr	r1, [r7, #28]
 8003cb8:	6a3a      	ldr	r2, [r7, #32]
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e5      	bne.n	8003c92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e00f      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d09f      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3740      	adds	r7, #64	; 0x40
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d10:	b0c0      	sub	sp, #256	; 0x100
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	68d9      	ldr	r1, [r3, #12]
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	ea40 0301 	orr.w	r3, r0, r1
 8003d34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d64:	f021 010c 	bic.w	r1, r1, #12
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d72:	430b      	orrs	r3, r1
 8003d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	6999      	ldr	r1, [r3, #24]
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	ea40 0301 	orr.w	r3, r0, r1
 8003d92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b8f      	ldr	r3, [pc, #572]	; (8003fd8 <UART_SetConfig+0x2cc>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d005      	beq.n	8003dac <UART_SetConfig+0xa0>
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b8d      	ldr	r3, [pc, #564]	; (8003fdc <UART_SetConfig+0x2d0>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d104      	bne.n	8003db6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dac:	f7fe fbdc 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 8003db0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003db4:	e003      	b.n	8003dbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003db6:	f7fe fbc3 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8003dba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc8:	f040 810c 	bne.w	8003fe4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dde:	4622      	mov	r2, r4
 8003de0:	462b      	mov	r3, r5
 8003de2:	1891      	adds	r1, r2, r2
 8003de4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003de6:	415b      	adcs	r3, r3
 8003de8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dee:	4621      	mov	r1, r4
 8003df0:	eb12 0801 	adds.w	r8, r2, r1
 8003df4:	4629      	mov	r1, r5
 8003df6:	eb43 0901 	adc.w	r9, r3, r1
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0e:	4690      	mov	r8, r2
 8003e10:	4699      	mov	r9, r3
 8003e12:	4623      	mov	r3, r4
 8003e14:	eb18 0303 	adds.w	r3, r8, r3
 8003e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	eb49 0303 	adc.w	r3, r9, r3
 8003e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	18db      	adds	r3, r3, r3
 8003e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e40:	4613      	mov	r3, r2
 8003e42:	eb42 0303 	adc.w	r3, r2, r3
 8003e46:	657b      	str	r3, [r7, #84]	; 0x54
 8003e48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e50:	f7fc f9d4 	bl	80001fc <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4b61      	ldr	r3, [pc, #388]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	011c      	lsls	r4, r3, #4
 8003e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e84:	4641      	mov	r1, r8
 8003e86:	eb12 0a01 	adds.w	sl, r2, r1
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea4:	4692      	mov	sl, r2
 8003ea6:	469b      	mov	fp, r3
 8003ea8:	4643      	mov	r3, r8
 8003eaa:	eb1a 0303 	adds.w	r3, sl, r3
 8003eae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	eb4b 0303 	adc.w	r3, fp, r3
 8003eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ec8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ecc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	18db      	adds	r3, r3, r3
 8003ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	eb42 0303 	adc.w	r3, r2, r3
 8003edc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ee2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ee6:	f7fc f989 	bl	80001fc <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2264      	movs	r2, #100	; 0x64
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	1acb      	subs	r3, r1, r3
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f06:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003f08:	fba3 2302 	umull	r2, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f14:	441c      	add	r4, r3
 8003f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f28:	4642      	mov	r2, r8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	1891      	adds	r1, r2, r2
 8003f2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f30:	415b      	adcs	r3, r3
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f38:	4641      	mov	r1, r8
 8003f3a:	1851      	adds	r1, r2, r1
 8003f3c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f3e:	4649      	mov	r1, r9
 8003f40:	414b      	adcs	r3, r1
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f50:	4659      	mov	r1, fp
 8003f52:	00cb      	lsls	r3, r1, #3
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	00ca      	lsls	r2, r1, #3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	4642      	mov	r2, r8
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	460a      	mov	r2, r1
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	18db      	adds	r3, r3, r3
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f92:	4613      	mov	r3, r2
 8003f94:	eb42 0303 	adc.w	r3, r2, r3
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fa2:	f7fc f92b 	bl	80001fc <__aeabi_uldivmod>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003fac:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	2164      	movs	r1, #100	; 0x64
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	3332      	adds	r3, #50	; 0x32
 8003fbe:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	f003 0207 	and.w	r2, r3, #7
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4422      	add	r2, r4
 8003fd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fd4:	e105      	b.n	80041e2 <UART_SetConfig+0x4d6>
 8003fd6:	bf00      	nop
 8003fd8:	40011000 	.word	0x40011000
 8003fdc:	40011400 	.word	0x40011400
 8003fe0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ff2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ff6:	4642      	mov	r2, r8
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	1891      	adds	r1, r2, r2
 8003ffc:	6239      	str	r1, [r7, #32]
 8003ffe:	415b      	adcs	r3, r3
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
 8004002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004006:	4641      	mov	r1, r8
 8004008:	1854      	adds	r4, r2, r1
 800400a:	4649      	mov	r1, r9
 800400c:	eb43 0501 	adc.w	r5, r3, r1
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	00eb      	lsls	r3, r5, #3
 800401a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800401e:	00e2      	lsls	r2, r4, #3
 8004020:	4614      	mov	r4, r2
 8004022:	461d      	mov	r5, r3
 8004024:	4643      	mov	r3, r8
 8004026:	18e3      	adds	r3, r4, r3
 8004028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800402c:	464b      	mov	r3, r9
 800402e:	eb45 0303 	adc.w	r3, r5, r3
 8004032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004052:	4629      	mov	r1, r5
 8004054:	008b      	lsls	r3, r1, #2
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800405c:	4621      	mov	r1, r4
 800405e:	008a      	lsls	r2, r1, #2
 8004060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004064:	f7fc f8ca 	bl	80001fc <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4b60      	ldr	r3, [pc, #384]	; (80041f0 <UART_SetConfig+0x4e4>)
 800406e:	fba3 2302 	umull	r2, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	011c      	lsls	r4, r3, #4
 8004076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004080:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004084:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004088:	4642      	mov	r2, r8
 800408a:	464b      	mov	r3, r9
 800408c:	1891      	adds	r1, r2, r2
 800408e:	61b9      	str	r1, [r7, #24]
 8004090:	415b      	adcs	r3, r3
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004098:	4641      	mov	r1, r8
 800409a:	1851      	adds	r1, r2, r1
 800409c:	6139      	str	r1, [r7, #16]
 800409e:	4649      	mov	r1, r9
 80040a0:	414b      	adcs	r3, r1
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b0:	4659      	mov	r1, fp
 80040b2:	00cb      	lsls	r3, r1, #3
 80040b4:	4651      	mov	r1, sl
 80040b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ba:	4651      	mov	r1, sl
 80040bc:	00ca      	lsls	r2, r1, #3
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	4642      	mov	r2, r8
 80040c6:	189b      	adds	r3, r3, r2
 80040c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040cc:	464b      	mov	r3, r9
 80040ce:	460a      	mov	r2, r1
 80040d0:	eb42 0303 	adc.w	r3, r2, r3
 80040d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80040e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040f0:	4649      	mov	r1, r9
 80040f2:	008b      	lsls	r3, r1, #2
 80040f4:	4641      	mov	r1, r8
 80040f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040fa:	4641      	mov	r1, r8
 80040fc:	008a      	lsls	r2, r1, #2
 80040fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004102:	f7fc f87b 	bl	80001fc <__aeabi_uldivmod>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <UART_SetConfig+0x4e4>)
 800410c:	fba3 1302 	umull	r1, r3, r3, r2
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	2164      	movs	r1, #100	; 0x64
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	3332      	adds	r3, #50	; 0x32
 800411e:	4a34      	ldr	r2, [pc, #208]	; (80041f0 <UART_SetConfig+0x4e4>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412a:	441c      	add	r4, r3
 800412c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004130:	2200      	movs	r2, #0
 8004132:	673b      	str	r3, [r7, #112]	; 0x70
 8004134:	677a      	str	r2, [r7, #116]	; 0x74
 8004136:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800413a:	4642      	mov	r2, r8
 800413c:	464b      	mov	r3, r9
 800413e:	1891      	adds	r1, r2, r2
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	415b      	adcs	r3, r3
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800414a:	4641      	mov	r1, r8
 800414c:	1851      	adds	r1, r2, r1
 800414e:	6039      	str	r1, [r7, #0]
 8004150:	4649      	mov	r1, r9
 8004152:	414b      	adcs	r3, r1
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004162:	4659      	mov	r1, fp
 8004164:	00cb      	lsls	r3, r1, #3
 8004166:	4651      	mov	r1, sl
 8004168:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800416c:	4651      	mov	r1, sl
 800416e:	00ca      	lsls	r2, r1, #3
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	4603      	mov	r3, r0
 8004176:	4642      	mov	r2, r8
 8004178:	189b      	adds	r3, r3, r2
 800417a:	66bb      	str	r3, [r7, #104]	; 0x68
 800417c:	464b      	mov	r3, r9
 800417e:	460a      	mov	r2, r1
 8004180:	eb42 0303 	adc.w	r3, r2, r3
 8004184:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	663b      	str	r3, [r7, #96]	; 0x60
 8004190:	667a      	str	r2, [r7, #100]	; 0x64
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800419e:	4649      	mov	r1, r9
 80041a0:	008b      	lsls	r3, r1, #2
 80041a2:	4641      	mov	r1, r8
 80041a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a8:	4641      	mov	r1, r8
 80041aa:	008a      	lsls	r2, r1, #2
 80041ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041b0:	f7fc f824 	bl	80001fc <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <UART_SetConfig+0x4e4>)
 80041ba:	fba3 1302 	umull	r1, r3, r3, r2
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2164      	movs	r1, #100	; 0x64
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <UART_SetConfig+0x4e4>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f003 020f 	and.w	r2, r3, #15
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4422      	add	r2, r4
 80041e0:	609a      	str	r2, [r3, #8]
}
 80041e2:	bf00      	nop
 80041e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041e8:	46bd      	mov	sp, r7
 80041ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ee:	bf00      	nop
 80041f0:	51eb851f 	.word	0x51eb851f

080041f4 <atoi>:
 80041f4:	220a      	movs	r2, #10
 80041f6:	2100      	movs	r1, #0
 80041f8:	f000 b8b4 	b.w	8004364 <strtol>

080041fc <__errno>:
 80041fc:	4b01      	ldr	r3, [pc, #4]	; (8004204 <__errno+0x8>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	2000000c 	.word	0x2000000c

08004208 <__libc_init_array>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4d0d      	ldr	r5, [pc, #52]	; (8004240 <__libc_init_array+0x38>)
 800420c:	4c0d      	ldr	r4, [pc, #52]	; (8004244 <__libc_init_array+0x3c>)
 800420e:	1b64      	subs	r4, r4, r5
 8004210:	10a4      	asrs	r4, r4, #2
 8004212:	2600      	movs	r6, #0
 8004214:	42a6      	cmp	r6, r4
 8004216:	d109      	bne.n	800422c <__libc_init_array+0x24>
 8004218:	4d0b      	ldr	r5, [pc, #44]	; (8004248 <__libc_init_array+0x40>)
 800421a:	4c0c      	ldr	r4, [pc, #48]	; (800424c <__libc_init_array+0x44>)
 800421c:	f000 f8ac 	bl	8004378 <_init>
 8004220:	1b64      	subs	r4, r4, r5
 8004222:	10a4      	asrs	r4, r4, #2
 8004224:	2600      	movs	r6, #0
 8004226:	42a6      	cmp	r6, r4
 8004228:	d105      	bne.n	8004236 <__libc_init_array+0x2e>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004230:	4798      	blx	r3
 8004232:	3601      	adds	r6, #1
 8004234:	e7ee      	b.n	8004214 <__libc_init_array+0xc>
 8004236:	f855 3b04 	ldr.w	r3, [r5], #4
 800423a:	4798      	blx	r3
 800423c:	3601      	adds	r6, #1
 800423e:	e7f2      	b.n	8004226 <__libc_init_array+0x1e>
 8004240:	080048d4 	.word	0x080048d4
 8004244:	080048d4 	.word	0x080048d4
 8004248:	080048d4 	.word	0x080048d4
 800424c:	080048d8 	.word	0x080048d8

08004250 <memset>:
 8004250:	4402      	add	r2, r0
 8004252:	4603      	mov	r3, r0
 8004254:	4293      	cmp	r3, r2
 8004256:	d100      	bne.n	800425a <memset+0xa>
 8004258:	4770      	bx	lr
 800425a:	f803 1b01 	strb.w	r1, [r3], #1
 800425e:	e7f9      	b.n	8004254 <memset+0x4>

08004260 <_strtol_l.constprop.0>:
 8004260:	2b01      	cmp	r3, #1
 8004262:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004266:	d001      	beq.n	800426c <_strtol_l.constprop.0+0xc>
 8004268:	2b24      	cmp	r3, #36	; 0x24
 800426a:	d906      	bls.n	800427a <_strtol_l.constprop.0+0x1a>
 800426c:	f7ff ffc6 	bl	80041fc <__errno>
 8004270:	2316      	movs	r3, #22
 8004272:	6003      	str	r3, [r0, #0]
 8004274:	2000      	movs	r0, #0
 8004276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004360 <_strtol_l.constprop.0+0x100>
 800427e:	460d      	mov	r5, r1
 8004280:	462e      	mov	r6, r5
 8004282:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004286:	f814 700c 	ldrb.w	r7, [r4, ip]
 800428a:	f017 0708 	ands.w	r7, r7, #8
 800428e:	d1f7      	bne.n	8004280 <_strtol_l.constprop.0+0x20>
 8004290:	2c2d      	cmp	r4, #45	; 0x2d
 8004292:	d132      	bne.n	80042fa <_strtol_l.constprop.0+0x9a>
 8004294:	782c      	ldrb	r4, [r5, #0]
 8004296:	2701      	movs	r7, #1
 8004298:	1cb5      	adds	r5, r6, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d05b      	beq.n	8004356 <_strtol_l.constprop.0+0xf6>
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d109      	bne.n	80042b6 <_strtol_l.constprop.0+0x56>
 80042a2:	2c30      	cmp	r4, #48	; 0x30
 80042a4:	d107      	bne.n	80042b6 <_strtol_l.constprop.0+0x56>
 80042a6:	782c      	ldrb	r4, [r5, #0]
 80042a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80042ac:	2c58      	cmp	r4, #88	; 0x58
 80042ae:	d14d      	bne.n	800434c <_strtol_l.constprop.0+0xec>
 80042b0:	786c      	ldrb	r4, [r5, #1]
 80042b2:	2310      	movs	r3, #16
 80042b4:	3502      	adds	r5, #2
 80042b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80042ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80042be:	f04f 0c00 	mov.w	ip, #0
 80042c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80042c6:	4666      	mov	r6, ip
 80042c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80042cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80042d0:	f1be 0f09 	cmp.w	lr, #9
 80042d4:	d816      	bhi.n	8004304 <_strtol_l.constprop.0+0xa4>
 80042d6:	4674      	mov	r4, lr
 80042d8:	42a3      	cmp	r3, r4
 80042da:	dd24      	ble.n	8004326 <_strtol_l.constprop.0+0xc6>
 80042dc:	f1bc 0f00 	cmp.w	ip, #0
 80042e0:	db1e      	blt.n	8004320 <_strtol_l.constprop.0+0xc0>
 80042e2:	45b1      	cmp	r9, r6
 80042e4:	d31c      	bcc.n	8004320 <_strtol_l.constprop.0+0xc0>
 80042e6:	d101      	bne.n	80042ec <_strtol_l.constprop.0+0x8c>
 80042e8:	45a2      	cmp	sl, r4
 80042ea:	db19      	blt.n	8004320 <_strtol_l.constprop.0+0xc0>
 80042ec:	fb06 4603 	mla	r6, r6, r3, r4
 80042f0:	f04f 0c01 	mov.w	ip, #1
 80042f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042f8:	e7e8      	b.n	80042cc <_strtol_l.constprop.0+0x6c>
 80042fa:	2c2b      	cmp	r4, #43	; 0x2b
 80042fc:	bf04      	itt	eq
 80042fe:	782c      	ldrbeq	r4, [r5, #0]
 8004300:	1cb5      	addeq	r5, r6, #2
 8004302:	e7ca      	b.n	800429a <_strtol_l.constprop.0+0x3a>
 8004304:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004308:	f1be 0f19 	cmp.w	lr, #25
 800430c:	d801      	bhi.n	8004312 <_strtol_l.constprop.0+0xb2>
 800430e:	3c37      	subs	r4, #55	; 0x37
 8004310:	e7e2      	b.n	80042d8 <_strtol_l.constprop.0+0x78>
 8004312:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004316:	f1be 0f19 	cmp.w	lr, #25
 800431a:	d804      	bhi.n	8004326 <_strtol_l.constprop.0+0xc6>
 800431c:	3c57      	subs	r4, #87	; 0x57
 800431e:	e7db      	b.n	80042d8 <_strtol_l.constprop.0+0x78>
 8004320:	f04f 3cff 	mov.w	ip, #4294967295
 8004324:	e7e6      	b.n	80042f4 <_strtol_l.constprop.0+0x94>
 8004326:	f1bc 0f00 	cmp.w	ip, #0
 800432a:	da05      	bge.n	8004338 <_strtol_l.constprop.0+0xd8>
 800432c:	2322      	movs	r3, #34	; 0x22
 800432e:	6003      	str	r3, [r0, #0]
 8004330:	4646      	mov	r6, r8
 8004332:	b942      	cbnz	r2, 8004346 <_strtol_l.constprop.0+0xe6>
 8004334:	4630      	mov	r0, r6
 8004336:	e79e      	b.n	8004276 <_strtol_l.constprop.0+0x16>
 8004338:	b107      	cbz	r7, 800433c <_strtol_l.constprop.0+0xdc>
 800433a:	4276      	negs	r6, r6
 800433c:	2a00      	cmp	r2, #0
 800433e:	d0f9      	beq.n	8004334 <_strtol_l.constprop.0+0xd4>
 8004340:	f1bc 0f00 	cmp.w	ip, #0
 8004344:	d000      	beq.n	8004348 <_strtol_l.constprop.0+0xe8>
 8004346:	1e69      	subs	r1, r5, #1
 8004348:	6011      	str	r1, [r2, #0]
 800434a:	e7f3      	b.n	8004334 <_strtol_l.constprop.0+0xd4>
 800434c:	2430      	movs	r4, #48	; 0x30
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1b1      	bne.n	80042b6 <_strtol_l.constprop.0+0x56>
 8004352:	2308      	movs	r3, #8
 8004354:	e7af      	b.n	80042b6 <_strtol_l.constprop.0+0x56>
 8004356:	2c30      	cmp	r4, #48	; 0x30
 8004358:	d0a5      	beq.n	80042a6 <_strtol_l.constprop.0+0x46>
 800435a:	230a      	movs	r3, #10
 800435c:	e7ab      	b.n	80042b6 <_strtol_l.constprop.0+0x56>
 800435e:	bf00      	nop
 8004360:	080047c9 	.word	0x080047c9

08004364 <strtol>:
 8004364:	4613      	mov	r3, r2
 8004366:	460a      	mov	r2, r1
 8004368:	4601      	mov	r1, r0
 800436a:	4802      	ldr	r0, [pc, #8]	; (8004374 <strtol+0x10>)
 800436c:	6800      	ldr	r0, [r0, #0]
 800436e:	f7ff bf77 	b.w	8004260 <_strtol_l.constprop.0>
 8004372:	bf00      	nop
 8004374:	2000000c 	.word	0x2000000c

08004378 <_init>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	bf00      	nop
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr

08004384 <_fini>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	bf00      	nop
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr
