
Servo_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b88  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  08005d34  08005d34  00015d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b4  080064b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064bc  080064bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064bc  080064bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080064c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000358  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016dab  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003256  00000000  00000000  00036e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  0003a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001028  00000000  00000000  0003b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005191  00000000  00000000  0003c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b76  00000000  00000000  000413a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0f4e  00000000  00000000  00055f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136e65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048c8  00000000  00000000  00136eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005d1c 	.word	0x08005d1c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08005d1c 	.word	0x08005d1c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <_ZL19ConsoleCommandMatchPKcS0_>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4413      	add	r3, r2
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	440b      	add	r3, r1
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	429a      	cmp	r2, r3
 8000524:	d104      	bne.n	8000530 <_ZL19ConsoleCommandMatchPKcS0_+0x30>
	{
		result = 1u;
 8000526:	2301      	movs	r3, #1
 8000528:	60bb      	str	r3, [r7, #8]
		i++;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d12a      	bne.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
	while ( ( 1u == result ) &&
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2b09      	cmp	r3, #9
 800053a:	d827      	bhi.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000544:	2b20      	cmp	r3, #32
 8000546:	d021      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000550:	2b0a      	cmp	r3, #10
 8000552:	d01b      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b0d      	cmp	r3, #13
 800055e:	d015      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00f      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		)
	{
		if ( buffer[i] != name[i] )
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	4413      	add	r3, r2
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	440b      	add	r3, r1
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	d001      	beq.n	8000584 <_ZL19ConsoleCommandMatchPKcS0_+0x84>
		{
			result = 0u;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 800058a:	e7d1      	b.n	8000530 <_ZL19ConsoleCommandMatchPKcS0_+0x30>
	}

	return result;
 800058c:	68bb      	ldr	r3, [r7, #8]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <_ZL18ConsoleResetBufferPcmm>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800059a:	b480      	push	{r7}
 800059c:	b087      	sub	sp, #28
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d20e      	bcs.n	80005d8 <_ZL18ConsoleResetBufferPcmm+0x3e>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	441a      	add	r2, r3
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	440b      	add	r3, r1
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	701a      	strb	r2, [r3, #0]
		i++;
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3301      	adds	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 80005d6:	e7ec      	b.n	80005b2 <_ZL18ConsoleResetBufferPcmm+0x18>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2bff      	cmp	r3, #255	; 0xff
 80005dc:	d808      	bhi.n	80005f0 <_ZL18ConsoleResetBufferPcmm+0x56>
	{
		receiveBuffer[i] =  NULL_CHAR;
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	4413      	add	r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e7f3      	b.n	80005d8 <_ZL18ConsoleResetBufferPcmm+0x3e>
	}
	return remaining;
 80005f0:	693b      	ldr	r3, [r7, #16]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_ZL21ConsoleCommandEndlinePKcm>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
			&& ( i < filledLength ) )
 800061a:	2b0d      	cmp	r3, #13
 800061c:	d00d      	beq.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b0a      	cmp	r3, #10
 8000628:	d007      	beq.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
			&& ( i < filledLength ) )
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	429a      	cmp	r2, r3
 8000630:	d203      	bcs.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
	{
		i++;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000638:	e7eb      	b.n	8000612 <_ZL21ConsoleCommandEndlinePKcm+0x14>
	}
	if ( i < filledLength )
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d201      	bcs.n	8000646 <_ZL21ConsoleCommandEndlinePKcm+0x48>
	{
		result = i;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000646:	68bb      	ldr	r3, [r7, #8]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 800065a:	f000 fc21 	bl	8000ea0 <_Z13ConsoleIoInitv>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");	
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <ConsoleInit+0x48>)
 8000660:	f000 fc68 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(STR_ENDLINE);
 8000664:	480e      	ldr	r0, [pc, #56]	; (80006a0 <ConsoleInit+0x4c>)
 8000666:	f000 fc65 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(CONSOLE_PROMPT);
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <ConsoleInit+0x50>)
 800066c:	f000 fc62 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
	mReceivedSoFar = 0u;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <ConsoleInit+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2bff      	cmp	r3, #255	; 0xff
 800067e:	d808      	bhi.n	8000692 <ConsoleInit+0x3e>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <ConsoleInit+0x58>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	e7f3      	b.n	800067a <ConsoleInit+0x26>
	}

}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	08005d34 	.word	0x08005d34
 80006a0:	08005d7c 	.word	0x08005d7c
 80006a4:	08005d80 	.word	0x08005d80
 80006a8:	2000018c 	.word	0x2000018c
 80006ac:	2000008c 	.word	0x2000008c

080006b0 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(encoder *ptr)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 80006b8:	4b57      	ldr	r3, [pc, #348]	; (8000818 <ConsoleProcess+0x168>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a57      	ldr	r2, [pc, #348]	; (800081c <ConsoleProcess+0x16c>)
 80006be:	1898      	adds	r0, r3, r2
 80006c0:	4b55      	ldr	r3, [pc, #340]	; (8000818 <ConsoleProcess+0x168>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80006c8:	f107 0208 	add.w	r2, r7, #8
 80006cc:	4619      	mov	r1, r3
 80006ce:	f000 fc17 	bl	8000f00 <_Z16ConsoleIoReceivePhmPm>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d104      	bne.n	80006e2 <ConsoleProcess+0x32>
 80006d8:	4b51      	ldr	r3, [pc, #324]	; (8000820 <ConsoleProcess+0x170>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	f000 8097 	beq.w	8000810 <ConsoleProcess+0x160>
	{
		mReceiveBufferNeedsChecking = false;
 80006e2:	4b4f      	ldr	r3, [pc, #316]	; (8000820 <ConsoleProcess+0x170>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 80006e8:	4b4b      	ldr	r3, [pc, #300]	; (8000818 <ConsoleProcess+0x168>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a49      	ldr	r2, [pc, #292]	; (8000818 <ConsoleProcess+0x168>)
 80006f2:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 80006f4:	4b48      	ldr	r3, [pc, #288]	; (8000818 <ConsoleProcess+0x168>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4848      	ldr	r0, [pc, #288]	; (800081c <ConsoleProcess+0x16c>)
 80006fc:	f7ff ff7f 	bl	80005fe <_ZL21ConsoleCommandEndlinePKcm>
 8000700:	6178      	str	r0, [r7, #20]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	2b00      	cmp	r3, #0
 8000706:	f2c0 8083 	blt.w	8000810 <ConsoleProcess+0x160>
		{
			commandTable = ConsoleCommandsGetTable();
 800070a:	f000 fbbf 	bl	8000e8c <_Z23ConsoleCommandsGetTablev>
 800070e:	6138      	str	r0, [r7, #16]
			cmdIndex = 0u;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
			found = NOT_FOUND;
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	61bb      	str	r3, [r7, #24]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800071a:	69fa      	ldr	r2, [r7, #28]
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	4413      	add	r3, r2
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	461a      	mov	r2, r3
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	4413      	add	r3, r2
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d047      	beq.n	80007c0 <ConsoleProcess+0x110>
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000736:	d143      	bne.n	80007c0 <ConsoleProcess+0x110>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000738:	69fa      	ldr	r2, [r7, #28]
 800073a:	4613      	mov	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	461a      	mov	r2, r3
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	4413      	add	r3, r2
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4934      	ldr	r1, [pc, #208]	; (800081c <ConsoleProcess+0x16c>)
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fed7 	bl	8000500 <_ZL19ConsoleCommandMatchPKcS0_>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	bf14      	ite	ne
 8000758:	2301      	movne	r3, #1
 800075a:	2300      	moveq	r3, #0
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d02a      	beq.n	80007b8 <ConsoleProcess+0x108>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000762:	69fa      	ldr	r2, [r7, #28]
 8000764:	4613      	mov	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	4413      	add	r3, r2
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	461a      	mov	r2, r3
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	4413      	add	r3, r2
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4829      	ldr	r0, [pc, #164]	; (800081c <ConsoleProcess+0x16c>)
 8000776:	4798      	blx	r3
 8000778:	4603      	mov	r3, r0
 800077a:	73fb      	strb	r3, [r7, #15]
					if ( COMMAND_SUCCESS != result )
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d017      	beq.n	80007b2 <ConsoleProcess+0x102>
					{
						ConsoleIoSendString("Error: ");
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <ConsoleProcess+0x174>)
 8000784:	f000 fbd6 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(mReceiveBuffer);
 8000788:	4824      	ldr	r0, [pc, #144]	; (800081c <ConsoleProcess+0x16c>)
 800078a:	f000 fbd3 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>

						ConsoleIoSendString("Help: ");
 800078e:	4826      	ldr	r0, [pc, #152]	; (8000828 <ConsoleProcess+0x178>)
 8000790:	f000 fbd0 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000794:	69fa      	ldr	r2, [r7, #28]
 8000796:	4613      	mov	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	461a      	mov	r2, r3
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	4413      	add	r3, r2
 80007a4:	3308      	adds	r3, #8
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fbc4 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(STR_ENDLINE);
 80007ac:	481f      	ldr	r0, [pc, #124]	; (800082c <ConsoleProcess+0x17c>)
 80007ae:	f000 fbc1 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>

					}
					found = cmdIndex;
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	e7b0      	b.n	800071a <ConsoleProcess+0x6a>
				}
				else
				{
					cmdIndex++;
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	3301      	adds	r3, #1
 80007bc:	61fb      	str	r3, [r7, #28]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007be:	e7ac      	b.n	800071a <ConsoleProcess+0x6a>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00d      	beq.n	80007e2 <ConsoleProcess+0x132>
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d109      	bne.n	80007e2 <ConsoleProcess+0x132>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <ConsoleProcess+0x168>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d905      	bls.n	80007e2 <ConsoleProcess+0x132>
				{
					ConsoleIoSendString("Command not found.");
 80007d6:	4816      	ldr	r0, [pc, #88]	; (8000830 <ConsoleProcess+0x180>)
 80007d8:	f000 fbac 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
					ConsoleIoSendString(STR_ENDLINE);
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <ConsoleProcess+0x17c>)
 80007de:	f000 fba9 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <ConsoleProcess+0x168>)
 80007e4:	6819      	ldr	r1, [r3, #0]
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	461a      	mov	r2, r3
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <ConsoleProcess+0x16c>)
 80007ee:	f7ff fed4 	bl	800059a <_ZL18ConsoleResetBufferPcmm>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <ConsoleProcess+0x168>)
 80007f6:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <ConsoleProcess+0x168>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf14      	ite	ne
 8000800:	2301      	movne	r3, #1
 8000802:	2300      	moveq	r3, #0
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <ConsoleProcess+0x170>)
 8000808:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 800080a:	480a      	ldr	r0, [pc, #40]	; (8000834 <ConsoleProcess+0x184>)
 800080c:	f000 fb92 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
		}
	}
}
 8000810:	bf00      	nop
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000018c 	.word	0x2000018c
 800081c:	2000008c 	.word	0x2000008c
 8000820:	20000190 	.word	0x20000190
 8000824:	08005d84 	.word	0x08005d84
 8000828:	08005d8c 	.word	0x08005d8c
 800082c:	08005d7c 	.word	0x08005d7c
 8000830:	08005d94 	.word	0x08005d94
 8000834:	08005d80 	.word	0x08005d80

08000838 <_ZL17ConsoleParamFindNPKchPm>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000838:	b480      	push	{r7}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	460b      	mov	r3, r1
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800084e:	2300      	movs	r3, #0
 8000850:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000852:	7afb      	ldrb	r3, [r7, #11]
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	429a      	cmp	r2, r3
 8000858:	d00f      	beq.n	800087a <_ZL17ConsoleParamFindNPKchPm+0x42>
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	2bff      	cmp	r3, #255	; 0xff
 800085e:	d80c      	bhi.n	800087a <_ZL17ConsoleParamFindNPKchPm+0x42>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b20      	cmp	r3, #32
 800086a:	d102      	bne.n	8000872 <_ZL17ConsoleParamFindNPKchPm+0x3a>
		{
			parameterIndex++;
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	3301      	adds	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3301      	adds	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000878:	e7eb      	b.n	8000852 <_ZL17ConsoleParamFindNPKchPm+0x1a>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000880:	d102      	bne.n	8000888 <_ZL17ConsoleParamFindNPKchPm+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000882:	2310      	movs	r3, #16
 8000884:	75fb      	strb	r3, [r7, #23]
 8000886:	e002      	b.n	800088e <_ZL17ConsoleParamFindNPKchPm+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69fa      	ldr	r2, [r7, #28]
 800088c:	601a      	str	r2, [r3, #0]
	}
	return result;
 800088e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3724      	adds	r7, #36	; 0x24
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	460b      	mov	r3, r1
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80008ae:	f107 021c 	add.w	r2, r7, #28
 80008b2:	7afb      	ldrb	r3, [r7, #11]
 80008b4:	4619      	mov	r1, r3
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f7ff ffbe 	bl	8000838 <_ZL17ConsoleParamFindNPKchPm>
 80008bc:	4603      	mov	r3, r0
 80008be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80008c6:	69fa      	ldr	r2, [r7, #28]
 80008c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ca:	4413      	add	r3, r2
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80008d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008da:	2b0a      	cmp	r3, #10
 80008dc:	d01d      	beq.n	800091a <ConsoleReceiveParamInt16+0x7e>
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 80008de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008e2:	2b0d      	cmp	r3, #13
 80008e4:	d019      	beq.n	800091a <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 80008e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008ea:	2b20      	cmp	r3, #32
 80008ec:	d015      	beq.n	800091a <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	d812      	bhi.n	800091a <ConsoleReceiveParamInt16+0x7e>
	{
		str[i] = charVal;					// copy the relevant part
 80008f4:	f107 0214 	add.w	r2, r7, #20
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	4413      	add	r3, r2
 80008fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000900:	701a      	strb	r2, [r3, #0]
		i++;
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	3301      	adds	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	4413      	add	r3, r2
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000918:	e7dd      	b.n	80008d6 <ConsoleReceiveParamInt16+0x3a>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	2b08      	cmp	r3, #8
 800091e:	d102      	bne.n	8000926 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000920:	2310      	movs	r3, #16
 8000922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10e      	bne.n	800094c <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 800092e:	f107 0214 	add.w	r2, r7, #20
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	4413      	add	r3, r2
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4618      	mov	r0, r3
 8000940:	f005 f92a 	bl	8005b98 <atoi>
 8000944:	4603      	mov	r3, r0
 8000946:	b21a      	sxth	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	801a      	strh	r2, [r3, #0]
	}
	return result;
 800094c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000950:	4618      	mov	r0, r3
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <_ZL9smallItoaiPci>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000968:	2301      	movs	r3, #1
 800096a:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	da07      	bge.n	8000982 <_ZL9smallItoaiPci+0x2a>
		isNegative = true;
 8000972:	2301      	movs	r3, #1
 8000974:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	425b      	negs	r3, r3
 800097a:	60fb      	str	r3, [r7, #12]
		stringLen++;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	fb92 f3f3 	sdiv	r3, r2, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d008      	beq.n	80009a4 <_ZL9smallItoaiPci+0x4c>
		tmpIn = (int)tmpIn/radix;
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	fb92 f3f3 	sdiv	r3, r2, r3
 800099a:	61bb      	str	r3, [r7, #24]
		stringLen++;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	3301      	adds	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 80009a2:	e7f0      	b.n	8000986 <_ZL9smallItoaiPci+0x2e>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	4413      	add	r3, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
    stringLen--;
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	fb93 f2f2 	sdiv	r2, r3, r2
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	fb01 f202 	mul.w	r2, r1, r2
 80009c6:	1a9b      	subs	r3, r3, r2
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	440b      	add	r3, r1
 80009d0:	3230      	adds	r2, #48	; 0x30
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	fb92 f3f3 	sdiv	r3, r2, r3
 80009de:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	617a      	str	r2, [r7, #20]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	bf14      	ite	ne
 80009ea:	2301      	movne	r3, #1
 80009ec:	2300      	moveq	r3, #0
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d000      	beq.n	80009f6 <_ZL9smallItoaiPci+0x9e>
	do {
 80009f4:	e7e0      	b.n	80009b8 <_ZL9smallItoaiPci+0x60>

	if (isNegative) {
 80009f6:	7ffb      	ldrb	r3, [r7, #31]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <_ZL9smallItoaiPci+0xaa>
		*(outBuffer) = '-';
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	222d      	movs	r2, #45	; 0x2d
 8000a00:	701a      	strb	r2, [r3, #0]
	}
}
 8000a02:	bf00      	nop
 8000a04:	3724      	adds	r7, #36	; 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b084      	sub	sp, #16
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1c:	f107 0108 	add.w	r1, r7, #8
 8000a20:	220a      	movs	r2, #10
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff98 	bl	8000958 <_ZL9smallItoaiPci>
	ConsoleIoSendString(out);
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fa81 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>

	return COMMAND_SUCCESS;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_ZL21ConsoleCommandCommentPKc>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <_ZL18ConsoleCommandHelpPKc>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000a60:	230f      	movs	r3, #15
 8000a62:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d21f      	bcs.n	8000ab2 <_ZL18ConsoleCommandHelpPKc+0x5e>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000a72:	4912      	ldr	r1, [pc, #72]	; (8000abc <_ZL18ConsoleCommandHelpPKc+0x68>)
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	4613      	mov	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fa56 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <_ZL18ConsoleCommandHelpPKc+0x6c>)
 8000a8a:	f000 fa53 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	4613      	mov	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	4413      	add	r3, r2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	3308      	adds	r3, #8
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <_ZL18ConsoleCommandHelpPKc+0x68>)
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fa48 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <_ZL18ConsoleCommandHelpPKc+0x70>)
 8000aa6:	f000 fa45 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	e7da      	b.n	8000a68 <_ZL18ConsoleCommandHelpPKc+0x14>
	}
	return result;
 8000ab2:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	08005f60 	.word	0x08005f60
 8000ac0:	08005e2c 	.word	0x08005e2c
 8000ac4:	08005e30 	.word	0x08005e30

08000ac8 <_ZL20ConsoleCommandLedRedPKc>:
	}
	return result;
}

static eCommandResult_T ConsoleCommandLedRed(const char buffer[])
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 65535;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ada:	60da      	str	r2, [r3, #12]
	systemState.LEDGreen = 0;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
	systemState.LEDBlue = 0;
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
	return result;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200001e4 	.word	0x200001e4

08000afc <_ZL22ConsoleCommandLedGreenPKc>:

static eCommandResult_T ConsoleCommandLedGreen(const char buffer[])
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000b04:	2300      	movs	r3, #0
 8000b06:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 0;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
	systemState.LEDGreen = 65535;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b14:	611a      	str	r2, [r3, #16]
	systemState.LEDBlue = 0;
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
	return result;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200001e4 	.word	0x200001e4

08000b30 <_ZL21ConsoleCommandLedBluePKc>:

static eCommandResult_T ConsoleCommandLedBlue(const char buffer[])
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 0;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
	systemState.LEDGreen = 0;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
	systemState.LEDBlue = 65535;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4e:	615a      	str	r2, [r3, #20]
	return result;
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200001e4 	.word	0x200001e4

08000b64 <_ZL25ConsoleCommandGetSetpointPKc>:

static eCommandResult_T ConsoleCommandGetSetpoint(const char buffer[])
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString("setpoint = ");
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <_ZL25ConsoleCommandGetSetpointPKc+0x30>)
 8000b6e:	f000 f9e1 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
	ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <_ZL25ConsoleCommandGetSetpointPKc+0x34>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff48 	bl	8000a0e <ConsoleSendParamInt16>
	ConsoleIoSendString(STR_ENDLINE);
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <_ZL25ConsoleCommandGetSetpointPKc+0x38>)
 8000b80:	f000 f9d8 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>

	eCommandResult_T result = COMMAND_SUCCESS;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
	return result;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	08005e60 	.word	0x08005e60
 8000b98:	200001e4 	.word	0x200001e4
 8000b9c:	08005e30 	.word	0x08005e30

08000ba0 <_ZL25ConsoleCommandSetSetpointPKc>:

static eCommandResult_T ConsoleCommandSetSetpoint(const char buffer[])
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	461a      	mov	r2, r3
 8000bae:	2101      	movs	r1, #1
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fe73 	bl	800089c <ConsoleReceiveParamInt16>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d110      	bne.n	8000be2 <_ZL25ConsoleCommandSetSetpointPKc+0x42>
		{
			systemState.setpoint = (uint32_t)parameterInt;
 8000bc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <_ZL25ConsoleCommandSetSetpointPKc+0x4c>)
 8000bc8:	601a      	str	r2, [r3, #0]
			ConsoleIoSendString("Setpoint updated to ");
 8000bca:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <_ZL25ConsoleCommandSetSetpointPKc+0x50>)
 8000bcc:	f000 f9b2 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <_ZL25ConsoleCommandSetSetpointPKc+0x4c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff19 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <_ZL25ConsoleCommandSetSetpointPKc+0x54>)
 8000bde:	f000 f9a9 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200001e4 	.word	0x200001e4
 8000bf0:	08005e6c 	.word	0x08005e6c
 8000bf4:	08005e30 	.word	0x08005e30

08000bf8 <_ZL22ConsoleCommandSetAnglePKc>:


static eCommandResult_T ConsoleCommandSetAngle(const char buffer[])
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	461a      	mov	r2, r3
 8000c06:	2101      	movs	r1, #1
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fe47 	bl	800089c <ConsoleReceiveParamInt16>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d114      	bne.n	8000c42 <_ZL22ConsoleCommandSetAnglePKc+0x4a>
		{
			systemState.setAngle = (float)parameterInt;
 8000c18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <_ZL22ConsoleCommandSetAnglePKc+0x54>)
 8000c26:	edc3 7a01 	vstr	s15, [r3, #4]
			ConsoleIoSendString("Set Angle updated to ");
 8000c2a:	4809      	ldr	r0, [pc, #36]	; (8000c50 <_ZL22ConsoleCommandSetAnglePKc+0x58>)
 8000c2c:	f000 f982 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <_ZL22ConsoleCommandSetAnglePKc+0x54>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fee9 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <_ZL22ConsoleCommandSetAnglePKc+0x5c>)
 8000c3e:	f000 f979 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200001e4 	.word	0x200001e4
 8000c50:	08005e84 	.word	0x08005e84
 8000c54:	08005e30 	.word	0x08005e30

08000c58 <_ZL27ConsoleCommandGetCurrentPosPKc>:
static eCommandResult_T ConsoleCommandGetCurrentPos(const char buffer[])
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString("Current position = ");
 8000c60:	4809      	ldr	r0, [pc, #36]	; (8000c88 <_ZL27ConsoleCommandGetCurrentPosPKc+0x30>)
 8000c62:	f000 f967 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
	ConsoleSendParamInt16((uint16_t)systemState.currentPos);
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <_ZL27ConsoleCommandGetCurrentPosPKc+0x34>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fece 	bl	8000a0e <ConsoleSendParamInt16>
	ConsoleIoSendString(STR_ENDLINE);
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <_ZL27ConsoleCommandGetCurrentPosPKc+0x38>)
 8000c74:	f000 f95e 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>

	eCommandResult_T result = COMMAND_SUCCESS;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
	return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	08005e9c 	.word	0x08005e9c
 8000c8c:	200001e4 	.word	0x200001e4
 8000c90:	08005e30 	.word	0x08005e30

08000c94 <_ZL21ConsoleCommandSetModePKc>:

static eCommandResult_T ConsoleCommandSetMode(const char buffer[])
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fdf9 	bl	800089c <ConsoleReceiveParamInt16>
 8000caa:	4603      	mov	r3, r0
 8000cac:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d110      	bne.n	8000cd6 <_ZL21ConsoleCommandSetModePKc+0x42>
		{
			systemState.mode = (uint32_t)parameterInt;
 8000cb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <_ZL21ConsoleCommandSetModePKc+0x4c>)
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38
			ConsoleIoSendString("Mode updated to ");
 8000cbe:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <_ZL21ConsoleCommandSetModePKc+0x50>)
 8000cc0:	f000 f938 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.mode);
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <_ZL21ConsoleCommandSetModePKc+0x4c>)
 8000cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fe9f 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <_ZL21ConsoleCommandSetModePKc+0x54>)
 8000cd2:	f000 f92f 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200001e4 	.word	0x200001e4
 8000ce4:	08005eb0 	.word	0x08005eb0
 8000ce8:	08005e30 	.word	0x08005e30

08000cec <_ZL19ConsoleCommandSetKpPKc>:

static eCommandResult_T ConsoleCommandSetKp(const char buffer[])
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fdcd 	bl	800089c <ConsoleReceiveParamInt16>
 8000d02:	4603      	mov	r3, r0
 8000d04:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d11f      	bne.n	8000d4c <_ZL19ConsoleCommandSetKpPKc+0x60>
		{
			PID.kp = ((uint32_t)parameterInt / 100);
 8000d0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_ZL19ConsoleCommandSetKpPKc+0x6c>)
 8000d14:	fba3 2302 	umull	r2, r3, r3, r2
 8000d18:	095b      	lsrs	r3, r3, #5
 8000d1a:	ee07 3a90 	vmov	s15, r3
 8000d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <_ZL19ConsoleCommandSetKpPKc+0x70>)
 8000d24:	edc3 7a05 	vstr	s15, [r3, #20]
			ConsoleIoSendString("Kp updated to ");
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <_ZL19ConsoleCommandSetKpPKc+0x74>)
 8000d2a:	f000 f903 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.kp);
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <_ZL19ConsoleCommandSetKpPKc+0x70>)
 8000d30:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d38:	ee17 3a90 	vmov	r3, s15
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fe64 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000d46:	4807      	ldr	r0, [pc, #28]	; (8000d64 <_ZL19ConsoleCommandSetKpPKc+0x78>)
 8000d48:	f000 f8f4 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	51eb851f 	.word	0x51eb851f
 8000d5c:	2000022c 	.word	0x2000022c
 8000d60:	08005ec4 	.word	0x08005ec4
 8000d64:	08005e30 	.word	0x08005e30

08000d68 <_ZL19ConsoleCommandSetKiPKc>:

static eCommandResult_T ConsoleCommandSetKi(const char buffer[])
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	461a      	mov	r2, r3
 8000d76:	2101      	movs	r1, #1
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff fd8f 	bl	800089c <ConsoleReceiveParamInt16>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d11f      	bne.n	8000dc8 <_ZL19ConsoleCommandSetKiPKc+0x60>
		{
			PID.ki = ((uint32_t)parameterInt / 100);
 8000d88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <_ZL19ConsoleCommandSetKiPKc+0x6c>)
 8000d90:	fba3 2302 	umull	r2, r3, r3, r2
 8000d94:	095b      	lsrs	r3, r3, #5
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <_ZL19ConsoleCommandSetKiPKc+0x70>)
 8000da0:	edc3 7a06 	vstr	s15, [r3, #24]
			ConsoleIoSendString("Ki updated to ");
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <_ZL19ConsoleCommandSetKiPKc+0x74>)
 8000da6:	f000 f8c5 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.ki);
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <_ZL19ConsoleCommandSetKiPKc+0x70>)
 8000dac:	edd3 7a06 	vldr	s15, [r3, #24]
 8000db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db4:	ee17 3a90 	vmov	r3, s15
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fe26 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <_ZL19ConsoleCommandSetKiPKc+0x78>)
 8000dc4:	f000 f8b6 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	51eb851f 	.word	0x51eb851f
 8000dd8:	2000022c 	.word	0x2000022c
 8000ddc:	08005ed4 	.word	0x08005ed4
 8000de0:	08005e30 	.word	0x08005e30

08000de4 <_ZL19ConsoleCommandSetKdPKc>:

static eCommandResult_T ConsoleCommandSetKd(const char buffer[])
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	461a      	mov	r2, r3
 8000df2:	2101      	movs	r1, #1
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff fd51 	bl	800089c <ConsoleReceiveParamInt16>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d11f      	bne.n	8000e44 <_ZL19ConsoleCommandSetKdPKc+0x60>
		{
			PID.kd = ((uint32_t)parameterInt/100);
 8000e04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_ZL19ConsoleCommandSetKdPKc+0x6c>)
 8000e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8000e10:	095b      	lsrs	r3, r3, #5
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <_ZL19ConsoleCommandSetKdPKc+0x70>)
 8000e1c:	edc3 7a07 	vstr	s15, [r3, #28]
			ConsoleIoSendString("Kd updated to ");
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <_ZL19ConsoleCommandSetKdPKc+0x74>)
 8000e22:	f000 f887 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.kd);
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <_ZL19ConsoleCommandSetKdPKc+0x70>)
 8000e28:	edd3 7a07 	vldr	s15, [r3, #28]
 8000e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e30:	ee17 3a90 	vmov	r3, s15
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fde8 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <_ZL19ConsoleCommandSetKdPKc+0x78>)
 8000e40:	f000 f878 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	51eb851f 	.word	0x51eb851f
 8000e54:	2000022c 	.word	0x2000022c
 8000e58:	08005ee4 	.word	0x08005ee4
 8000e5c:	08005e30 	.word	0x08005e30

08000e60 <_ZL17ConsoleCommandVerPKc>:


static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <_ZL17ConsoleCommandVerPKc+0x24>)
 8000e6e:	f000 f861 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(STR_ENDLINE);
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <_ZL17ConsoleCommandVerPKc+0x28>)
 8000e74:	f000 f85e 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
	return result;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08005ef4 	.word	0x08005ef4
 8000e88:	08005e30 	.word	0x08005e30

08000e8c <_Z23ConsoleCommandsGetTablev>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <_Z23ConsoleCommandsGetTablev+0x10>)
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	08005f60 	.word	0x08005f60

08000ea0 <_Z13ConsoleIoInitv>:
#include <global.h>

UART_HandleTypeDef huart1;

eConsoleError ConsoleIoInit(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	    huart1.Instance = USART1;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <_Z13ConsoleIoInitv+0x58>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <_Z13ConsoleIoInitv+0x5c>)
 8000ea8:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <_Z13ConsoleIoInitv+0x58>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_Z13ConsoleIoInitv+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <_Z13ConsoleIoInitv+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <_Z13ConsoleIoInitv+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <_Z13ConsoleIoInitv+0x58>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <_Z13ConsoleIoInitv+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <_Z13ConsoleIoInitv+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ed6:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <_Z13ConsoleIoInitv+0x58>)
 8000ed8:	f004 f9fa 	bl	80052d0 <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf14      	ite	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	2300      	moveq	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <_Z13ConsoleIoInitv+0x50>
		{
		  Error_Handler();
 8000eec:	f000 fd28 	bl	8001940 <Error_Handler>
		}


	return CONSOLE_SUCCESS;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000194 	.word	0x20000194
 8000efc:	40011000 	.word	0x40011000

08000f00 <_Z16ConsoleIoReceivePhmPm>:
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]


	HAL_UART_Receive(&huart1, (uint8_t *)buffer, bufferLength, 100);
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	68f9      	ldr	r1, [r7, #12]
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <_Z16ConsoleIoReceivePhmPm+0x30>)
 8000f16:	f004 faba 	bl	800548e <HAL_UART_Receive>
	*readLength = strlen((const char*)buffer);
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f7ff f966 	bl	80001ec <strlen>
 8000f20:	4602      	mov	r2, r0
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	601a      	str	r2, [r3, #0]

	return CONSOLE_SUCCESS;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000194 	.word	0x20000194

08000f34 <_Z19ConsoleIoSendStringPKc>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer) , 10);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff f955 	bl	80001ec <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	230a      	movs	r3, #10
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <_Z19ConsoleIoSendStringPKc+0x28>)
 8000f4c:	f004 fa0d 	bl	800536a <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000194 	.word	0x20000194

08000f60 <_ZN7encoder4initEv>:
#include <main.h>
#include <global.h>
#include <stdint.h>

void encoder::init()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	//SPI
	hspi1.Instance = SPI1;
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000f68:	4a34      	ldr	r2, [pc, #208]	; (800103c <_ZN7encoder4initEv+0xdc>)
 8000f6a:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6c:	4b32      	ldr	r3, [pc, #200]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000f6e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f72:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f80:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f94:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000fb0:	220a      	movs	r2, #10
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb4:	4820      	ldr	r0, [pc, #128]	; (8001038 <_ZN7encoder4initEv+0xd8>)
 8000fb6:	f002 fd49 	bl	8003a4c <HAL_SPI_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bf14      	ite	ne
 8000fc0:	2301      	movne	r3, #1
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <_ZN7encoder4initEv+0x6e>
	{
	  Error_Handler();
 8000fca:	f000 f905 	bl	80011d8 <_ZN7encoder13Error_HandlerEv>
	}

	//CS pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	481b      	ldr	r0, [pc, #108]	; (8001040 <_ZN7encoder4initEv+0xe0>)
 8000fd4:	f002 f860 	bl	8003098 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <_ZN7encoder4initEv+0xe4>)
 8000fda:	2210      	movs	r2, #16
 8000fdc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <_ZN7encoder4initEv+0xe4>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <_ZN7encoder4initEv+0xe4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <_ZN7encoder4initEv+0xe4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	4914      	ldr	r1, [pc, #80]	; (8001044 <_ZN7encoder4initEv+0xe4>)
 8000ff2:	4813      	ldr	r0, [pc, #76]	; (8001040 <_ZN7encoder4initEv+0xe0>)
 8000ff4:	f001 fe8c 	bl	8002d10 <HAL_GPIO_Init>

	//set CS high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	4810      	ldr	r0, [pc, #64]	; (8001040 <_ZN7encoder4initEv+0xe0>)
 8000ffe:	f002 f84b 	bl	8003098 <HAL_GPIO_WritePin>

	uint16_t readBit = 0x8000;
 8001002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001006:	80fb      	strh	r3, [r7, #6]
	uint16_t readAngleAddress = 0x3fff;
 8001008:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800100c:	80bb      	strh	r3, [r7, #4]
	readCommand = (readBit | readAngleAddress);
 800100e:	88fa      	ldrh	r2, [r7, #6]
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	4313      	orrs	r3, r2
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <_ZN7encoder4initEv+0xe8>)
 8001018:	801a      	strh	r2, [r3, #0]
	dummyCommand = 0x0;
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <_ZN7encoder4initEv+0xec>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]

	valueMask = 0x3fff;
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <_ZN7encoder4initEv+0xf0>)
 8001022:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001026:	801a      	strh	r2, [r3, #0]
	value = 0;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <_ZN7encoder4initEv+0xf4>)
 800102a:	2200      	movs	r2, #0
 800102c:	801a      	strh	r2, [r3, #0]

}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000280 	.word	0x20000280
 800103c:	40013000 	.word	0x40013000
 8001040:	40020000 	.word	0x40020000
 8001044:	200003b0 	.word	0x200003b0
 8001048:	200001d8 	.word	0x200001d8
 800104c:	200001da 	.word	0x200001da
 8001050:	200001e2 	.word	0x200001e2
 8001054:	200001e0 	.word	0x200001e0

08001058 <_ZN7encoder6getRawEv>:

uint32_t encoder::getRaw()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
	//Setup commands
	uint16_t test = 0xffff;
 800105e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001062:	807b      	strh	r3, [r7, #2]
	uint16_t test2 = 0xAAAA;
 8001064:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8001068:	80fb      	strh	r3, [r7, #6]
	uint16_t readValue = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	80bb      	strh	r3, [r7, #4]
	uint8_t spi_buf[2];

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)0);
 800106e:	2200      	movs	r2, #0
 8001070:	2110      	movs	r1, #16
 8001072:	4822      	ldr	r0, [pc, #136]	; (80010fc <_ZN7encoder6getRawEv+0xa4>)
 8001074:	f002 f810 	bl	8003098 <HAL_GPIO_WritePin>
	sendBuffer = &test;
 8001078:	4a21      	ldr	r2, [pc, #132]	; (8001100 <_ZN7encoder6getRawEv+0xa8>)
 800107a:	1cbb      	adds	r3, r7, #2
 800107c:	6013      	str	r3, [r2, #0]
	//HAL_SPI_Transmit(&hspi1, (uint8_t*)sendBuffer, 1, 1);
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)sendBuffer,spi_buf, 1, 100);
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <_ZN7encoder6getRawEv+0xa8>)
 8001080:	6819      	ldr	r1, [r3, #0]
 8001082:	463a      	mov	r2, r7
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	481e      	ldr	r0, [pc, #120]	; (8001104 <_ZN7encoder6getRawEv+0xac>)
 800108c:	f002 fd67 	bl	8003b5e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 8001090:	2201      	movs	r2, #1
 8001092:	2110      	movs	r1, #16
 8001094:	4819      	ldr	r0, [pc, #100]	; (80010fc <_ZN7encoder6getRawEv+0xa4>)
 8001096:	f001 ffff 	bl	8003098 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)0);
 800109a:	2200      	movs	r2, #0
 800109c:	2110      	movs	r1, #16
 800109e:	4817      	ldr	r0, [pc, #92]	; (80010fc <_ZN7encoder6getRawEv+0xa4>)
 80010a0:	f001 fffa 	bl	8003098 <HAL_GPIO_WritePin>
	sendBuffer = &test;
 80010a4:	4a16      	ldr	r2, [pc, #88]	; (8001100 <_ZN7encoder6getRawEv+0xa8>)
 80010a6:	1cbb      	adds	r3, r7, #2
 80010a8:	6013      	str	r3, [r2, #0]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)sendBuffer,spi_buf, 1, 100);
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <_ZN7encoder6getRawEv+0xa8>)
 80010ac:	6819      	ldr	r1, [r3, #0]
 80010ae:	463a      	mov	r2, r7
 80010b0:	2364      	movs	r3, #100	; 0x64
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <_ZN7encoder6getRawEv+0xac>)
 80010b8:	f002 fd51 	bl	8003b5e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 80010bc:	2201      	movs	r2, #1
 80010be:	2110      	movs	r1, #16
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <_ZN7encoder6getRawEv+0xa4>)
 80010c2:	f001 ffe9 	bl	8003098 <HAL_GPIO_WritePin>


	readValue = spi_buf[0] | (spi_buf[1] << 8);
 80010c6:	783b      	ldrb	r3, [r7, #0]
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	787b      	ldrb	r3, [r7, #1]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	80bb      	strh	r3, [r7, #4]
	value = readValue & valueMask;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <_ZN7encoder6getRawEv+0xb0>)
 80010d8:	881a      	ldrh	r2, [r3, #0]
 80010da:	88bb      	ldrh	r3, [r7, #4]
 80010dc:	4013      	ands	r3, r2
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <_ZN7encoder6getRawEv+0xb4>)
 80010e2:	801a      	strh	r2, [r3, #0]
	systemState.currentPos = (uint32_t)value;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <_ZN7encoder6getRawEv+0xb4>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <_ZN7encoder6getRawEv+0xb8>)
 80010ec:	609a      	str	r2, [r3, #8]
	return (uint32_t)value;
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <_ZN7encoder6getRawEv+0xb4>)
 80010f0:	881b      	ldrh	r3, [r3, #0]

}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020000 	.word	0x40020000
 8001100:	200001dc 	.word	0x200001dc
 8001104:	20000280 	.word	0x20000280
 8001108:	200001e2 	.word	0x200001e2
 800110c:	200001e0 	.word	0x200001e0
 8001110:	200001e4 	.word	0x200001e4

08001114 <_ZN7encoder8getAngleEv>:

float encoder::getAngle(){
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	int32_t adjustedPosSum = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
	int32_t adjustedPos = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
	uint32_t encoderMax = 16384;
 8001124:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001128:	613b      	str	r3, [r7, #16]
	float encoderScaler = 0.0219;
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <_ZN7encoder8getAngleEv+0xb8>)
 800112c:	60fb      	str	r3, [r7, #12]
	float angle = 0;
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i<systemState.noSamples; i++)
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <_ZN7encoder8getAngleEv+0xbc>)
 800113a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	429a      	cmp	r2, r3
 8001140:	d927      	bls.n	8001192 <_ZN7encoder8getAngleEv+0x7e>
	{
		this->getRaw();
 8001142:	f7ff ff89 	bl	8001058 <_ZN7encoder6getRawEv>
		if((systemState.currentPos - systemState.zeroRaw) > 0){
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <_ZN7encoder8getAngleEv+0xbc>)
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <_ZN7encoder8getAngleEv+0xbc>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	dd08      	ble.n	8001166 <_ZN7encoder8getAngleEv+0x52>
			adjustedPosSum += systemState.currentPos - systemState.zeroRaw;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <_ZN7encoder8getAngleEv+0xbc>)
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <_ZN7encoder8getAngleEv+0xbc>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	4413      	add	r3, r2
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	e011      	b.n	800118a <_ZN7encoder8getAngleEv+0x76>
		}
		else if((systemState.currentPos - systemState.zeroRaw) < 0){
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <_ZN7encoder8getAngleEv+0xbc>)
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <_ZN7encoder8getAngleEv+0xbc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	da0a      	bge.n	800118a <_ZN7encoder8getAngleEv+0x76>
			adjustedPosSum += (encoderMax - systemState.zeroRaw) + systemState.currentPos;
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <_ZN7encoder8getAngleEv+0xbc>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	461a      	mov	r2, r3
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_ZN7encoder8getAngleEv+0xbc>)
 8001180:	6892      	ldr	r2, [r2, #8]
 8001182:	441a      	add	r2, r3
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	4413      	add	r3, r2
 8001188:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i<systemState.noSamples; i++)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	3301      	adds	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	e7d2      	b.n	8001138 <_ZN7encoder8getAngleEv+0x24>
		}
	}
	adjustedPos = adjustedPosSum / systemState.noSamples;
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <_ZN7encoder8getAngleEv+0xbc>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	fbb2 f3f3 	udiv	r3, r2, r3
 800119c:	617b      	str	r3, [r7, #20]
	angle = 360 - ((float)adjustedPos * encoderScaler);
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d4 <_ZN7encoder8getAngleEv+0xc0>
 80011b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b8:	edc7 7a02 	vstr	s15, [r7, #8]
	return angle;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	ee07 3a90 	vmov	s15, r3

}
 80011c2:	eeb0 0a67 	vmov.f32	s0, s15
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	3cb367a1 	.word	0x3cb367a1
 80011d0:	200001e4 	.word	0x200001e4
 80011d4:	43b40000 	.word	0x43b40000

080011d8 <_ZN7encoder13Error_HandlerEv>:

void encoder::Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <_ZN7encoder13Error_HandlerEv+0x8>
	...

080011e4 <_ZN3led4initEv>:
#include <led.h>
#include <io_mapping.h>
#include <processor.h>
#include <main.h>

void led::init(){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0a8      	sub	sp, #160	; 0xa0
 80011e8:	af00      	add	r7, sp, #0
	  TIM_HandleTypeDef htim1;

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2220      	movs	r2, #32
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f004 fce9 	bl	8005bf4 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <_ZN3led4initEv+0x1ec>)
 8001224:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Prescaler = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	2300      	movs	r3, #0
 800122c:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.Period = 65535;
 800122e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001232:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	66bb      	str	r3, [r7, #104]	; 0x68
	  htim1.Init.RepetitionCounter = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	673b      	str	r3, [r7, #112]	; 0x70
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001240:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001244:	4618      	mov	r0, r3
 8001246:	f002 fef7 	bl	8004038 <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf14      	ite	ne
 8001250:	2301      	movne	r3, #1
 8001252:	2300      	moveq	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <_ZN3led4initEv+0x7a>
	  {
	    Error_Handler();
 800125a:	f000 f8fb 	bl	8001454 <_ZN3led13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	64bb      	str	r3, [r7, #72]	; 0x48
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001268:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fb4c 	bl	800490c <HAL_TIM_ConfigClockSource>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	bf14      	ite	ne
 800127a:	2301      	movne	r3, #1
 800127c:	2300      	moveq	r3, #0
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <_ZN3led4initEv+0xa4>
	  {
	    Error_Handler();
 8001284:	f000 f8e6 	bl	8001454 <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001288:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800128c:	4618      	mov	r0, r3
 800128e:	f003 f852 	bl	8004336 <HAL_TIM_PWM_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf14      	ite	ne
 8001298:	2301      	movne	r3, #1
 800129a:	2300      	moveq	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <_ZN3led4initEv+0xc2>
	  {
	    Error_Handler();
 80012a2:	f000 f8d7 	bl	8001454 <_ZN3led13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	643b      	str	r3, [r7, #64]	; 0x40
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80012b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 ff27 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf14      	ite	ne
 80012c4:	2301      	movne	r3, #1
 80012c6:	2300      	moveq	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <_ZN3led4initEv+0xee>
	  {
	    Error_Handler();
 80012ce:	f000 f8c1 	bl	8001454 <_ZN3led13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d2:	2360      	movs	r3, #96	; 0x60
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
	  sConfigOC.Pulse = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012f6:	2200      	movs	r2, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fa45 	bl	8004788 <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf14      	ite	ne
 8001304:	2301      	movne	r3, #1
 8001306:	2300      	moveq	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <_ZN3led4initEv+0x12e>
	  {
	    Error_Handler();
 800130e:	f000 f8a1 	bl	8001454 <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001312:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001316:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800131a:	2204      	movs	r2, #4
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fa33 	bl	8004788 <HAL_TIM_PWM_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <_ZN3led4initEv+0x152>
	  {
	    Error_Handler();
 8001332:	f000 f88f 	bl	8001454 <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001336:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800133a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800133e:	2208      	movs	r2, #8
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fa21 	bl	8004788 <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf14      	ite	ne
 800134c:	2301      	movne	r3, #1
 800134e:	2300      	moveq	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <_ZN3led4initEv+0x176>
	  {
	    Error_Handler();
 8001356:	f000 f87d 	bl	8001454 <_ZN3led13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800136e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001372:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001378:	1d3a      	adds	r2, r7, #4
 800137a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f003 ff3f 	bl	8005204 <HAL_TIMEx_ConfigBreakDeadTime>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf14      	ite	ne
 800138c:	2301      	movne	r3, #1
 800138e:	2300      	moveq	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <_ZN3led4initEv+0x1b6>
	  {
	    Error_Handler();
 8001396:	f000 f85d 	bl	8001454 <_ZN3led13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 800139a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fe44 	bl	800202c <HAL_TIM_MspPostInit>

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 f81c 	bl	80043e8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013b4:	2104      	movs	r1, #4
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 f816 	bl	80043e8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013c0:	2108      	movs	r1, #8
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 f810 	bl	80043e8 <HAL_TIM_PWM_Start>
}
 80013c8:	bf00      	nop
 80013ca:	37a0      	adds	r7, #160	; 0xa0
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010000 	.word	0x40010000

080013d4 <_ZN3led6SetRGBEiii>:

void led::SetRGB(int red, int green, int blue){
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	int32_t max = 65535;
 80013e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e4:	617b      	str	r3, [r7, #20]
	int32_t min = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]

	if(red > max){red = max;};
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dd01      	ble.n	80013f6 <_ZN3led6SetRGBEiii+0x22>
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	60fb      	str	r3, [r7, #12]
	if(green > max){green = max;};
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dd01      	ble.n	8001402 <_ZN3led6SetRGBEiii+0x2e>
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	60bb      	str	r3, [r7, #8]
	if(blue > max){blue = max;};
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	429a      	cmp	r2, r3
 8001408:	dd01      	ble.n	800140e <_ZN3led6SetRGBEiii+0x3a>
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	607b      	str	r3, [r7, #4]

	if(red < min){red = min;};
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	429a      	cmp	r2, r3
 8001414:	da01      	bge.n	800141a <_ZN3led6SetRGBEiii+0x46>
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	60fb      	str	r3, [r7, #12]
	if(green < min){green = min;};
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	429a      	cmp	r2, r3
 8001420:	da01      	bge.n	8001426 <_ZN3led6SetRGBEiii+0x52>
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	60bb      	str	r3, [r7, #8]
	if(blue < min){blue = min;};
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	429a      	cmp	r2, r3
 800142c:	da01      	bge.n	8001432 <_ZN3led6SetRGBEiii+0x5e>
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	607b      	str	r3, [r7, #4]

	TIM1->CCR1 = (int32_t)red;
 8001432:	4a07      	ldr	r2, [pc, #28]	; (8001450 <_ZN3led6SetRGBEiii+0x7c>)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = (int32_t)green;
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <_ZN3led6SetRGBEiii+0x7c>)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = (int32_t)blue;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <_ZN3led6SetRGBEiii+0x7c>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	63d3      	str	r3, [r2, #60]	; 0x3c

}
 8001444:	bf00      	nop
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40010000 	.word	0x40010000

08001454 <_ZN3led13Error_HandlerEv>:

void led::Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <_ZN3led13Error_HandlerEv+0x8>
	...

08001460 <main>:
GPIO_InitTypeDef GPIO_InitStruct = {0};

int timer_val = 0;

int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
  //Initialize the various parts of the system (each is encapsulated in its own c++ class with the exception of globals above)
  Machine::init();
 8001466:	f000 febb 	bl	80021e0 <_ZN7Machine4initEv>

  led led1;
  led1.init();
 800146a:	f7ff febb 	bl	80011e4 <_ZN3led4initEv>
  led *led1ptr;
  led1ptr = &led1;
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	617b      	str	r3, [r7, #20]
  //led::init();
  //motor::init();
  //encoder::init();

  motor motor1;
  motor1.init();
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fa68 	bl	800194c <_ZN5motor4initEv>
  motor *motor1ptr;
  motor1ptr = &motor1;
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	613b      	str	r3, [r7, #16]

  encoder encoder1;
  encoder1.init();
 8001480:	f7ff fd6e 	bl	8000f60 <_ZN7encoder4initEv>
  encoder *encoder1ptr;
  encoder1ptr = &encoder1;
 8001484:	463b      	mov	r3, r7
 8001486:	60fb      	str	r3, [r7, #12]


  systemState.setpoint = 100;
 8001488:	4b5b      	ldr	r3, [pc, #364]	; (80015f8 <main+0x198>)
 800148a:	2264      	movs	r2, #100	; 0x64
 800148c:	601a      	str	r2, [r3, #0]
  systemState.setAngle = 45;
 800148e:	4b5a      	ldr	r3, [pc, #360]	; (80015f8 <main+0x198>)
 8001490:	4a5a      	ldr	r2, [pc, #360]	; (80015fc <main+0x19c>)
 8001492:	605a      	str	r2, [r3, #4]
  systemState.currentPos = 0;
 8001494:	4b58      	ldr	r3, [pc, #352]	; (80015f8 <main+0x198>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  systemState.LEDRed = 0;
 800149a:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <main+0x198>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  systemState.LEDGreen = 0;
 80014a0:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <main+0x198>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  systemState.LEDBlue = 0;
 80014a6:	4b54      	ldr	r3, [pc, #336]	; (80015f8 <main+0x198>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  systemState.currentSpeed = 0;
 80014ac:	4b52      	ldr	r3, [pc, #328]	; (80015f8 <main+0x198>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
  systemState.motorOnOff = 0;
 80014b2:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <main+0x198>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
  systemState.mode = 0;
 80014b8:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <main+0x198>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	639a      	str	r2, [r3, #56]	; 0x38
  systemState.zeroRaw = -1;
 80014be:	4b4e      	ldr	r3, [pc, #312]	; (80015f8 <main+0x198>)
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
  systemState.currentMode = 0;
 80014c6:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <main+0x198>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	; 0x3c
  systemState.noSamples = 10;
 80014cc:	4b4a      	ldr	r3, [pc, #296]	; (80015f8 <main+0x198>)
 80014ce:	220a      	movs	r2, #10
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
  systemState.backOffSteps = 10;
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <main+0x198>)
 80014d4:	220a      	movs	r2, #10
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44

  PID.lastTime = 0;
 80014d8:	4b49      	ldr	r3, [pc, #292]	; (8001600 <main+0x1a0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
  PID.loopTime = 100;
 80014de:	4b48      	ldr	r3, [pc, #288]	; (8001600 <main+0x1a0>)
 80014e0:	2264      	movs	r2, #100	; 0x64
 80014e2:	605a      	str	r2, [r3, #4]
  PID.angleErrorSum = 0;
 80014e4:	4b46      	ldr	r3, [pc, #280]	; (8001600 <main+0x1a0>)
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  PID.angleLastError = 0;
 80014ec:	4b44      	ldr	r3, [pc, #272]	; (8001600 <main+0x1a0>)
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  PID.angleErrorDer = 0;
 80014f4:	4b42      	ldr	r3, [pc, #264]	; (8001600 <main+0x1a0>)
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  PID.kp = 1;
 80014fc:	4b40      	ldr	r3, [pc, #256]	; (8001600 <main+0x1a0>)
 80014fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001502:	615a      	str	r2, [r3, #20]
  PID.ki = 0.001;
 8001504:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <main+0x1a0>)
 8001506:	4a3f      	ldr	r2, [pc, #252]	; (8001604 <main+0x1a4>)
 8001508:	619a      	str	r2, [r3, #24]
  PID.kd = 0;
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <main+0x1a0>)
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  PID.minOut = -100;
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <main+0x1a0>)
 8001514:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  PID.maxOut = 100;
 800151a:	4b39      	ldr	r3, [pc, #228]	; (8001600 <main+0x1a0>)
 800151c:	2264      	movs	r2, #100	; 0x64
 800151e:	621a      	str	r2, [r3, #32]
  PID.output = 0;
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <main+0x1a0>)
 8001522:	2200      	movs	r2, #0
 8001524:	629a      	str	r2, [r3, #40]	; 0x28

  ConsoleInit();
 8001526:	f7ff f895 	bl	8000654 <ConsoleInit>


  //timer_val = __HAL_TIM_GET_COUNTER(&htim14);
  while (1)
  {
	  switch(systemState.mode){
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <main+0x198>)
 800152c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152e:	2b02      	cmp	r3, #2
 8001530:	d051      	beq.n	80015d6 <main+0x176>
 8001532:	2b02      	cmp	r3, #2
 8001534:	d853      	bhi.n	80015de <main+0x17e>
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <main+0xe0>
 800153a:	2b01      	cmp	r3, #1
 800153c:	d00e      	beq.n	800155c <main+0xfc>
 800153e:	e04e      	b.n	80015de <main+0x17e>
	  case 0:
		  	  if(systemState.mode == systemState.currentMode){
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <main+0x198>)
 8001542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <main+0x198>)
 8001546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001548:	429a      	cmp	r2, r3
 800154a:	d04d      	beq.n	80015e8 <main+0x188>
		  		  //Do nothing already in Off mode
		  	  }
		  	  else{
		  		  motor1.turnOffMotor();
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fb96 	bl	8001c80 <_ZN5motor12turnOffMotorEv>
		  		  systemState.currentMode = 0;
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <main+0x198>)
 8001556:	2200      	movs	r2, #0
 8001558:	63da      	str	r2, [r3, #60]	; 0x3c
	  	  	  }
		  	  break;
 800155a:	e045      	b.n	80015e8 <main+0x188>
	  case 1:
		  	  if(systemState.mode != systemState.currentMode){
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <main+0x198>)
 800155e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <main+0x198>)
 8001562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001564:	429a      	cmp	r2, r3
 8001566:	d011      	beq.n	800158c <main+0x12c>
		  		  //Motor needs to be turned on
		  		  motor1.turnOnMotor();
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fb44 	bl	8001bf8 <_ZN5motor11turnOnMotorEv>
		  		  if(systemState.zeroRaw < 0){
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <main+0x198>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	2b00      	cmp	r3, #0
 8001576:	da06      	bge.n	8001586 <main+0x126>
		  			  motor1.zeroMotor(&encoder1, &led1);
 8001578:	f107 0208 	add.w	r2, r7, #8
 800157c:	4639      	mov	r1, r7
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fc2f 	bl	8001de4 <_ZN5motor9zeroMotorEP7encoderP3led>
		  		  }
		  		  systemState.currentMode = 1;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <main+0x198>)
 8001588:	2201      	movs	r2, #1
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  }
		  	  //Code for control loop
		  	  controlLoop(&encoder1);
 800158c:	463b      	mov	r3, r7
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f856 	bl	8001640 <_Z11controlLoopP7encoder>
		  	  motor1.setSpeed(PID.output);
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <main+0x1a0>)
 8001596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fb9b 	bl	8001cd8 <_ZN5motor8setSpeedEi>
		  	  if(abs(PID.angleLastError) < 2)
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <main+0x1a0>)
 80015a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80015a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ac:	ee17 3a90 	vmov	r3, s15
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bfb8      	it	lt
 80015b4:	425b      	neglt	r3, r3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	dc06      	bgt.n	80015c8 <main+0x168>
		  	  {
		  		  led1.SetRGB(0,65535,0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff ff07 	bl	80013d4 <_ZN3led6SetRGBEiii>
		  	  }
		  	  else
		  	  {
		  		  led1.SetRGB(65535, 0, 0);
		  	  }
		  	  break;
 80015c6:	e010      	b.n	80015ea <main+0x18a>
		  		  led1.SetRGB(65535, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015d0:	f7ff ff00 	bl	80013d4 <_ZN3led6SetRGBEiii>
		  	  break;
 80015d4:	e009      	b.n	80015ea <main+0x18a>

	  case 2:
		  	  //code for speed mode
		  	  systemState.currentMode = 2;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <main+0x198>)
 80015d8:	2202      	movs	r2, #2
 80015da:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  break;
 80015dc:	e005      	b.n	80015ea <main+0x18a>

	  default:
		  motor1.turnOffMotor();
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fb4d 	bl	8001c80 <_ZN5motor12turnOffMotorEv>
 80015e6:	e000      	b.n	80015ea <main+0x18a>
		  	  break;
 80015e8:	bf00      	nop
	  //motor1.setSpeed(0);
	  //HAL_Delay(50000);
	  ///motor1.setSpeed(80);
	  //HAL_Delay(5000);

	  ConsoleProcess(&encoder1);
 80015ea:	463b      	mov	r3, r7
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff f85f 	bl	80006b0 <ConsoleProcess>

	  encoder::getRaw();
 80015f2:	f7ff fd31 	bl	8001058 <_ZN7encoder6getRawEv>
	  switch(systemState.mode){
 80015f6:	e798      	b.n	800152a <main+0xca>
 80015f8:	200001e4 	.word	0x200001e4
 80015fc:	42340000 	.word	0x42340000
 8001600:	2000022c 	.word	0x2000022c
 8001604:	3a83126f 	.word	0x3a83126f

08001608 <HAL_TIM_PeriodElapsedCallback>:
  }
}

//motor steping interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	if(htim == &htim14){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d10b      	bne.n	8001630 <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)1);  //STP
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001620:	f001 fd3a 	bl	8003098 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162a:	4804      	ldr	r0, [pc, #16]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800162c:	f001 fd34 	bl	8003098 <HAL_GPIO_WritePin>
	}

}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000320 	.word	0x20000320
 800163c:	40021000 	.word	0x40021000

08001640 <_Z11controlLoopP7encoder>:

  /* USER CODE END CAN1_RX0_IRQn 1 */
}

int32_t controlLoop(encoder *encoder)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	int32_t waiting = 1;
 8001648:	2301      	movs	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
	int32_t timeNow = (int32_t)__HAL_TIM_GET_COUNTER(&htim13);
 800164c:	4bb1      	ldr	r3, [pc, #708]	; (8001914 <_Z11controlLoopP7encoder+0x2d4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	617b      	str	r3, [r7, #20]
	int32_t timeSinceLast = (int32_t)(timeNow - PID.lastTime);
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	4bb0      	ldr	r3, [pc, #704]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	613b      	str	r3, [r7, #16]

		if(timeSinceLast > PID.loopTime)
 800165e:	4bae      	ldr	r3, [pc, #696]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	f080 8150 	bcs.w	800190a <_Z11controlLoopP7encoder+0x2ca>
		{
			//Calculate Errors
			float currentAngle = encoder->getAngle();
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fd52 	bl	8001114 <_ZN7encoder8getAngleEv>
 8001670:	ed87 0a03 	vstr	s0, [r7, #12]
			float angleError = systemState.setAngle - currentAngle;
 8001674:	4ba9      	ldr	r3, [pc, #676]	; (800191c <_Z11controlLoopP7encoder+0x2dc>)
 8001676:	ed93 7a01 	vldr	s14, [r3, #4]
 800167a:	edd7 7a03 	vldr	s15, [r7, #12]
 800167e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001682:	edc7 7a02 	vstr	s15, [r7, #8]
			PID.angleErrorSum += (angleError * (timeSinceLast/1000));
 8001686:	4ba4      	ldr	r3, [pc, #656]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 8001688:	ed93 7a02 	vldr	s14, [r3, #8]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4aa4      	ldr	r2, [pc, #656]	; (8001920 <_Z11controlLoopP7encoder+0x2e0>)
 8001690:	fb82 1203 	smull	r1, r2, r2, r3
 8001694:	1192      	asrs	r2, r2, #6
 8001696:	17db      	asrs	r3, r3, #31
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	4b9a      	ldr	r3, [pc, #616]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 80016b0:	edc3 7a02 	vstr	s15, [r3, #8]
			PID.angleErrorDer = (angleError - PID.angleLastError)/(timeSinceLast/1000);
 80016b4:	4b98      	ldr	r3, [pc, #608]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 80016b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80016be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4a96      	ldr	r2, [pc, #600]	; (8001920 <_Z11controlLoopP7encoder+0x2e0>)
 80016c6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ca:	1192      	asrs	r2, r2, #6
 80016cc:	17db      	asrs	r3, r3, #31
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016dc:	4b8e      	ldr	r3, [pc, #568]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 80016de:	edc3 7a04 	vstr	s15, [r3, #16]

			//Compute PID output
			float prop = PID.kp * angleError;
 80016e2:	4b8d      	ldr	r3, [pc, #564]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 80016e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80016e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80016ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			float integral = PID.ki * PID.angleErrorSum;
 80016f4:	4b88      	ldr	r3, [pc, #544]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 80016f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80016fa:	4b87      	ldr	r3, [pc, #540]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 80016fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001704:	edc7 7a08 	vstr	s15, [r7, #32]
			float derivitive = PID.kd * PID.angleErrorDer;
 8001708:	4b83      	ldr	r3, [pc, #524]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 800170a:	ed93 7a07 	vldr	s14, [r3, #28]
 800170e:	4b82      	ldr	r3, [pc, #520]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 8001710:	edd3 7a04 	vldr	s15, [r3, #16]
 8001714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001718:	edc7 7a07 	vstr	s15, [r7, #28]

			//Limit Outputs if necessary
			if(prop < PID.minOut){prop = PID.minOut;}
 800171c:	4b7e      	ldr	r3, [pc, #504]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001728:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800172c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	d507      	bpl.n	8001746 <_Z11controlLoopP7encoder+0x106>
 8001736:	4b78      	ldr	r3, [pc, #480]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001742:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			if(prop > PID.maxOut){prop = PID.maxOut;}
 8001746:	4b74      	ldr	r3, [pc, #464]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	dd07      	ble.n	8001770 <_Z11controlLoopP7encoder+0x130>
 8001760:	4b6d      	ldr	r3, [pc, #436]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			if(integral < PID.minOut){integral = PID.minOut;}
 8001770:	4b69      	ldr	r3, [pc, #420]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d507      	bpl.n	800179a <_Z11controlLoopP7encoder+0x15a>
 800178a:	4b63      	ldr	r3, [pc, #396]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001796:	edc7 7a08 	vstr	s15, [r7, #32]
			if(integral > PID.maxOut){integral = PID.maxOut;}
 800179a:	4b5f      	ldr	r3, [pc, #380]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80017aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	dd07      	ble.n	80017c4 <_Z11controlLoopP7encoder+0x184>
 80017b4:	4b58      	ldr	r3, [pc, #352]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c0:	edc7 7a08 	vstr	s15, [r7, #32]
			if(derivitive < PID.minOut){derivitive = PID.minOut;}
 80017c4:	4b54      	ldr	r3, [pc, #336]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80017d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	d507      	bpl.n	80017ee <_Z11controlLoopP7encoder+0x1ae>
 80017de:	4b4e      	ldr	r3, [pc, #312]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	edc7 7a07 	vstr	s15, [r7, #28]
			if(derivitive > PID.maxOut){derivitive = PID.maxOut;}
 80017ee:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80017fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	dd07      	ble.n	8001818 <_Z11controlLoopP7encoder+0x1d8>
 8001808:	4b43      	ldr	r3, [pc, #268]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001814:	edc7 7a07 	vstr	s15, [r7, #28]


			//Final output calc
			PID.output = (int32_t)(prop + integral + derivitive);
 8001818:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800181c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001820:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001824:	edd7 7a07 	vldr	s15, [r7, #28]
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001830:	ee17 2a90 	vmov	r2, s15
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 8001836:	629a      	str	r2, [r3, #40]	; 0x28

			//update old variables
			PID.angleLastError = angleError;
 8001838:	4a37      	ldr	r2, [pc, #220]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	60d3      	str	r3, [r2, #12]
			PID.lastTime = timeNow;
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	4a35      	ldr	r2, [pc, #212]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 8001842:	6013      	str	r3, [r2, #0]

			ConsoleIoSendString("Set Angle = ");
 8001844:	4837      	ldr	r0, [pc, #220]	; (8001924 <_Z11controlLoopP7encoder+0x2e4>)
 8001846:	f7ff fb75 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.setAngle);
 800184a:	4b34      	ldr	r3, [pc, #208]	; (800191c <_Z11controlLoopP7encoder+0x2dc>)
 800184c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001854:	ee17 3a90 	vmov	r3, s15
 8001858:	b29b      	uxth	r3, r3
 800185a:	b21b      	sxth	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f8d6 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(" Current Angle = ");
 8001862:	4831      	ldr	r0, [pc, #196]	; (8001928 <_Z11controlLoopP7encoder+0x2e8>)
 8001864:	f7ff fb66 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)currentAngle);
 8001868:	edd7 7a03 	vldr	s15, [r7, #12]
 800186c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001870:	ee17 3a90 	vmov	r3, s15
 8001874:	b29b      	uxth	r3, r3
 8001876:	b21b      	sxth	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff f8c8 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(" Encoder Raw = ");
 800187e:	482b      	ldr	r0, [pc, #172]	; (800192c <_Z11controlLoopP7encoder+0x2ec>)
 8001880:	f7ff fb58 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.currentPos);
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <_Z11controlLoopP7encoder+0x2dc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	b21b      	sxth	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f8bf 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(" Output = ");
 8001890:	4827      	ldr	r0, [pc, #156]	; (8001930 <_Z11controlLoopP7encoder+0x2f0>)
 8001892:	f7ff fb4f 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.output);
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <_Z11controlLoopP7encoder+0x2d8>)
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	b21b      	sxth	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff f8b6 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(" Error = ");
 80018a2:	4824      	ldr	r0, [pc, #144]	; (8001934 <_Z11controlLoopP7encoder+0x2f4>)
 80018a4:	f7ff fb46 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
			if(angleError > 0){ConsoleSendParamInt16((uint16_t)angleError);}
 80018a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	dd0b      	ble.n	80018ce <_Z11controlLoopP7encoder+0x28e>
 80018b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018be:	ee17 3a90 	vmov	r3, s15
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f8a1 	bl	8000a0e <ConsoleSendParamInt16>
 80018cc:	e016      	b.n	80018fc <_Z11controlLoopP7encoder+0x2bc>
			else if (angleError < 0){
 80018ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	d50f      	bpl.n	80018fc <_Z11controlLoopP7encoder+0x2bc>
				ConsoleIoSendString("-");
 80018dc:	4816      	ldr	r0, [pc, #88]	; (8001938 <_Z11controlLoopP7encoder+0x2f8>)
 80018de:	f7ff fb29 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>
				ConsoleSendParamInt16((uint16_t)(angleError * -1));
 80018e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e6:	eef1 7a67 	vneg.f32	s15, s15
 80018ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ee:	ee17 3a90 	vmov	r3, s15
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f889 	bl	8000a0e <ConsoleSendParamInt16>
			}
			ConsoleIoSendString(STR_ENDLINE);
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <_Z11controlLoopP7encoder+0x2fc>)
 80018fe:	f7ff fb19 	bl	8000f34 <_Z19ConsoleIoSendStringPKc>

			waiting = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
			return 1;
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <_Z11controlLoopP7encoder+0x2cc>
		}
		return 0;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200002d8 	.word	0x200002d8
 8001918:	2000022c 	.word	0x2000022c
 800191c:	200001e4 	.word	0x200001e4
 8001920:	10624dd3 	.word	0x10624dd3
 8001924:	08005f0c 	.word	0x08005f0c
 8001928:	08005f1c 	.word	0x08005f1c
 800192c:	08005f30 	.word	0x08005f30
 8001930:	08005f40 	.word	0x08005f40
 8001934:	08005f4c 	.word	0x08005f4c
 8001938:	08005f58 	.word	0x08005f58
 800193c:	08005f5c 	.word	0x08005f5c

08001940 <Error_Handler>:

void Error_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001944:	b672      	cpsid	i
}
 8001946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001948:	e7fe      	b.n	8001948 <Error_Handler+0x8>
	...

0800194c <_ZN5motor4initEv>:
#include <main.h>
#include <global.h>
#include <cstdlib>

void motor::init()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]


	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
 8001958:	4b9e      	ldr	r3, [pc, #632]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	4a9d      	ldr	r2, [pc, #628]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 800195e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001962:	6313      	str	r3, [r2, #48]	; 0x30
 8001964:	4b9b      	ldr	r3, [pc, #620]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
 8001974:	4b97      	ldr	r3, [pc, #604]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4a96      	ldr	r2, [pc, #600]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6313      	str	r3, [r2, #48]	; 0x30
 8001980:	4b94      	ldr	r3, [pc, #592]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	623b      	str	r3, [r7, #32]
 800198a:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	4b90      	ldr	r3, [pc, #576]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	4a8f      	ldr	r2, [pc, #572]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	6313      	str	r3, [r2, #48]	; 0x30
 800199c:	4b8d      	ldr	r3, [pc, #564]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	4b89      	ldr	r3, [pc, #548]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	4a88      	ldr	r2, [pc, #544]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	6313      	str	r3, [r2, #48]	; 0x30
 80019b8:	4b86      	ldr	r3, [pc, #536]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	4b82      	ldr	r3, [pc, #520]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	4a81      	ldr	r2, [pc, #516]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	6313      	str	r3, [r2, #48]	; 0x30
 80019d4:	4b7f      	ldr	r3, [pc, #508]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	4a7a      	ldr	r2, [pc, #488]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 80019ea:	f043 0308 	orr.w	r3, r3, #8
 80019ee:	6313      	str	r3, [r2, #48]	; 0x30
 80019f0:	4b78      	ldr	r3, [pc, #480]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	4b74      	ldr	r3, [pc, #464]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	4a73      	ldr	r2, [pc, #460]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0c:	4b71      	ldr	r3, [pc, #452]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4a6c      	ldr	r2, [pc, #432]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 8001a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a26:	6313      	str	r3, [r2, #48]	; 0x30
 8001a28:	4b6a      	ldr	r3, [pc, #424]	; (8001bd4 <_ZN5motor4initEv+0x288>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a3a:	4867      	ldr	r0, [pc, #412]	; (8001bd8 <_ZN5motor4initEv+0x28c>)
 8001a3c:	f001 fb2c 	bl	8003098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8001a46:	4865      	ldr	r0, [pc, #404]	; (8001bdc <_ZN5motor4initEv+0x290>)
 8001a48:	f001 fb26 	bl	8003098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8001a52:	4863      	ldr	r0, [pc, #396]	; (8001be0 <_ZN5motor4initEv+0x294>)
 8001a54:	f001 fb20 	bl	8003098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8001a5e:	4861      	ldr	r0, [pc, #388]	; (8001be4 <_ZN5motor4initEv+0x298>)
 8001a60:	f001 fb1a 	bl	8003098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001a6a:	485f      	ldr	r0, [pc, #380]	; (8001be8 <_ZN5motor4initEv+0x29c>)
 8001a6c:	f001 fb14 	bl	8003098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PF12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a70:	4b5e      	ldr	r3, [pc, #376]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001a72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a76:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	4b5c      	ldr	r3, [pc, #368]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	4b59      	ldr	r3, [pc, #356]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a8a:	4958      	ldr	r1, [pc, #352]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001a8c:	4852      	ldr	r0, [pc, #328]	; (8001bd8 <_ZN5motor4initEv+0x28c>)
 8001a8e:	f001 f93f 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE10 PE12 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001a94:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8001a98:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	4b54      	ldr	r3, [pc, #336]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	4b52      	ldr	r3, [pc, #328]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	4b51      	ldr	r3, [pc, #324]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aac:	494f      	ldr	r1, [pc, #316]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001aae:	484b      	ldr	r0, [pc, #300]	; (8001bdc <_ZN5motor4initEv+0x290>)
 8001ab0:	f001 f92e 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB12 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001ab6:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8001aba:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	4b48      	ldr	r3, [pc, #288]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ace:	4947      	ldr	r1, [pc, #284]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001ad0:	4843      	ldr	r0, [pc, #268]	; (8001be0 <_ZN5motor4initEv+0x294>)
 8001ad2:	f001 f91d 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ad6:	4b45      	ldr	r3, [pc, #276]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001ad8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001adc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	4b43      	ldr	r3, [pc, #268]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	4b41      	ldr	r3, [pc, #260]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001af0:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001af2:	2209      	movs	r2, #9
 8001af4:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	493d      	ldr	r1, [pc, #244]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001af8:	4839      	ldr	r0, [pc, #228]	; (8001be0 <_ZN5motor4initEv+0x294>)
 8001afa:	f001 f909 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD10 PD12 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8001afe:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b00:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 8001b04:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	4b39      	ldr	r3, [pc, #228]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	4b36      	ldr	r3, [pc, #216]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b18:	4934      	ldr	r1, [pc, #208]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b1a:	4832      	ldr	r0, [pc, #200]	; (8001be4 <_ZN5motor4initEv+0x298>)
 8001b1c:	f001 f8f8 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b26:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b34:	492d      	ldr	r1, [pc, #180]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b36:	482b      	ldr	r0, [pc, #172]	; (8001be4 <_ZN5motor4initEv+0x298>)
 8001b38:	f001 f8ea 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG13 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b3e:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001b42:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);\
 8001b56:	4925      	ldr	r1, [pc, #148]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b58:	4823      	ldr	r0, [pc, #140]	; (8001be8 <_ZN5motor4initEv+0x29c>)
 8001b5a:	f001 f8d9 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b64:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b72:	491e      	ldr	r1, [pc, #120]	; (8001bec <_ZN5motor4initEv+0x2a0>)
 8001b74:	481b      	ldr	r0, [pc, #108]	; (8001be4 <_ZN5motor4initEv+0x298>)
 8001b76:	f001 f8cb 	bl	8002d10 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2006      	movs	r0, #6
 8001b80:	f001 f88f 	bl	8002ca2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b84:	2006      	movs	r0, #6
 8001b86:	f001 f8a8 	bl	8002cda <HAL_NVIC_EnableIRQ>


	htim14.Instance = TIM14;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <_ZN5motor4initEv+0x2a4>)
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <_ZN5motor4initEv+0x2a8>)
 8001b8e:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 16000 -1;
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <_ZN5motor4initEv+0x2a4>)
 8001b92:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001b96:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <_ZN5motor4initEv+0x2a4>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 100 - 1;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <_ZN5motor4initEv+0x2a4>)
 8001ba0:	2263      	movs	r2, #99	; 0x63
 8001ba2:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <_ZN5motor4initEv+0x2a4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <_ZN5motor4initEv+0x2a4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001bb0:	480f      	ldr	r0, [pc, #60]	; (8001bf0 <_ZN5motor4initEv+0x2a4>)
 8001bb2:	f002 fa41 	bl	8004038 <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <_ZN5motor4initEv+0x27e>
	{
	  Error_Handler();
 8001bc6:	f000 f967 	bl	8001e98 <_ZN5motor13Error_HandlerEv>
	}
	//HAL_TIM_Base_Start_IT(&htim14);
	//this->setSpeed(0);

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40021400 	.word	0x40021400
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40021800 	.word	0x40021800
 8001bec:	200003b0 	.word	0x200003b0
 8001bf0:	20000320 	.word	0x20000320
 8001bf4:	40002000 	.word	0x40002000

08001bf8 <_ZN5motor11turnOnMotorEv>:

void motor::turnOnMotor(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

	//Set enable pin to 0 for turn on outputs of fets
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, (GPIO_PinState)0);  //EN
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	481b      	ldr	r0, [pc, #108]	; (8001c74 <_ZN5motor11turnOnMotorEv+0x7c>)
 8001c08:	f001 fa46 	bl	8003098 <HAL_GPIO_WritePin>
	//Set reset pin (0 = outputs off, 1 = outputs on)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (GPIO_PinState)1);  //RST
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c12:	4819      	ldr	r0, [pc, #100]	; (8001c78 <_ZN5motor11turnOnMotorEv+0x80>)
 8001c14:	f001 fa40 	bl	8003098 <HAL_GPIO_WritePin>
	//Assert sleepmode logic high is on, logic low is off
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, (GPIO_PinState)1);  //SLP
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c1e:	4817      	ldr	r0, [pc, #92]	; (8001c7c <_ZN5motor11turnOnMotorEv+0x84>)
 8001c20:	f001 fa3a 	bl	8003098 <HAL_GPIO_WritePin>
	//Set the microsteping pins based on stepMode
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, (GPIO_PinState)0);  //MS1
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c2a:	4812      	ldr	r0, [pc, #72]	; (8001c74 <_ZN5motor11turnOnMotorEv+0x7c>)
 8001c2c:	f001 fa34 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (GPIO_PinState)0);  //MS2
 8001c30:	2200      	movs	r2, #0
 8001c32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c36:	4810      	ldr	r0, [pc, #64]	; (8001c78 <_ZN5motor11turnOnMotorEv+0x80>)
 8001c38:	f001 fa2e 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, (GPIO_PinState)0);  //MS2
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c42:	480c      	ldr	r0, [pc, #48]	; (8001c74 <_ZN5motor11turnOnMotorEv+0x7c>)
 8001c44:	f001 fa28 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (GPIO_PinState)0);  //MS3
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c4e:	480a      	ldr	r0, [pc, #40]	; (8001c78 <_ZN5motor11turnOnMotorEv+0x80>)
 8001c50:	f001 fa22 	bl	8003098 <HAL_GPIO_WritePin>
	//Assert direction
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, (GPIO_PinState)1);  //DIR
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5a:	4808      	ldr	r0, [pc, #32]	; (8001c7c <_ZN5motor11turnOnMotorEv+0x84>)
 8001c5c:	f001 fa1c 	bl	8003098 <HAL_GPIO_WritePin>
	//Assert logic low on STEP pin
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <_ZN5motor11turnOnMotorEv+0x84>)
 8001c68:	f001 fa16 	bl	8003098 <HAL_GPIO_WritePin>

	//Turn on timer and set motor speed to 0

}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40020c00 	.word	0x40020c00
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	40021000 	.word	0x40021000

08001c80 <_ZN5motor12turnOffMotorEv>:

void motor::turnOffMotor(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

	//Set enable pin to 1 for turn off outputs of fets
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, (GPIO_PinState)1);  //EN
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	480f      	ldr	r0, [pc, #60]	; (8001ccc <_ZN5motor12turnOffMotorEv+0x4c>)
 8001c90:	f001 fa02 	bl	8003098 <HAL_GPIO_WritePin>
	//Set reset pin (1 = outputs off, 0 = outputs on)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (GPIO_PinState)1);  //RST
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c9a:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <_ZN5motor12turnOffMotorEv+0x50>)
 8001c9c:	f001 f9fc 	bl	8003098 <HAL_GPIO_WritePin>
	//Assert sleepmode is off (1)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, (GPIO_PinState)1);  //SLP
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca6:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <_ZN5motor12turnOffMotorEv+0x54>)
 8001ca8:	f001 f9f6 	bl	8003098 <HAL_GPIO_WritePin>
	//Assert direction
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, (GPIO_PinState)1);  //DIR
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb2:	4808      	ldr	r0, [pc, #32]	; (8001cd4 <_ZN5motor12turnOffMotorEv+0x54>)
 8001cb4:	f001 f9f0 	bl	8003098 <HAL_GPIO_WritePin>
	//Assert logic low on STEP pin
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <_ZN5motor12turnOffMotorEv+0x54>)
 8001cc0:	f001 f9ea 	bl	8003098 <HAL_GPIO_WritePin>

}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <_ZN5motor8setSpeedEi>:
		currentStep++;
	}
}

void motor::setSpeed(int speedVal)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]


	//Determine if value needs changing
	if(systemState.currentSpeed == speedVal)
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <_ZN5motor8setSpeedEi+0xb0>)
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d048      	beq.n	8001d7e <_ZN5motor8setSpeedEi+0xa6>
	{
		//do nothing
	}
	else
	{
		HAL_TIM_Base_Stop(&htim14);
 8001cec:	4827      	ldr	r0, [pc, #156]	; (8001d8c <_ZN5motor8setSpeedEi+0xb4>)
 8001cee:	f002 fa5b 	bl	80041a8 <HAL_TIM_Base_Stop>
		if(speedVal < -100){speedVal = -100;}
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001cf8:	da02      	bge.n	8001d00 <_ZN5motor8setSpeedEi+0x28>
 8001cfa:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001cfe:	603b      	str	r3, [r7, #0]
		if(speedVal > 100){speedVal = 100;}
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	dd01      	ble.n	8001d0a <_ZN5motor8setSpeedEi+0x32>
 8001d06:	2364      	movs	r3, #100	; 0x64
 8001d08:	603b      	str	r3, [r7, #0]

		if(speedVal == 0){
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <_ZN5motor8setSpeedEi+0x4c>
			//turn off interrupt/stop timer
			HAL_TIM_Base_Stop(&htim14);
 8001d10:	481e      	ldr	r0, [pc, #120]	; (8001d8c <_ZN5motor8setSpeedEi+0xb4>)
 8001d12:	f002 fa49 	bl	80041a8 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop_IT(&htim14);
 8001d16:	481d      	ldr	r0, [pc, #116]	; (8001d8c <_ZN5motor8setSpeedEi+0xb4>)
 8001d18:	f002 fade 	bl	80042d8 <HAL_TIM_Base_Stop_IT>
			systemState.motorOnOff = 0;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <_ZN5motor8setSpeedEi+0xb0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_Base_Start_IT(&htim14);
			systemState.currentSpeed = speedVal;

		}
	}
}
 8001d22:	e02c      	b.n	8001d7e <_ZN5motor8setSpeedEi+0xa6>
			if(speedVal < 0)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	da04      	bge.n	8001d34 <_ZN5motor8setSpeedEi+0x5c>
				this->setDirection(0);
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f82f 	bl	8001d90 <_ZN5motor12setDirectionEi>
 8001d32:	e003      	b.n	8001d3c <_ZN5motor8setSpeedEi+0x64>
				this->setDirection(1);
 8001d34:	2101      	movs	r1, #1
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f82a 	bl	8001d90 <_ZN5motor12setDirectionEi>
			int prescaler = 1000/(abs(speedVal));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bfb8      	it	lt
 8001d42:	425b      	neglt	r3, r3
 8001d44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d48:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d4c:	60fb      	str	r3, [r7, #12]
			htim14.Init.Period = prescaler - 1;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <_ZN5motor8setSpeedEi+0xb4>)
 8001d56:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <_ZN5motor8setSpeedEi+0xb4>)
 8001d5a:	f002 f96d 	bl	8004038 <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <_ZN5motor8setSpeedEi+0x9a>
				  Error_Handler();
 8001d6e:	f000 f893 	bl	8001e98 <_ZN5motor13Error_HandlerEv>
			HAL_TIM_Base_Start_IT(&htim14);
 8001d72:	4806      	ldr	r0, [pc, #24]	; (8001d8c <_ZN5motor8setSpeedEi+0xb4>)
 8001d74:	f002 fa40 	bl	80041f8 <HAL_TIM_Base_Start_IT>
			systemState.currentSpeed = speedVal;
 8001d78:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <_ZN5motor8setSpeedEi+0xb0>)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200001e4 	.word	0x200001e4
 8001d8c:	20000320 	.word	0x20000320

08001d90 <_ZN5motor12setDirectionEi>:

void motor::setDirection(int direction){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, (GPIO_PinState)direction);  //DIR
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <_ZN5motor12setDirectionEi+0x24>)
 8001da6:	f001 f977 	bl	8003098 <HAL_GPIO_WritePin>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000

08001db8 <_ZN5motor4stepEv>:

void motor::step()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)1);  //STP
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc6:	4806      	ldr	r0, [pc, #24]	; (8001de0 <_ZN5motor4stepEv+0x28>)
 8001dc8:	f001 f966 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd2:	4803      	ldr	r0, [pc, #12]	; (8001de0 <_ZN5motor4stepEv+0x28>)
 8001dd4:	f001 f960 	bl	8003098 <HAL_GPIO_WritePin>
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000

08001de4 <_ZN5motor9zeroMotorEP7encoderP3led>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (GPIO_PinState)MS2);  //MS2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (GPIO_PinState)MS3);  //MS3
}

void motor::zeroMotor(encoder *ptr, led *ledptr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
	//set direction
	this->setDirection(0);
 8001df0:	2100      	movs	r1, #0
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f7ff ffcc 	bl	8001d90 <_ZN5motor12setDirectionEi>
	//step untill limit switch is triggered

	ledptr->SetRGB(65535, 0, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e00:	f7ff fae8 	bl	80013d4 <_ZN3led6SetRGBEiii>
	while((HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_14)))
 8001e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e08:	4821      	ldr	r0, [pc, #132]	; (8001e90 <_ZN5motor9zeroMotorEP7encoderP3led+0xac>)
 8001e0a:	f001 f92d 	bl	8003068 <HAL_GPIO_ReadPin>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf14      	ite	ne
 8001e14:	2301      	movne	r3, #1
 8001e16:	2300      	moveq	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <_ZN5motor9zeroMotorEP7encoderP3led+0x48>
	{
		this->step();
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7ff ffca 	bl	8001db8 <_ZN5motor4stepEv>
		HAL_Delay(10);
 8001e24:	200a      	movs	r0, #10
 8001e26:	f000 fc03 	bl	8002630 <HAL_Delay>
	while((HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_14)))
 8001e2a:	e7eb      	b.n	8001e04 <_ZN5motor9zeroMotorEP7encoderP3led+0x20>
	}
	HAL_Delay(5);
 8001e2c:	2005      	movs	r0, #5
 8001e2e:	f000 fbff 	bl	8002630 <HAL_Delay>
	systemState.zeroRaw = (float)ptr->getRaw();
 8001e32:	f7ff f911 	bl	8001058 <_ZN7encoder6getRawEv>
 8001e36:	ee07 0a90 	vmov	s15, r0
 8001e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e42:	ee17 2a90 	vmov	r2, s15
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <_ZN5motor9zeroMotorEP7encoderP3led+0xb0>)
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30

	//back off from zero point
	this->setDirection(1);
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f7ff ff9f 	bl	8001d90 <_ZN5motor12setDirectionEi>
	for(int i = 0; i<systemState.backOffSteps; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <_ZN5motor9zeroMotorEP7encoderP3led+0xb0>)
 8001e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d909      	bls.n	8001e74 <_ZN5motor9zeroMotorEP7encoderP3led+0x90>
	{
		this->step();
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f7ff ffa9 	bl	8001db8 <_ZN5motor4stepEv>
		HAL_Delay(100);
 8001e66:	2064      	movs	r0, #100	; 0x64
 8001e68:	f000 fbe2 	bl	8002630 <HAL_Delay>
	for(int i = 0; i<systemState.backOffSteps; i++)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e7f0      	b.n	8001e56 <_ZN5motor9zeroMotorEP7encoderP3led+0x72>
	}
	ledptr->SetRGB(0, 35535, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	f648 21cf 	movw	r1, #35535	; 0x8acf
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff faaa 	bl	80013d4 <_ZN3led6SetRGBEiii>
	HAL_Delay(100);
 8001e80:	2064      	movs	r0, #100	; 0x64
 8001e82:	f000 fbd5 	bl	8002630 <HAL_Delay>

}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	200001e4 	.word	0x200001e4

08001e98 <_ZN5motor13Error_HandlerEv>:


}

void motor::Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
  __disable_irq();
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <_ZN5motor13Error_HandlerEv+0x8>
	...

08001ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_SPI_MspInit+0x84>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12b      	bne.n	8001f6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_SPI_MspInit+0x88>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_SPI_MspInit+0x88>)
 8001f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_SPI_MspInit+0x88>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_SPI_MspInit+0x88>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_SPI_MspInit+0x88>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_SPI_MspInit+0x88>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f4e:	23e0      	movs	r3, #224	; 0xe0
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f5e:	2305      	movs	r3, #5
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	4805      	ldr	r0, [pc, #20]	; (8001f80 <HAL_SPI_MspInit+0x8c>)
 8001f6a:	f000 fed1 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40013000 	.word	0x40013000
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020000 	.word	0x40020000

08001f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a22      	ldr	r2, [pc, #136]	; (800201c <HAL_TIM_Base_MspInit+0x98>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_TIM_Base_MspInit+0x9c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a20      	ldr	r2, [pc, #128]	; (8002020 <HAL_TIM_Base_MspInit+0x9c>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_TIM_Base_MspInit+0x9c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001fb2:	e02e      	b.n	8002012 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_TIM_Base_MspInit+0xa0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10e      	bne.n	8001fdc <HAL_TIM_Base_MspInit+0x58>
      __HAL_RCC_TIM13_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_TIM_Base_MspInit+0x9c>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a16      	ldr	r2, [pc, #88]	; (8002020 <HAL_TIM_Base_MspInit+0x9c>)
 8001fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_TIM_Base_MspInit+0x9c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
}
 8001fda:	e01a      	b.n	8002012 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM14)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a11      	ldr	r2, [pc, #68]	; (8002028 <HAL_TIM_Base_MspInit+0xa4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d115      	bne.n	8002012 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_TIM_Base_MspInit+0x9c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <HAL_TIM_Base_MspInit+0x9c>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_TIM_Base_MspInit+0x9c>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2100      	movs	r1, #0
 8002006:	202d      	movs	r0, #45	; 0x2d
 8002008:	f000 fe4b 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800200c:	202d      	movs	r0, #45	; 0x2d
 800200e:	f000 fe64 	bl	8002cda <HAL_NVIC_EnableIRQ>
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40010000 	.word	0x40010000
 8002020:	40023800 	.word	0x40023800
 8002024:	40001c00 	.word	0x40001c00
 8002028:	40002000 	.word	0x40002000

0800202c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a12      	ldr	r2, [pc, #72]	; (8002094 <HAL_TIM_MspPostInit+0x68>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d11e      	bne.n	800208c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_TIM_MspPostInit+0x6c>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a10      	ldr	r2, [pc, #64]	; (8002098 <HAL_TIM_MspPostInit+0x6c>)
 8002058:	f043 0310 	orr.w	r3, r3, #16
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_TIM_MspPostInit+0x6c>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800206a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800206e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800207c:	2301      	movs	r3, #1
 800207e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	4619      	mov	r1, r3
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <HAL_TIM_MspPostInit+0x70>)
 8002088:	f000 fe42 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800208c:	bf00      	nop
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40010000 	.word	0x40010000
 8002098:	40023800 	.word	0x40023800
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a19      	ldr	r2, [pc, #100]	; (8002124 <HAL_UART_MspInit+0x84>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12c      	bne.n	800211c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a17      	ldr	r2, [pc, #92]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020cc:	f043 0310 	orr.w	r3, r3, #16
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a10      	ldr	r2, [pc, #64]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800210c:	2307      	movs	r3, #7
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <HAL_UART_MspInit+0x8c>)
 8002118:	f000 fdfa 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800211c:	bf00      	nop
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40011000 	.word	0x40011000
 8002128:	40023800 	.word	0x40023800
 800212c:	40020000 	.word	0x40020000

08002130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <NMI_Handler+0x4>

08002136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <HardFault_Handler+0x4>

0800213c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <MemManage_Handler+0x4>

08002142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <BusFault_Handler+0x4>

08002148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <UsageFault_Handler+0x4>

0800214e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217c:	f000 fa38 	bl	80025f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI0_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(Button_Pin);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <CAN1_RX0_IRQHandler>:

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
void CAN1_RX0_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <CAN1_RX0_IRQHandler+0x10>)
 800219a:	f000 fa6d 	bl	8002678 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000258 	.word	0x20000258

080021a8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80021ae:	f002 f9e3 	bl	8004578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000320 	.word	0x20000320

080021bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <_ZN7Machine4initEv>:
#include <processor.h>
#include <global.h>


void Machine::init()
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	HAL_Init();
 80021e4:	f000 f9b2 	bl	800254c <HAL_Init>
	Machine::Config_Clock();
 80021e8:	f000 f806 	bl	80021f8 <_ZN7Machine12Config_ClockEv>
	Machine::MX_TIM1_Init();
 80021ec:	f000 f89e 	bl	800232c <_ZN7Machine12MX_TIM1_InitEv>
	Machine::MX_TIM13_Init();
 80021f0:	f000 f870 	bl	80022d4 <_ZN7Machine13MX_TIM13_InitEv>
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_ZN7Machine12Config_ClockEv>:

void Machine::Config_Clock(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b094      	sub	sp, #80	; 0x50
 80021fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fe:	f107 0320 	add.w	r3, r7, #32
 8002202:	2230      	movs	r2, #48	; 0x30
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f003 fcf4 	bl	8005bf4 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <_ZN7Machine12Config_ClockEv+0xd4>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	4a29      	ldr	r2, [pc, #164]	; (80022cc <_ZN7Machine12Config_ClockEv+0xd4>)
 8002226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222a:	6413      	str	r3, [r2, #64]	; 0x40
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <_ZN7Machine12Config_ClockEv+0xd4>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002238:	2300      	movs	r3, #0
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <_ZN7Machine12Config_ClockEv+0xd8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002244:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <_ZN7Machine12Config_ClockEv+0xd8>)
 8002246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <_ZN7Machine12Config_ClockEv+0xd8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002258:	2302      	movs	r3, #2
 800225a:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800225c:	2301      	movs	r3, #1
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002260:	2310      	movs	r3, #16
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002264:	2300      	movs	r3, #0
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002268:	f107 0320 	add.w	r3, r7, #32
 800226c:	4618      	mov	r0, r3
 800226e:	f000 ff2d 	bl	80030cc <HAL_RCC_OscConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf14      	ite	ne
 8002278:	2301      	movne	r3, #1
 800227a:	2300      	moveq	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <_ZN7Machine12Config_ClockEv+0x8e>
	  {
	    Error_Handler();
 8002282:	f000 f933 	bl	80024ec <_ZN7Machine13Error_HandlerEv>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002286:	230f      	movs	r3, #15
 8002288:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 f98b 	bl	80035bc <HAL_RCC_ClockConfig>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <_ZN7Machine12Config_ClockEv+0xc2>
	  {
	    Error_Handler();
 80022b6:	f000 f919 	bl	80024ec <_ZN7Machine13Error_HandlerEv>
	  }
	  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2000      	movs	r0, #0
 80022c0:	f001 fa62 	bl	8003788 <HAL_RCC_MCOConfig>
}
 80022c4:	bf00      	nop
 80022c6:	3750      	adds	r7, #80	; 0x50
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000

080022d4 <_ZN7Machine13MX_TIM13_InitEv>:

void Machine::MX_TIM13_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <_ZN7Machine13MX_TIM13_InitEv+0x54>)
 80022dc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1600-1;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 80022e0:	f240 623f 	movw	r2, #1599	; 0x63f
 80022e4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 80022ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80022f2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002300:	4808      	ldr	r0, [pc, #32]	; (8002324 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8002302:	f001 fe99 	bl	8004038 <HAL_TIM_Base_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <_ZN7Machine13MX_TIM13_InitEv+0x46>
  {
    Error_Handler();
 8002316:	f000 f8e9 	bl	80024ec <_ZN7Machine13Error_HandlerEv>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  HAL_TIM_Base_Start(&htim13);
 800231a:	4802      	ldr	r0, [pc, #8]	; (8002324 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 800231c:	f001 fedc 	bl	80040d8 <HAL_TIM_Base_Start>
  /* USER CODE END TIM13_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200002d8 	.word	0x200002d8
 8002328:	40001c00 	.word	0x40001c00

0800232c <_ZN7Machine12MX_TIM1_InitEv>:

void Machine::MX_TIM1_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b096      	sub	sp, #88	; 0x58
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002332:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002340:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800234a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
 8002358:	611a      	str	r2, [r3, #16]
 800235a:	615a      	str	r2, [r3, #20]
 800235c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	2220      	movs	r2, #32
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f003 fc45 	bl	8005bf4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800236a:	4b5e      	ldr	r3, [pc, #376]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 800236c:	4a5e      	ldr	r2, [pc, #376]	; (80024e8 <_ZN7Machine12MX_TIM1_InitEv+0x1bc>)
 800236e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002370:	4b5c      	ldr	r3, [pc, #368]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002372:	2200      	movs	r2, #0
 8002374:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002376:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800237c:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 800237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002382:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002384:	4b57      	ldr	r3, [pc, #348]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800238a:	4b56      	ldr	r3, [pc, #344]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 800238c:	2200      	movs	r2, #0
 800238e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002390:	4b54      	ldr	r3, [pc, #336]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002396:	4853      	ldr	r0, [pc, #332]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002398:	f001 fe4e 	bl	8004038 <HAL_TIM_Base_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <_ZN7Machine12MX_TIM1_InitEv+0x84>
  {
    Error_Handler();
 80023ac:	f000 f89e 	bl	80024ec <_ZN7Machine13Error_HandlerEv>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023ba:	4619      	mov	r1, r3
 80023bc:	4849      	ldr	r0, [pc, #292]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 80023be:	f002 faa5 	bl	800490c <HAL_TIM_ConfigClockSource>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf14      	ite	ne
 80023c8:	2301      	movne	r3, #1
 80023ca:	2300      	moveq	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <_ZN7Machine12MX_TIM1_InitEv+0xaa>
  {
    Error_Handler();
 80023d2:	f000 f88b 	bl	80024ec <_ZN7Machine13Error_HandlerEv>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023d6:	4843      	ldr	r0, [pc, #268]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 80023d8:	f001 ffad 	bl	8004336 <HAL_TIM_PWM_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <_ZN7Machine12MX_TIM1_InitEv+0xc4>
  {
    Error_Handler();
 80023ec:	f000 f87e 	bl	80024ec <_ZN7Machine13Error_HandlerEv>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023fc:	4619      	mov	r1, r3
 80023fe:	4839      	ldr	r0, [pc, #228]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002400:	f002 fe84 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <_ZN7Machine12MX_TIM1_InitEv+0xec>
  {
    Error_Handler();
 8002414:	f000 f86a 	bl	80024ec <_ZN7Machine13Error_HandlerEv>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002418:	2360      	movs	r3, #96	; 0x60
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002430:	2300      	movs	r3, #0
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002438:	2200      	movs	r2, #0
 800243a:	4619      	mov	r1, r3
 800243c:	4829      	ldr	r0, [pc, #164]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 800243e:	f002 f9a3 	bl	8004788 <HAL_TIM_PWM_ConfigChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <_ZN7Machine12MX_TIM1_InitEv+0x12a>
  {
    Error_Handler();
 8002452:	f000 f84b 	bl	80024ec <_ZN7Machine13Error_HandlerEv>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245a:	2204      	movs	r2, #4
 800245c:	4619      	mov	r1, r3
 800245e:	4821      	ldr	r0, [pc, #132]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002460:	f002 f992 	bl	8004788 <HAL_TIM_PWM_ConfigChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf14      	ite	ne
 800246a:	2301      	movne	r3, #1
 800246c:	2300      	moveq	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <_ZN7Machine12MX_TIM1_InitEv+0x14c>
  {
    Error_Handler();
 8002474:	f000 f83a 	bl	80024ec <_ZN7Machine13Error_HandlerEv>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247c:	2208      	movs	r2, #8
 800247e:	4619      	mov	r1, r3
 8002480:	4818      	ldr	r0, [pc, #96]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002482:	f002 f981 	bl	8004788 <HAL_TIM_PWM_ConfigChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <_ZN7Machine12MX_TIM1_InitEv+0x16e>
  {
    Error_Handler();
 8002496:	f000 f829 	bl	80024ec <_ZN7Machine13Error_HandlerEv>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4809      	ldr	r0, [pc, #36]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 80024be:	f002 fea1 	bl	8005204 <HAL_TIMEx_ConfigBreakDeadTime>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <_ZN7Machine12MX_TIM1_InitEv+0x1aa>
  {
    Error_Handler();
 80024d2:	f000 f80b 	bl	80024ec <_ZN7Machine13Error_HandlerEv>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024d6:	4803      	ldr	r0, [pc, #12]	; (80024e4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 80024d8:	f7ff fda8 	bl	800202c <HAL_TIM_MspPostInit>

}
 80024dc:	bf00      	nop
 80024de:	3758      	adds	r7, #88	; 0x58
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000368 	.word	0x20000368
 80024e8:	40010000 	.word	0x40010000

080024ec <_ZN7Machine13Error_HandlerEv>:



void Machine::Error_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80024f0:	b672      	cpsid	i
}
 80024f2:	bf00      	nop
  __disable_irq();
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <_ZN7Machine13Error_HandlerEv+0x8>
	...

080024f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80024f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002530 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024fc:	480d      	ldr	r0, [pc, #52]	; (8002534 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024fe:	490e      	ldr	r1, [pc, #56]	; (8002538 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002500:	4a0e      	ldr	r2, [pc, #56]	; (800253c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002504:	e002      	b.n	800250c <LoopCopyDataInit>

08002506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250a:	3304      	adds	r3, #4

0800250c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800250c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002510:	d3f9      	bcc.n	8002506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002512:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002514:	4c0b      	ldr	r4, [pc, #44]	; (8002544 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002518:	e001      	b.n	800251e <LoopFillZerobss>

0800251a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800251c:	3204      	adds	r2, #4

0800251e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002520:	d3fb      	bcc.n	800251a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002522:	f7ff fe4b 	bl	80021bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002526:	f003 fb41 	bl	8005bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800252a:	f7fe ff99 	bl	8001460 <main>
  bx  lr    
 800252e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002530:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002538:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800253c:	080064c4 	.word	0x080064c4
  ldr r2, =_sbss
 8002540:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002544:	200003c8 	.word	0x200003c8

08002548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002548:	e7fe      	b.n	8002548 <ADC_IRQHandler>
	...

0800254c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0d      	ldr	r2, [pc, #52]	; (800258c <HAL_Init+0x40>)
 8002556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_Init+0x40>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_Init+0x40>)
 8002562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_Init+0x40>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a07      	ldr	r2, [pc, #28]	; (800258c <HAL_Init+0x40>)
 800256e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002574:	2003      	movs	r0, #3
 8002576:	f000 fb89 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257a:	200f      	movs	r0, #15
 800257c:	f000 f808 	bl	8002590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002580:	f7ff fc90 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023c00 	.word	0x40023c00

08002590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_InitTick+0x54>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_InitTick+0x58>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fba1 	bl	8002cf6 <HAL_SYSTICK_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00e      	b.n	80025dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b0f      	cmp	r3, #15
 80025c2:	d80a      	bhi.n	80025da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c4:	2200      	movs	r2, #0
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f000 fb69 	bl	8002ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d0:	4a06      	ldr	r2, [pc, #24]	; (80025ec <HAL_InitTick+0x5c>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000000 	.word	0x20000000
 80025e8:	20000008 	.word	0x20000008
 80025ec:	20000004 	.word	0x20000004

080025f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x20>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_IncTick+0x24>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_IncTick+0x24>)
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000008 	.word	0x20000008
 8002614:	200003c4 	.word	0x200003c4

08002618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTick;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_GetTick+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	200003c4 	.word	0x200003c4

08002630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff ffee 	bl	8002618 <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d005      	beq.n	8002656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_Delay+0x44>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002656:	bf00      	nop
 8002658:	f7ff ffde 	bl	8002618 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	d8f7      	bhi.n	8002658 <HAL_Delay+0x28>
  {
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000008 	.word	0x20000008

08002678 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002680:	2300      	movs	r3, #0
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d07c      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d023      	beq.n	8002710 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2201      	movs	r2, #1
 80026ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f983 	bl	80029e6 <HAL_CAN_TxMailbox0CompleteCallback>
 80026e0:	e016      	b.n	8002710 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
 80026f4:	e00c      	b.n	8002710 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
 8002708:	e002      	b.n	8002710 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f989 	bl	8002a22 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d024      	beq.n	8002764 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002722:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f963 	bl	80029fa <HAL_CAN_TxMailbox1CompleteCallback>
 8002734:	e016      	b.n	8002764 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
 8002748:	e00c      	b.n	8002764 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
 800275c:	e002      	b.n	8002764 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f969 	bl	8002a36 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d024      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002776:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f943 	bl	8002a0e <HAL_CAN_TxMailbox2CompleteCallback>
 8002788:	e016      	b.n	80027b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	e00c      	b.n	80027b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
 80027b0:	e002      	b.n	80027b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f949 	bl	8002a4a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00c      	beq.n	80027dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2210      	movs	r2, #16
 80027da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f93a 	bl	8002a72 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d009      	beq.n	800281c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f921 	bl	8002a5e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00c      	beq.n	8002840 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002836:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2210      	movs	r2, #16
 800283e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2208      	movs	r2, #8
 800285a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f91c 	bl	8002a9a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d009      	beq.n	8002880 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f903 	bl	8002a86 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2210      	movs	r2, #16
 800289a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f906 	bl	8002aae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00b      	beq.n	80028c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d006      	beq.n	80028c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2208      	movs	r2, #8
 80028bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f8ff 	bl	8002ac2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d07b      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d072      	beq.n	80029be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	f043 0302 	orr.w	r3, r3, #2
 800290e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002932:	2b00      	cmp	r3, #0
 8002934:	d043      	beq.n	80029be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800293c:	2b00      	cmp	r3, #0
 800293e:	d03e      	beq.n	80029be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002946:	2b60      	cmp	r3, #96	; 0x60
 8002948:	d02b      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x32a>
 800294a:	2b60      	cmp	r3, #96	; 0x60
 800294c:	d82e      	bhi.n	80029ac <HAL_CAN_IRQHandler+0x334>
 800294e:	2b50      	cmp	r3, #80	; 0x50
 8002950:	d022      	beq.n	8002998 <HAL_CAN_IRQHandler+0x320>
 8002952:	2b50      	cmp	r3, #80	; 0x50
 8002954:	d82a      	bhi.n	80029ac <HAL_CAN_IRQHandler+0x334>
 8002956:	2b40      	cmp	r3, #64	; 0x40
 8002958:	d019      	beq.n	800298e <HAL_CAN_IRQHandler+0x316>
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d826      	bhi.n	80029ac <HAL_CAN_IRQHandler+0x334>
 800295e:	2b30      	cmp	r3, #48	; 0x30
 8002960:	d010      	beq.n	8002984 <HAL_CAN_IRQHandler+0x30c>
 8002962:	2b30      	cmp	r3, #48	; 0x30
 8002964:	d822      	bhi.n	80029ac <HAL_CAN_IRQHandler+0x334>
 8002966:	2b10      	cmp	r3, #16
 8002968:	d002      	beq.n	8002970 <HAL_CAN_IRQHandler+0x2f8>
 800296a:	2b20      	cmp	r3, #32
 800296c:	d005      	beq.n	800297a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800296e:	e01d      	b.n	80029ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	f043 0308 	orr.w	r3, r3, #8
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002978:	e019      	b.n	80029ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	f043 0310 	orr.w	r3, r3, #16
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002982:	e014      	b.n	80029ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	f043 0320 	orr.w	r3, r3, #32
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800298c:	e00f      	b.n	80029ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002996:	e00a      	b.n	80029ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029a0:	e005      	b.n	80029ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029aa:	e000      	b.n	80029ae <HAL_CAN_IRQHandler+0x336>
            break;
 80029ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2204      	movs	r2, #4
 80029c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f87c 	bl	8002ad6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029de:	bf00      	nop
 80029e0:	3728      	adds	r7, #40	; 0x28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db0b      	blt.n	8002b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <__NVIC_EnableIRQ+0x38>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2001      	movs	r0, #1
 8002b72:	fa00 f202 	lsl.w	r2, r0, r2
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000e100 	.word	0xe000e100

08002b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	db0a      	blt.n	8002bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	490c      	ldr	r1, [pc, #48]	; (8002bd8 <__NVIC_SetPriority+0x4c>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	0112      	lsls	r2, r2, #4
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4908      	ldr	r1, [pc, #32]	; (8002bdc <__NVIC_SetPriority+0x50>)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3b04      	subs	r3, #4
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	440b      	add	r3, r1
 8002bca:	761a      	strb	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e100 	.word	0xe000e100
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f1c3 0307 	rsb	r3, r3, #7
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	bf28      	it	cs
 8002bfe:	2304      	movcs	r3, #4
 8002c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d902      	bls.n	8002c10 <NVIC_EncodePriority+0x30>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3b03      	subs	r3, #3
 8002c0e:	e000      	b.n	8002c12 <NVIC_EncodePriority+0x32>
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43d9      	mvns	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	4313      	orrs	r3, r2
         );
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c58:	d301      	bcc.n	8002c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <SysTick_Config+0x40>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c66:	210f      	movs	r1, #15
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f7ff ff8e 	bl	8002b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <SysTick_Config+0x40>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <SysTick_Config+0x40>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff29 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb4:	f7ff ff3e 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff ff8e 	bl	8002be0 <NVIC_EncodePriority>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff5d 	bl	8002b8c <__NVIC_SetPriority>
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff31 	bl	8002b50 <__NVIC_EnableIRQ>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ffa2 	bl	8002c48 <SysTick_Config>
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e177      	b.n	800301c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	f040 8166 	bne.w	8003016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d005      	beq.n	8002d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d130      	bne.n	8002dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 0201 	and.w	r2, r3, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d017      	beq.n	8002e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d123      	bne.n	8002e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80c0 	beq.w	8003016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b66      	ldr	r3, [pc, #408]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	4a65      	ldr	r2, [pc, #404]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea6:	4b63      	ldr	r3, [pc, #396]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb2:	4a61      	ldr	r2, [pc, #388]	; (8003038 <HAL_GPIO_Init+0x328>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	; (800303c <HAL_GPIO_Init+0x32c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d037      	beq.n	8002f4e <HAL_GPIO_Init+0x23e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a57      	ldr	r2, [pc, #348]	; (8003040 <HAL_GPIO_Init+0x330>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d031      	beq.n	8002f4a <HAL_GPIO_Init+0x23a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a56      	ldr	r2, [pc, #344]	; (8003044 <HAL_GPIO_Init+0x334>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02b      	beq.n	8002f46 <HAL_GPIO_Init+0x236>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a55      	ldr	r2, [pc, #340]	; (8003048 <HAL_GPIO_Init+0x338>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d025      	beq.n	8002f42 <HAL_GPIO_Init+0x232>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a54      	ldr	r2, [pc, #336]	; (800304c <HAL_GPIO_Init+0x33c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01f      	beq.n	8002f3e <HAL_GPIO_Init+0x22e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a53      	ldr	r2, [pc, #332]	; (8003050 <HAL_GPIO_Init+0x340>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d019      	beq.n	8002f3a <HAL_GPIO_Init+0x22a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_GPIO_Init+0x344>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x226>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a51      	ldr	r2, [pc, #324]	; (8003058 <HAL_GPIO_Init+0x348>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x222>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a50      	ldr	r2, [pc, #320]	; (800305c <HAL_GPIO_Init+0x34c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x21e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x21a>
 8002f26:	2309      	movs	r3, #9
 8002f28:	e012      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f2a:	230a      	movs	r3, #10
 8002f2c:	e010      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e00e      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e00c      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f36:	2306      	movs	r3, #6
 8002f38:	e00a      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	e008      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e004      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f002 0203 	and.w	r2, r2, #3
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	4093      	lsls	r3, r2
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f60:	4935      	ldr	r1, [pc, #212]	; (8003038 <HAL_GPIO_Init+0x328>)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	3302      	adds	r3, #2
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f92:	4a34      	ldr	r2, [pc, #208]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f98:	4b32      	ldr	r3, [pc, #200]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fbc:	4a29      	ldr	r2, [pc, #164]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fc2:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <HAL_GPIO_Init+0x354>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3301      	adds	r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b0f      	cmp	r3, #15
 8003020:	f67f ae84 	bls.w	8002d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800
 8003038:	40013800 	.word	0x40013800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400
 8003044:	40020800 	.word	0x40020800
 8003048:	40020c00 	.word	0x40020c00
 800304c:	40021000 	.word	0x40021000
 8003050:	40021400 	.word	0x40021400
 8003054:	40021800 	.word	0x40021800
 8003058:	40021c00 	.word	0x40021c00
 800305c:	40022000 	.word	0x40022000
 8003060:	40022400 	.word	0x40022400
 8003064:	40013c00 	.word	0x40013c00

08003068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	887b      	ldrh	r3, [r7, #2]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e001      	b.n	800308a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b4:	e003      	b.n	80030be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e267      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d075      	beq.n	80031d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ea:	4b88      	ldr	r3, [pc, #544]	; (800330c <HAL_RCC_OscConfig+0x240>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d00c      	beq.n	8003110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f6:	4b85      	ldr	r3, [pc, #532]	; (800330c <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d112      	bne.n	8003128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003102:	4b82      	ldr	r3, [pc, #520]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310e:	d10b      	bne.n	8003128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	4b7e      	ldr	r3, [pc, #504]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d05b      	beq.n	80031d4 <HAL_RCC_OscConfig+0x108>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d157      	bne.n	80031d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e242      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003130:	d106      	bne.n	8003140 <HAL_RCC_OscConfig+0x74>
 8003132:	4b76      	ldr	r3, [pc, #472]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a75      	ldr	r2, [pc, #468]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e01d      	b.n	800317c <HAL_RCC_OscConfig+0xb0>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x98>
 800314a:	4b70      	ldr	r3, [pc, #448]	; (800330c <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6f      	ldr	r2, [pc, #444]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6c      	ldr	r2, [pc, #432]	; (800330c <HAL_RCC_OscConfig+0x240>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0xb0>
 8003164:	4b69      	ldr	r3, [pc, #420]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a68      	ldr	r2, [pc, #416]	; (800330c <HAL_RCC_OscConfig+0x240>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b66      	ldr	r3, [pc, #408]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a65      	ldr	r2, [pc, #404]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff fa48 	bl	8002618 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7ff fa44 	bl	8002618 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e207      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b5b      	ldr	r3, [pc, #364]	; (800330c <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0xc0>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7ff fa34 	bl	8002618 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b4:	f7ff fa30 	bl	8002618 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1f3      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	4b51      	ldr	r3, [pc, #324]	; (800330c <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0xe8>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d063      	beq.n	80032aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031e2:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCC_OscConfig+0x240>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d11c      	bne.n	8003234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fa:	4b44      	ldr	r3, [pc, #272]	; (800330c <HAL_RCC_OscConfig+0x240>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d116      	bne.n	8003234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	4b41      	ldr	r3, [pc, #260]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_RCC_OscConfig+0x152>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e1c7      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321e:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4937      	ldr	r1, [pc, #220]	; (800330c <HAL_RCC_OscConfig+0x240>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003232:	e03a      	b.n	80032aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800323c:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_RCC_OscConfig+0x244>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7ff f9e9 	bl	8002618 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324a:	f7ff f9e5 	bl	8002618 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e1a8      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <HAL_RCC_OscConfig+0x240>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4925      	ldr	r1, [pc, #148]	; (800330c <HAL_RCC_OscConfig+0x240>)
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]
 800327c:	e015      	b.n	80032aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_OscConfig+0x244>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7ff f9c8 	bl	8002618 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328c:	f7ff f9c4 	bl	8002618 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e187      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d036      	beq.n	8003324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d016      	beq.n	80032ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_RCC_OscConfig+0x248>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7ff f9a8 	bl	8002618 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032cc:	f7ff f9a4 	bl	8002618 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e167      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_OscConfig+0x240>)
 80032e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x200>
 80032ea:	e01b      	b.n	8003324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_RCC_OscConfig+0x248>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f2:	f7ff f991 	bl	8002618 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	e00e      	b.n	8003318 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032fa:	f7ff f98d 	bl	8002618 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d907      	bls.n	8003318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e150      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
 800330c:	40023800 	.word	0x40023800
 8003310:	42470000 	.word	0x42470000
 8003314:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003318:	4b88      	ldr	r3, [pc, #544]	; (800353c <HAL_RCC_OscConfig+0x470>)
 800331a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ea      	bne.n	80032fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8097 	beq.w	8003460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003336:	4b81      	ldr	r3, [pc, #516]	; (800353c <HAL_RCC_OscConfig+0x470>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	4b7d      	ldr	r3, [pc, #500]	; (800353c <HAL_RCC_OscConfig+0x470>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a7c      	ldr	r2, [pc, #496]	; (800353c <HAL_RCC_OscConfig+0x470>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003350:	6413      	str	r3, [r2, #64]	; 0x40
 8003352:	4b7a      	ldr	r3, [pc, #488]	; (800353c <HAL_RCC_OscConfig+0x470>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335e:	2301      	movs	r3, #1
 8003360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003362:	4b77      	ldr	r3, [pc, #476]	; (8003540 <HAL_RCC_OscConfig+0x474>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d118      	bne.n	80033a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336e:	4b74      	ldr	r3, [pc, #464]	; (8003540 <HAL_RCC_OscConfig+0x474>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a73      	ldr	r2, [pc, #460]	; (8003540 <HAL_RCC_OscConfig+0x474>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337a:	f7ff f94d 	bl	8002618 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7ff f949 	bl	8002618 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e10c      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	4b6a      	ldr	r3, [pc, #424]	; (8003540 <HAL_RCC_OscConfig+0x474>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x2ea>
 80033a8:	4b64      	ldr	r3, [pc, #400]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a63      	ldr	r2, [pc, #396]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	e01c      	b.n	80033f0 <HAL_RCC_OscConfig+0x324>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x30c>
 80033be:	4b5f      	ldr	r3, [pc, #380]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	4a5e      	ldr	r2, [pc, #376]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ca:	4b5c      	ldr	r3, [pc, #368]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	4a5b      	ldr	r2, [pc, #364]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6713      	str	r3, [r2, #112]	; 0x70
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0x324>
 80033d8:	4b58      	ldr	r3, [pc, #352]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4a57      	ldr	r2, [pc, #348]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	4b55      	ldr	r3, [pc, #340]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a54      	ldr	r2, [pc, #336]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80033ea:	f023 0304 	bic.w	r3, r3, #4
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7ff f90e 	bl	8002618 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7ff f90a 	bl	8002618 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0cb      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003416:	4b49      	ldr	r3, [pc, #292]	; (800353c <HAL_RCC_OscConfig+0x470>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0ee      	beq.n	8003400 <HAL_RCC_OscConfig+0x334>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003424:	f7ff f8f8 	bl	8002618 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342a:	e00a      	b.n	8003442 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7ff f8f4 	bl	8002618 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e0b5      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003442:	4b3e      	ldr	r3, [pc, #248]	; (800353c <HAL_RCC_OscConfig+0x470>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ee      	bne.n	800342c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003454:	4b39      	ldr	r3, [pc, #228]	; (800353c <HAL_RCC_OscConfig+0x470>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	4a38      	ldr	r2, [pc, #224]	; (800353c <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80a1 	beq.w	80035ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800346a:	4b34      	ldr	r3, [pc, #208]	; (800353c <HAL_RCC_OscConfig+0x470>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b08      	cmp	r3, #8
 8003474:	d05c      	beq.n	8003530 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d141      	bne.n	8003502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_RCC_OscConfig+0x478>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7ff f8c8 	bl	8002618 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348c:	f7ff f8c4 	bl	8002618 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e087      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	3b01      	subs	r3, #1
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	491b      	ldr	r1, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_RCC_OscConfig+0x478>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7ff f89d 	bl	8002618 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e2:	f7ff f899 	bl	8002618 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e05c      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f4:	4b11      	ldr	r3, [pc, #68]	; (800353c <HAL_RCC_OscConfig+0x470>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x416>
 8003500:	e054      	b.n	80035ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_RCC_OscConfig+0x478>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7ff f886 	bl	8002618 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003510:	f7ff f882 	bl	8002618 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e045      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_RCC_OscConfig+0x470>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x444>
 800352e:	e03d      	b.n	80035ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d107      	bne.n	8003548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e038      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
 800353c:	40023800 	.word	0x40023800
 8003540:	40007000 	.word	0x40007000
 8003544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x4ec>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d028      	beq.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d121      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d11a      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003578:	4013      	ands	r3, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800357e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003580:	4293      	cmp	r3, r2
 8003582:	d111      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	3b01      	subs	r3, #1
 8003592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800

080035bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0cc      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d0:	4b68      	ldr	r3, [pc, #416]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d90c      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b65      	ldr	r3, [pc, #404]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b63      	ldr	r3, [pc, #396]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0b8      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d020      	beq.n	8003646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003610:	4b59      	ldr	r3, [pc, #356]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a58      	ldr	r2, [pc, #352]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800361a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003628:	4b53      	ldr	r3, [pc, #332]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a52      	ldr	r2, [pc, #328]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003634:	4b50      	ldr	r3, [pc, #320]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	494d      	ldr	r1, [pc, #308]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d044      	beq.n	80036dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	4b47      	ldr	r3, [pc, #284]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d119      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e07f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d003      	beq.n	800367a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003676:	2b03      	cmp	r3, #3
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367a:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e06f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e067      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369a:	4b37      	ldr	r3, [pc, #220]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4934      	ldr	r1, [pc, #208]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ac:	f7fe ffb4 	bl	8002618 <HAL_GetTick>
 80036b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b4:	f7fe ffb0 	bl	8002618 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e04f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 020c 	and.w	r2, r3, #12
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	429a      	cmp	r2, r3
 80036da:	d1eb      	bne.n	80036b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036dc:	4b25      	ldr	r3, [pc, #148]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d20c      	bcs.n	8003704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b22      	ldr	r3, [pc, #136]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e032      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003710:	4b19      	ldr	r3, [pc, #100]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4916      	ldr	r1, [pc, #88]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	490e      	ldr	r1, [pc, #56]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003742:	f000 f889 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8003746:	4602      	mov	r2, r0
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	490a      	ldr	r1, [pc, #40]	; (800377c <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	5ccb      	ldrb	r3, [r1, r3]
 8003756:	fa22 f303 	lsr.w	r3, r2, r3
 800375a:	4a09      	ldr	r2, [pc, #36]	; (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe ff14 	bl	8002590 <HAL_InitTick>

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023c00 	.word	0x40023c00
 8003778:	40023800 	.word	0x40023800
 800377c:	08006398 	.word	0x08006398
 8003780:	20000000 	.word	0x20000000
 8003784:	20000004 	.word	0x20000004

08003788 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08c      	sub	sp, #48	; 0x30
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d129      	bne.n	80037ee <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	4b2b      	ldr	r3, [pc, #172]	; (800384c <HAL_RCC_MCOConfig+0xc4>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	4a2a      	ldr	r2, [pc, #168]	; (800384c <HAL_RCC_MCOConfig+0xc4>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6313      	str	r3, [r2, #48]	; 0x30
 80037aa:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_RCC_MCOConfig+0xc4>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80037b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037bc:	2302      	movs	r3, #2
 80037be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c0:	2303      	movs	r3, #3
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80037cc:	f107 031c 	add.w	r3, r7, #28
 80037d0:	4619      	mov	r1, r3
 80037d2:	481f      	ldr	r0, [pc, #124]	; (8003850 <HAL_RCC_MCOConfig+0xc8>)
 80037d4:	f7ff fa9c 	bl	8002d10 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80037d8:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_RCC_MCOConfig+0xc4>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	4919      	ldr	r1, [pc, #100]	; (800384c <HAL_RCC_MCOConfig+0xc4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80037ec:	e029      	b.n	8003842 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	4b16      	ldr	r3, [pc, #88]	; (800384c <HAL_RCC_MCOConfig+0xc4>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a15      	ldr	r2, [pc, #84]	; (800384c <HAL_RCC_MCOConfig+0xc4>)
 80037f8:	f043 0304 	orr.w	r3, r3, #4
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b13      	ldr	r3, [pc, #76]	; (800384c <HAL_RCC_MCOConfig+0xc4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800380a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800380e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003814:	2303      	movs	r3, #3
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800381c:	2300      	movs	r3, #0
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003820:	f107 031c 	add.w	r3, r7, #28
 8003824:	4619      	mov	r1, r3
 8003826:	480b      	ldr	r0, [pc, #44]	; (8003854 <HAL_RCC_MCOConfig+0xcc>)
 8003828:	f7ff fa72 	bl	8002d10 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800382c:	4b07      	ldr	r3, [pc, #28]	; (800384c <HAL_RCC_MCOConfig+0xc4>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	00d9      	lsls	r1, r3, #3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	430b      	orrs	r3, r1
 800383c:	4903      	ldr	r1, [pc, #12]	; (800384c <HAL_RCC_MCOConfig+0xc4>)
 800383e:	4313      	orrs	r3, r2
 8003840:	608b      	str	r3, [r1, #8]
}
 8003842:	bf00      	nop
 8003844:	3730      	adds	r7, #48	; 0x30
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800
 8003850:	40020000 	.word	0x40020000
 8003854:	40020800 	.word	0x40020800

08003858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800385c:	b090      	sub	sp, #64	; 0x40
 800385e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
 8003864:	2300      	movs	r3, #0
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003868:	2300      	movs	r3, #0
 800386a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003870:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	2b08      	cmp	r3, #8
 800387a:	d00d      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x40>
 800387c:	2b08      	cmp	r3, #8
 800387e:	f200 80a1 	bhi.w	80039c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x34>
 8003886:	2b04      	cmp	r3, #4
 8003888:	d003      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x3a>
 800388a:	e09b      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b53      	ldr	r3, [pc, #332]	; (80039dc <HAL_RCC_GetSysClockFreq+0x184>)
 800388e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003890:	e09b      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003892:	4b53      	ldr	r3, [pc, #332]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003894:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003896:	e098      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003898:	4b4f      	ldr	r3, [pc, #316]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a2:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d028      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ae:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	099b      	lsrs	r3, r3, #6
 80038b4:	2200      	movs	r2, #0
 80038b6:	623b      	str	r3, [r7, #32]
 80038b8:	627a      	str	r2, [r7, #36]	; 0x24
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038c0:	2100      	movs	r1, #0
 80038c2:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038c4:	fb03 f201 	mul.w	r2, r3, r1
 80038c8:	2300      	movs	r3, #0
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	4a43      	ldr	r2, [pc, #268]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038d2:	fba0 1202 	umull	r1, r2, r0, r2
 80038d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d8:	460a      	mov	r2, r1
 80038da:	62ba      	str	r2, [r7, #40]	; 0x28
 80038dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038de:	4413      	add	r3, r2
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	2200      	movs	r2, #0
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	61fa      	str	r2, [r7, #28]
 80038ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038f2:	f7fc fc83 	bl	80001fc <__aeabi_uldivmod>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4613      	mov	r3, r2
 80038fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038fe:	e053      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003900:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	2200      	movs	r2, #0
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	617a      	str	r2, [r7, #20]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003912:	f04f 0b00 	mov.w	fp, #0
 8003916:	4652      	mov	r2, sl
 8003918:	465b      	mov	r3, fp
 800391a:	f04f 0000 	mov.w	r0, #0
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	0159      	lsls	r1, r3, #5
 8003924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003928:	0150      	lsls	r0, r2, #5
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	ebb2 080a 	subs.w	r8, r2, sl
 8003932:	eb63 090b 	sbc.w	r9, r3, fp
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003942:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003946:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800394a:	ebb2 0408 	subs.w	r4, r2, r8
 800394e:	eb63 0509 	sbc.w	r5, r3, r9
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	00eb      	lsls	r3, r5, #3
 800395c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003960:	00e2      	lsls	r2, r4, #3
 8003962:	4614      	mov	r4, r2
 8003964:	461d      	mov	r5, r3
 8003966:	eb14 030a 	adds.w	r3, r4, sl
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	eb45 030b 	adc.w	r3, r5, fp
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800397e:	4629      	mov	r1, r5
 8003980:	028b      	lsls	r3, r1, #10
 8003982:	4621      	mov	r1, r4
 8003984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003988:	4621      	mov	r1, r4
 800398a:	028a      	lsls	r2, r1, #10
 800398c:	4610      	mov	r0, r2
 800398e:	4619      	mov	r1, r3
 8003990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003992:	2200      	movs	r2, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	60fa      	str	r2, [r7, #12]
 8003998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800399c:	f7fc fc2e 	bl	80001fc <__aeabi_uldivmod>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4613      	mov	r3, r2
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	3301      	adds	r3, #1
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039c2:	e002      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCC_GetSysClockFreq+0x184>)
 80039c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3740      	adds	r7, #64	; 0x40
 80039d0:	46bd      	mov	sp, r7
 80039d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	00f42400 	.word	0x00f42400
 80039e0:	017d7840 	.word	0x017d7840

080039e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000000 	.word	0x20000000

080039fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a00:	f7ff fff0 	bl	80039e4 <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	0a9b      	lsrs	r3, r3, #10
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4903      	ldr	r1, [pc, #12]	; (8003a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	080063a8 	.word	0x080063a8

08003a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a28:	f7ff ffdc 	bl	80039e4 <HAL_RCC_GetHCLKFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	0b5b      	lsrs	r3, r3, #13
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4903      	ldr	r1, [pc, #12]	; (8003a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40023800 	.word	0x40023800
 8003a48:	080063a8 	.word	0x080063a8

08003a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07b      	b.n	8003b56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a6e:	d009      	beq.n	8003a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	61da      	str	r2, [r3, #28]
 8003a76:	e005      	b.n	8003a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe fa28 	bl	8001ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b08:	ea42 0103 	orr.w	r1, r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	f003 0104 	and.w	r1, r3, #4
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	f003 0210 	and.w	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b08c      	sub	sp, #48	; 0x30
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x26>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e18a      	b.n	8003e9a <HAL_SPI_TransmitReceive+0x33c>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b8c:	f7fe fd44 	bl	8002618 <HAL_GetTick>
 8003b90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d00f      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x70>
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb4:	d107      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d103      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x68>
 8003bbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d003      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bcc:	e15b      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_SPI_TransmitReceive+0x82>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_SPI_TransmitReceive+0x82>
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d103      	bne.n	8003be8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003be6:	e14e      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d003      	beq.n	8003bfc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2205      	movs	r2, #5
 8003bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	887a      	ldrh	r2, [r7, #2]
 8003c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	887a      	ldrh	r2, [r7, #2]
 8003c12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	887a      	ldrh	r2, [r7, #2]
 8003c1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d007      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c58:	d178      	bne.n	8003d4c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x10a>
 8003c62:	8b7b      	ldrh	r3, [r7, #26]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d166      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c8c:	e053      	b.n	8003d36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x176>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_SPI_TransmitReceive+0x176>
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d113      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	881a      	ldrh	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	1c9a      	adds	r2, r3, #2
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d119      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x1b8>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d014      	beq.n	8003d16 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	b292      	uxth	r2, r2
 8003cf8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	1c9a      	adds	r2, r3, #2
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d12:	2301      	movs	r3, #1
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d16:	f7fe fc7f 	bl	8002618 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d807      	bhi.n	8003d36 <HAL_SPI_TransmitReceive+0x1d8>
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d003      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d34:	e0a7      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1a6      	bne.n	8003c8e <HAL_SPI_TransmitReceive+0x130>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1a1      	bne.n	8003c8e <HAL_SPI_TransmitReceive+0x130>
 8003d4a:	e07c      	b.n	8003e46 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_SPI_TransmitReceive+0x1fc>
 8003d54:	8b7b      	ldrh	r3, [r7, #26]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d16b      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	7812      	ldrb	r2, [r2, #0]
 8003d66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d80:	e057      	b.n	8003e32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d11c      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x26c>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d017      	beq.n	8003dca <HAL_SPI_TransmitReceive+0x26c>
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d114      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	7812      	ldrb	r2, [r2, #0]
 8003dac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d119      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x2ae>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d014      	beq.n	8003e0c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e0c:	f7fe fc04 	bl	8002618 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d803      	bhi.n	8003e24 <HAL_SPI_TransmitReceive+0x2c6>
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d102      	bne.n	8003e2a <HAL_SPI_TransmitReceive+0x2cc>
 8003e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d103      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e30:	e029      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1a2      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x224>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d19d      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f8b2 	bl	8003fb4 <SPI_EndRxTxTransaction>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d006      	beq.n	8003e64 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e62:	e010      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	e000      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3730      	adds	r7, #48	; 0x30
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003eb4:	f7fe fbb0 	bl	8002618 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ec4:	f7fe fba8 	bl	8002618 <HAL_GetTick>
 8003ec8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eca:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	015b      	lsls	r3, r3, #5
 8003ed0:	0d1b      	lsrs	r3, r3, #20
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	fb02 f303 	mul.w	r3, r2, r3
 8003ed8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eda:	e054      	b.n	8003f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d050      	beq.n	8003f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ee4:	f7fe fb98 	bl	8002618 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d902      	bls.n	8003efa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d13d      	bne.n	8003f76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f12:	d111      	bne.n	8003f38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1c:	d004      	beq.n	8003f28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f26:	d107      	bne.n	8003f38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f40:	d10f      	bne.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e017      	b.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	bf0c      	ite	eq
 8003f96:	2301      	moveq	r3, #1
 8003f98:	2300      	movne	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d19b      	bne.n	8003edc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000000 	.word	0x20000000

08003fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <SPI_EndRxTxTransaction+0x7c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1b      	ldr	r2, [pc, #108]	; (8004034 <SPI_EndRxTxTransaction+0x80>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	0d5b      	lsrs	r3, r3, #21
 8003fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fde:	d112      	bne.n	8004006 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7ff ff5a 	bl	8003ea4 <SPI_WaitFlagStateUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e00f      	b.n	8004026 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3b01      	subs	r3, #1
 8004010:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d0f2      	beq.n	8004006 <SPI_EndRxTxTransaction+0x52>
 8004020:	e000      	b.n	8004024 <SPI_EndRxTxTransaction+0x70>
        break;
 8004022:	bf00      	nop
  }

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000000 	.word	0x20000000
 8004034:	165e9f81 	.word	0x165e9f81

08004038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e041      	b.n	80040ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fd ff90 	bl	8001f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 fd38 	bl	8004aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e046      	b.n	800417e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a23      	ldr	r2, [pc, #140]	; (800418c <HAL_TIM_Base_Start+0xb4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d022      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d01d      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1f      	ldr	r2, [pc, #124]	; (8004190 <HAL_TIM_Base_Start+0xb8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d018      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <HAL_TIM_Base_Start+0xbc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1c      	ldr	r2, [pc, #112]	; (8004198 <HAL_TIM_Base_Start+0xc0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1b      	ldr	r2, [pc, #108]	; (800419c <HAL_TIM_Base_Start+0xc4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d009      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a19      	ldr	r2, [pc, #100]	; (80041a0 <HAL_TIM_Base_Start+0xc8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <HAL_TIM_Base_Start+0xcc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d111      	bne.n	800416c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d010      	beq.n	800417c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416a:	e007      	b.n	800417c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40010000 	.word	0x40010000
 8004190:	40000400 	.word	0x40000400
 8004194:	40000800 	.word	0x40000800
 8004198:	40000c00 	.word	0x40000c00
 800419c:	40010400 	.word	0x40010400
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40001800 	.word	0x40001800

080041a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6a1a      	ldr	r2, [r3, #32]
 80041b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10f      	bne.n	80041e0 <HAL_TIM_Base_Stop+0x38>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6a1a      	ldr	r2, [r3, #32]
 80041c6:	f240 4344 	movw	r3, #1092	; 0x444
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_TIM_Base_Stop+0x38>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d001      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e04e      	b.n	80042ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a23      	ldr	r2, [pc, #140]	; (80042bc <HAL_TIM_Base_Start_IT+0xc4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d022      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423a:	d01d      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d018      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00e      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d111      	bne.n	800429c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b06      	cmp	r3, #6
 8004288:	d010      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429a:	e007      	b.n	80042ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40010000 	.word	0x40010000
 80042c0:	40000400 	.word	0x40000400
 80042c4:	40000800 	.word	0x40000800
 80042c8:	40000c00 	.word	0x40000c00
 80042cc:	40010400 	.word	0x40010400
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40001800 	.word	0x40001800

080042d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6a1a      	ldr	r2, [r3, #32]
 80042f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10f      	bne.n	8004320 <HAL_TIM_Base_Stop_IT+0x48>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a1a      	ldr	r2, [r3, #32]
 8004306:	f240 4344 	movw	r3, #1092	; 0x444
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d107      	bne.n	8004320 <HAL_TIM_Base_Stop_IT+0x48>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e041      	b.n	80043cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f839 	bl	80043d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f000 fbb9 	bl	8004aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <HAL_TIM_PWM_Start+0x24>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e022      	b.n	8004452 <HAL_TIM_PWM_Start+0x6a>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b04      	cmp	r3, #4
 8004410:	d109      	bne.n	8004426 <HAL_TIM_PWM_Start+0x3e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	e015      	b.n	8004452 <HAL_TIM_PWM_Start+0x6a>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d109      	bne.n	8004440 <HAL_TIM_PWM_Start+0x58>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	bf14      	ite	ne
 8004438:	2301      	movne	r3, #1
 800443a:	2300      	moveq	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	e008      	b.n	8004452 <HAL_TIM_PWM_Start+0x6a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e07c      	b.n	8004554 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Start+0x82>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004468:	e013      	b.n	8004492 <HAL_TIM_PWM_Start+0xaa>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d104      	bne.n	800447a <HAL_TIM_PWM_Start+0x92>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004478:	e00b      	b.n	8004492 <HAL_TIM_PWM_Start+0xaa>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d104      	bne.n	800448a <HAL_TIM_PWM_Start+0xa2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004488:	e003      	b.n	8004492 <HAL_TIM_PWM_Start+0xaa>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2202      	movs	r2, #2
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2201      	movs	r2, #1
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fe10 	bl	80050c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2d      	ldr	r2, [pc, #180]	; (800455c <HAL_TIM_PWM_Start+0x174>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d004      	beq.n	80044b4 <HAL_TIM_PWM_Start+0xcc>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <HAL_TIM_PWM_Start+0x178>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d101      	bne.n	80044b8 <HAL_TIM_PWM_Start+0xd0>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_TIM_PWM_Start+0xd2>
 80044b8:	2300      	movs	r3, #0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a22      	ldr	r2, [pc, #136]	; (800455c <HAL_TIM_PWM_Start+0x174>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_TIM_PWM_Start+0x136>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e0:	d01d      	beq.n	800451e <HAL_TIM_PWM_Start+0x136>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <HAL_TIM_PWM_Start+0x17c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d018      	beq.n	800451e <HAL_TIM_PWM_Start+0x136>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1d      	ldr	r2, [pc, #116]	; (8004568 <HAL_TIM_PWM_Start+0x180>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_TIM_PWM_Start+0x136>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1c      	ldr	r2, [pc, #112]	; (800456c <HAL_TIM_PWM_Start+0x184>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <HAL_TIM_PWM_Start+0x136>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a16      	ldr	r2, [pc, #88]	; (8004560 <HAL_TIM_PWM_Start+0x178>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_TIM_PWM_Start+0x136>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a18      	ldr	r2, [pc, #96]	; (8004570 <HAL_TIM_PWM_Start+0x188>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_TIM_PWM_Start+0x136>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a16      	ldr	r2, [pc, #88]	; (8004574 <HAL_TIM_PWM_Start+0x18c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d111      	bne.n	8004542 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b06      	cmp	r3, #6
 800452e:	d010      	beq.n	8004552 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004540:	e007      	b.n	8004552 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40010000 	.word	0x40010000
 8004560:	40010400 	.word	0x40010400
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40014000 	.word	0x40014000
 8004574:	40001800 	.word	0x40001800

08004578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d122      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d11b      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0202 	mvn.w	r2, #2
 80045a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa77 	bl	8004aae <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fa69 	bl	8004a9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fa7a 	bl	8004ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d122      	bne.n	8004628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0204 	mvn.w	r2, #4
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa4d 	bl	8004aae <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa3f 	bl	8004a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fa50 	bl	8004ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b08      	cmp	r3, #8
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b08      	cmp	r3, #8
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0208 	mvn.w	r2, #8
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2204      	movs	r2, #4
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fa23 	bl	8004aae <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa15 	bl	8004a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fa26 	bl	8004ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b10      	cmp	r3, #16
 8004688:	d122      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b10      	cmp	r3, #16
 8004696:	d11b      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0210 	mvn.w	r2, #16
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2208      	movs	r2, #8
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f9f9 	bl	8004aae <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9eb 	bl	8004a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f9fc 	bl	8004ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d10e      	bne.n	80046fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0201 	mvn.w	r2, #1
 80046f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc ff86 	bl	8001608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004706:	2b80      	cmp	r3, #128	; 0x80
 8004708:	d10e      	bne.n	8004728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	2b80      	cmp	r3, #128	; 0x80
 8004716:	d107      	bne.n	8004728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fdca 	bl	80052bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d10e      	bne.n	8004754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d107      	bne.n	8004754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f9c1 	bl	8004ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b20      	cmp	r3, #32
 8004760:	d10e      	bne.n	8004780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b20      	cmp	r3, #32
 800476e:	d107      	bne.n	8004780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0220 	mvn.w	r2, #32
 8004778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fd94 	bl	80052a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e0ae      	b.n	8004904 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b0c      	cmp	r3, #12
 80047b2:	f200 809f 	bhi.w	80048f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047b6:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047f1 	.word	0x080047f1
 80047c0:	080048f5 	.word	0x080048f5
 80047c4:	080048f5 	.word	0x080048f5
 80047c8:	080048f5 	.word	0x080048f5
 80047cc:	08004831 	.word	0x08004831
 80047d0:	080048f5 	.word	0x080048f5
 80047d4:	080048f5 	.word	0x080048f5
 80047d8:	080048f5 	.word	0x080048f5
 80047dc:	08004873 	.word	0x08004873
 80047e0:	080048f5 	.word	0x080048f5
 80047e4:	080048f5 	.word	0x080048f5
 80047e8:	080048f5 	.word	0x080048f5
 80047ec:	080048b3 	.word	0x080048b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fa18 	bl	8004c2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0208 	orr.w	r2, r2, #8
 800480a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0204 	bic.w	r2, r2, #4
 800481a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6999      	ldr	r1, [r3, #24]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	619a      	str	r2, [r3, #24]
      break;
 800482e:	e064      	b.n	80048fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fa68 	bl	8004d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6999      	ldr	r1, [r3, #24]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	021a      	lsls	r2, r3, #8
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	619a      	str	r2, [r3, #24]
      break;
 8004870:	e043      	b.n	80048fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fabd 	bl	8004df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0208 	orr.w	r2, r2, #8
 800488c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0204 	bic.w	r2, r2, #4
 800489c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69d9      	ldr	r1, [r3, #28]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	61da      	str	r2, [r3, #28]
      break;
 80048b0:	e023      	b.n	80048fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fb11 	bl	8004ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69d9      	ldr	r1, [r3, #28]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	021a      	lsls	r2, r3, #8
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	61da      	str	r2, [r3, #28]
      break;
 80048f2:	e002      	b.n	80048fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
      break;
 80048f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_TIM_ConfigClockSource+0x1c>
 8004924:	2302      	movs	r3, #2
 8004926:	e0b4      	b.n	8004a92 <HAL_TIM_ConfigClockSource+0x186>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800494e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004960:	d03e      	beq.n	80049e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004966:	f200 8087 	bhi.w	8004a78 <HAL_TIM_ConfigClockSource+0x16c>
 800496a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496e:	f000 8086 	beq.w	8004a7e <HAL_TIM_ConfigClockSource+0x172>
 8004972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004976:	d87f      	bhi.n	8004a78 <HAL_TIM_ConfigClockSource+0x16c>
 8004978:	2b70      	cmp	r3, #112	; 0x70
 800497a:	d01a      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0xa6>
 800497c:	2b70      	cmp	r3, #112	; 0x70
 800497e:	d87b      	bhi.n	8004a78 <HAL_TIM_ConfigClockSource+0x16c>
 8004980:	2b60      	cmp	r3, #96	; 0x60
 8004982:	d050      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0x11a>
 8004984:	2b60      	cmp	r3, #96	; 0x60
 8004986:	d877      	bhi.n	8004a78 <HAL_TIM_ConfigClockSource+0x16c>
 8004988:	2b50      	cmp	r3, #80	; 0x50
 800498a:	d03c      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0xfa>
 800498c:	2b50      	cmp	r3, #80	; 0x50
 800498e:	d873      	bhi.n	8004a78 <HAL_TIM_ConfigClockSource+0x16c>
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d058      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x13a>
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d86f      	bhi.n	8004a78 <HAL_TIM_ConfigClockSource+0x16c>
 8004998:	2b30      	cmp	r3, #48	; 0x30
 800499a:	d064      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x15a>
 800499c:	2b30      	cmp	r3, #48	; 0x30
 800499e:	d86b      	bhi.n	8004a78 <HAL_TIM_ConfigClockSource+0x16c>
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d060      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x15a>
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d867      	bhi.n	8004a78 <HAL_TIM_ConfigClockSource+0x16c>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d05c      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x15a>
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d05a      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x15a>
 80049b0:	e062      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6899      	ldr	r1, [r3, #8]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f000 fb5d 	bl	8005080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	609a      	str	r2, [r3, #8]
      break;
 80049de:	e04f      	b.n	8004a80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	6899      	ldr	r1, [r3, #8]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f000 fb46 	bl	8005080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a02:	609a      	str	r2, [r3, #8]
      break;
 8004a04:	e03c      	b.n	8004a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6859      	ldr	r1, [r3, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	461a      	mov	r2, r3
 8004a14:	f000 faba 	bl	8004f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2150      	movs	r1, #80	; 0x50
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fb13 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004a24:	e02c      	b.n	8004a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6859      	ldr	r1, [r3, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f000 fad9 	bl	8004fea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2160      	movs	r1, #96	; 0x60
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fb03 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004a44:	e01c      	b.n	8004a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	6859      	ldr	r1, [r3, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	461a      	mov	r2, r3
 8004a54:	f000 fa9a 	bl	8004f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2140      	movs	r1, #64	; 0x40
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 faf3 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004a64:	e00c      	b.n	8004a80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4610      	mov	r0, r2
 8004a72:	f000 faea 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004a76:	e003      	b.n	8004a80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a7c:	e000      	b.n	8004a80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a40      	ldr	r2, [pc, #256]	; (8004c00 <TIM_Base_SetConfig+0x114>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d013      	beq.n	8004b2c <TIM_Base_SetConfig+0x40>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0a:	d00f      	beq.n	8004b2c <TIM_Base_SetConfig+0x40>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a3d      	ldr	r2, [pc, #244]	; (8004c04 <TIM_Base_SetConfig+0x118>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <TIM_Base_SetConfig+0x40>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a3c      	ldr	r2, [pc, #240]	; (8004c08 <TIM_Base_SetConfig+0x11c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <TIM_Base_SetConfig+0x40>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a3b      	ldr	r2, [pc, #236]	; (8004c0c <TIM_Base_SetConfig+0x120>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_Base_SetConfig+0x40>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a3a      	ldr	r2, [pc, #232]	; (8004c10 <TIM_Base_SetConfig+0x124>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d108      	bne.n	8004b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <TIM_Base_SetConfig+0x114>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d02b      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4c:	d027      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a2c      	ldr	r2, [pc, #176]	; (8004c04 <TIM_Base_SetConfig+0x118>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d023      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a2b      	ldr	r2, [pc, #172]	; (8004c08 <TIM_Base_SetConfig+0x11c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01f      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a2a      	ldr	r2, [pc, #168]	; (8004c0c <TIM_Base_SetConfig+0x120>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01b      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a29      	ldr	r2, [pc, #164]	; (8004c10 <TIM_Base_SetConfig+0x124>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d017      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a28      	ldr	r2, [pc, #160]	; (8004c14 <TIM_Base_SetConfig+0x128>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a27      	ldr	r2, [pc, #156]	; (8004c18 <TIM_Base_SetConfig+0x12c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00f      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a26      	ldr	r2, [pc, #152]	; (8004c1c <TIM_Base_SetConfig+0x130>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00b      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a25      	ldr	r2, [pc, #148]	; (8004c20 <TIM_Base_SetConfig+0x134>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d007      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a24      	ldr	r2, [pc, #144]	; (8004c24 <TIM_Base_SetConfig+0x138>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d003      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a23      	ldr	r2, [pc, #140]	; (8004c28 <TIM_Base_SetConfig+0x13c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d108      	bne.n	8004bb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a0a      	ldr	r2, [pc, #40]	; (8004c00 <TIM_Base_SetConfig+0x114>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_Base_SetConfig+0xf8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a0c      	ldr	r2, [pc, #48]	; (8004c10 <TIM_Base_SetConfig+0x124>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d103      	bne.n	8004bec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	615a      	str	r2, [r3, #20]
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800
 8004c0c:	40000c00 	.word	0x40000c00
 8004c10:	40010400 	.word	0x40010400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800
 8004c20:	40001800 	.word	0x40001800
 8004c24:	40001c00 	.word	0x40001c00
 8004c28:	40002000 	.word	0x40002000

08004c2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f023 0201 	bic.w	r2, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f023 0302 	bic.w	r3, r3, #2
 8004c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <TIM_OC1_SetConfig+0xd8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <TIM_OC1_SetConfig+0x64>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a1f      	ldr	r2, [pc, #124]	; (8004d08 <TIM_OC1_SetConfig+0xdc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10c      	bne.n	8004caa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0308 	bic.w	r3, r3, #8
 8004c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f023 0304 	bic.w	r3, r3, #4
 8004ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a15      	ldr	r2, [pc, #84]	; (8004d04 <TIM_OC1_SetConfig+0xd8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_OC1_SetConfig+0x8e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a14      	ldr	r2, [pc, #80]	; (8004d08 <TIM_OC1_SetConfig+0xdc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d111      	bne.n	8004cde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	621a      	str	r2, [r3, #32]
}
 8004cf8:	bf00      	nop
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40010400 	.word	0x40010400

08004d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0210 	bic.w	r2, r3, #16
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0320 	bic.w	r3, r3, #32
 8004d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a22      	ldr	r2, [pc, #136]	; (8004df0 <TIM_OC2_SetConfig+0xe4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_OC2_SetConfig+0x68>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a21      	ldr	r2, [pc, #132]	; (8004df4 <TIM_OC2_SetConfig+0xe8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d10d      	bne.n	8004d90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <TIM_OC2_SetConfig+0xe4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_OC2_SetConfig+0x94>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a16      	ldr	r2, [pc, #88]	; (8004df4 <TIM_OC2_SetConfig+0xe8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d113      	bne.n	8004dc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40010400 	.word	0x40010400

08004df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a21      	ldr	r2, [pc, #132]	; (8004ed8 <TIM_OC3_SetConfig+0xe0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_OC3_SetConfig+0x66>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a20      	ldr	r2, [pc, #128]	; (8004edc <TIM_OC3_SetConfig+0xe4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d10d      	bne.n	8004e7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <TIM_OC3_SetConfig+0xe0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_OC3_SetConfig+0x92>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a15      	ldr	r2, [pc, #84]	; (8004edc <TIM_OC3_SetConfig+0xe4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d113      	bne.n	8004eb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	621a      	str	r2, [r3, #32]
}
 8004ecc:	bf00      	nop
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40010400 	.word	0x40010400

08004ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	031b      	lsls	r3, r3, #12
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a12      	ldr	r2, [pc, #72]	; (8004f84 <TIM_OC4_SetConfig+0xa4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_OC4_SetConfig+0x68>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a11      	ldr	r2, [pc, #68]	; (8004f88 <TIM_OC4_SetConfig+0xa8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d109      	bne.n	8004f5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	019b      	lsls	r3, r3, #6
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40010000 	.word	0x40010000
 8004f88:	40010400 	.word	0x40010400

08004f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f023 0201 	bic.w	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f023 030a 	bic.w	r3, r3, #10
 8004fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b087      	sub	sp, #28
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f023 0210 	bic.w	r2, r3, #16
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	031b      	lsls	r3, r3, #12
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005026:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	f043 0307 	orr.w	r3, r3, #7
 800506c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	609a      	str	r2, [r3, #8]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800509a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	021a      	lsls	r2, r3, #8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	609a      	str	r2, [r3, #8]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 031f 	and.w	r3, r3, #31
 80050d2:	2201      	movs	r2, #1
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	43db      	mvns	r3, r3
 80050e2:	401a      	ands	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1a      	ldr	r2, [r3, #32]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	fa01 f303 	lsl.w	r3, r1, r3
 80050f8:	431a      	orrs	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005120:	2302      	movs	r3, #2
 8005122:	e05a      	b.n	80051da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a21      	ldr	r2, [pc, #132]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d022      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005170:	d01d      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d018      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d013      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1a      	ldr	r2, [pc, #104]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00e      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d009      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a17      	ldr	r2, [pc, #92]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d004      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a15      	ldr	r2, [pc, #84]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d10c      	bne.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40010400 	.word	0x40010400
 80051fc:	40014000 	.word	0x40014000
 8005200:	40001800 	.word	0x40001800

08005204 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800521c:	2302      	movs	r3, #2
 800521e:	e03d      	b.n	800529c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e03f      	b.n	8005362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fc fed2 	bl	80020a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2224      	movs	r2, #36	; 0x24
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f9cb 	bl	80056b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695a      	ldr	r2, [r3, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b08a      	sub	sp, #40	; 0x28
 800536e:	af02      	add	r7, sp, #8
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	4613      	mov	r3, r2
 8005378:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b20      	cmp	r3, #32
 8005388:	d17c      	bne.n	8005484 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <HAL_UART_Transmit+0x2c>
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e075      	b.n	8005486 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_UART_Transmit+0x3e>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e06e      	b.n	8005486 <HAL_UART_Transmit+0x11c>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2221      	movs	r2, #33	; 0x21
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053be:	f7fd f92b 	bl	8002618 <HAL_GetTick>
 80053c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	88fa      	ldrh	r2, [r7, #6]
 80053ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d8:	d108      	bne.n	80053ec <HAL_UART_Transmit+0x82>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	e003      	b.n	80053f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80053fc:	e02a      	b.n	8005454 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	2180      	movs	r1, #128	; 0x80
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f8e2 	bl	80055d2 <UART_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e036      	b.n	8005486 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800542c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	3302      	adds	r3, #2
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	e007      	b.n	8005446 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	781a      	ldrb	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	3301      	adds	r3, #1
 8005444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1cf      	bne.n	80053fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2200      	movs	r2, #0
 8005466:	2140      	movs	r1, #64	; 0x40
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f8b2 	bl	80055d2 <UART_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e006      	b.n	8005486 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	e000      	b.n	8005486 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005484:	2302      	movs	r3, #2
  }
}
 8005486:	4618      	mov	r0, r3
 8005488:	3720      	adds	r7, #32
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b08a      	sub	sp, #40	; 0x28
 8005492:	af02      	add	r7, sp, #8
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	f040 808c 	bne.w	80055c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_UART_Receive+0x2e>
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e084      	b.n	80055ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_UART_Receive+0x40>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e07d      	b.n	80055ca <HAL_UART_Receive+0x13c>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2222      	movs	r2, #34	; 0x22
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ea:	f7fd f895 	bl	8002618 <HAL_GetTick>
 80054ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	88fa      	ldrh	r2, [r7, #6]
 80054f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	88fa      	ldrh	r2, [r7, #6]
 80054fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005504:	d108      	bne.n	8005518 <HAL_UART_Receive+0x8a>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d104      	bne.n	8005518 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	e003      	b.n	8005520 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005528:	e043      	b.n	80055b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2200      	movs	r2, #0
 8005532:	2120      	movs	r1, #32
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f84c 	bl	80055d2 <UART_WaitOnFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e042      	b.n	80055ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10c      	bne.n	8005564 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005556:	b29a      	uxth	r2, r3
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	3302      	adds	r3, #2
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	e01f      	b.n	80055a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556c:	d007      	beq.n	800557e <HAL_UART_Receive+0xf0>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <HAL_UART_Receive+0xfe>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	b2da      	uxtb	r2, r3
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	e008      	b.n	800559e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005598:	b2da      	uxtb	r2, r3
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1b6      	bne.n	800552a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e000      	b.n	80055ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80055c8:	2302      	movs	r3, #2
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b090      	sub	sp, #64	; 0x40
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e2:	e050      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	d04c      	beq.n	8005686 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <UART_WaitOnFlagUntilTimeout+0x30>
 80055f2:	f7fd f811 	bl	8002618 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055fe:	429a      	cmp	r2, r3
 8005600:	d241      	bcs.n	8005686 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005622:	637a      	str	r2, [r7, #52]	; 0x34
 8005624:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e5      	bne.n	8005602 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3314      	adds	r3, #20
 800563c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	613b      	str	r3, [r7, #16]
   return(result);
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	63bb      	str	r3, [r7, #56]	; 0x38
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3314      	adds	r3, #20
 8005654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005656:	623a      	str	r2, [r7, #32]
 8005658:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	69f9      	ldr	r1, [r7, #28]
 800565c:	6a3a      	ldr	r2, [r7, #32]
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	61bb      	str	r3, [r7, #24]
   return(result);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e5      	bne.n	8005636 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e00f      	b.n	80056a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4013      	ands	r3, r2
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	bf0c      	ite	eq
 8005696:	2301      	moveq	r3, #1
 8005698:	2300      	movne	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d09f      	beq.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3740      	adds	r7, #64	; 0x40
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b4:	b0c0      	sub	sp, #256	; 0x100
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056cc:	68d9      	ldr	r1, [r3, #12]
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	ea40 0301 	orr.w	r3, r0, r1
 80056d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005708:	f021 010c 	bic.w	r1, r1, #12
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005716:	430b      	orrs	r3, r1
 8005718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572a:	6999      	ldr	r1, [r3, #24]
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	ea40 0301 	orr.w	r3, r0, r1
 8005736:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b8f      	ldr	r3, [pc, #572]	; (800597c <UART_SetConfig+0x2cc>)
 8005740:	429a      	cmp	r2, r3
 8005742:	d005      	beq.n	8005750 <UART_SetConfig+0xa0>
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b8d      	ldr	r3, [pc, #564]	; (8005980 <UART_SetConfig+0x2d0>)
 800574c:	429a      	cmp	r2, r3
 800574e:	d104      	bne.n	800575a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005750:	f7fe f968 	bl	8003a24 <HAL_RCC_GetPCLK2Freq>
 8005754:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005758:	e003      	b.n	8005762 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800575a:	f7fe f94f 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 800575e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576c:	f040 810c 	bne.w	8005988 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005774:	2200      	movs	r2, #0
 8005776:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800577a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800577e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005782:	4622      	mov	r2, r4
 8005784:	462b      	mov	r3, r5
 8005786:	1891      	adds	r1, r2, r2
 8005788:	65b9      	str	r1, [r7, #88]	; 0x58
 800578a:	415b      	adcs	r3, r3
 800578c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800578e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005792:	4621      	mov	r1, r4
 8005794:	eb12 0801 	adds.w	r8, r2, r1
 8005798:	4629      	mov	r1, r5
 800579a:	eb43 0901 	adc.w	r9, r3, r1
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057b2:	4690      	mov	r8, r2
 80057b4:	4699      	mov	r9, r3
 80057b6:	4623      	mov	r3, r4
 80057b8:	eb18 0303 	adds.w	r3, r8, r3
 80057bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057c0:	462b      	mov	r3, r5
 80057c2:	eb49 0303 	adc.w	r3, r9, r3
 80057c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057de:	460b      	mov	r3, r1
 80057e0:	18db      	adds	r3, r3, r3
 80057e2:	653b      	str	r3, [r7, #80]	; 0x50
 80057e4:	4613      	mov	r3, r2
 80057e6:	eb42 0303 	adc.w	r3, r2, r3
 80057ea:	657b      	str	r3, [r7, #84]	; 0x54
 80057ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057f4:	f7fa fd02 	bl	80001fc <__aeabi_uldivmod>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4b61      	ldr	r3, [pc, #388]	; (8005984 <UART_SetConfig+0x2d4>)
 80057fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	011c      	lsls	r4, r3, #4
 8005806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800580a:	2200      	movs	r2, #0
 800580c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005810:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005814:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005818:	4642      	mov	r2, r8
 800581a:	464b      	mov	r3, r9
 800581c:	1891      	adds	r1, r2, r2
 800581e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005820:	415b      	adcs	r3, r3
 8005822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005824:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005828:	4641      	mov	r1, r8
 800582a:	eb12 0a01 	adds.w	sl, r2, r1
 800582e:	4649      	mov	r1, r9
 8005830:	eb43 0b01 	adc.w	fp, r3, r1
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005840:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005848:	4692      	mov	sl, r2
 800584a:	469b      	mov	fp, r3
 800584c:	4643      	mov	r3, r8
 800584e:	eb1a 0303 	adds.w	r3, sl, r3
 8005852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005856:	464b      	mov	r3, r9
 8005858:	eb4b 0303 	adc.w	r3, fp, r3
 800585c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800586c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005870:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005874:	460b      	mov	r3, r1
 8005876:	18db      	adds	r3, r3, r3
 8005878:	643b      	str	r3, [r7, #64]	; 0x40
 800587a:	4613      	mov	r3, r2
 800587c:	eb42 0303 	adc.w	r3, r2, r3
 8005880:	647b      	str	r3, [r7, #68]	; 0x44
 8005882:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005886:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800588a:	f7fa fcb7 	bl	80001fc <__aeabi_uldivmod>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4611      	mov	r1, r2
 8005894:	4b3b      	ldr	r3, [pc, #236]	; (8005984 <UART_SetConfig+0x2d4>)
 8005896:	fba3 2301 	umull	r2, r3, r3, r1
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	2264      	movs	r2, #100	; 0x64
 800589e:	fb02 f303 	mul.w	r3, r2, r3
 80058a2:	1acb      	subs	r3, r1, r3
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058aa:	4b36      	ldr	r3, [pc, #216]	; (8005984 <UART_SetConfig+0x2d4>)
 80058ac:	fba3 2302 	umull	r2, r3, r3, r2
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058b8:	441c      	add	r4, r3
 80058ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058cc:	4642      	mov	r2, r8
 80058ce:	464b      	mov	r3, r9
 80058d0:	1891      	adds	r1, r2, r2
 80058d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80058d4:	415b      	adcs	r3, r3
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058dc:	4641      	mov	r1, r8
 80058de:	1851      	adds	r1, r2, r1
 80058e0:	6339      	str	r1, [r7, #48]	; 0x30
 80058e2:	4649      	mov	r1, r9
 80058e4:	414b      	adcs	r3, r1
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058f4:	4659      	mov	r1, fp
 80058f6:	00cb      	lsls	r3, r1, #3
 80058f8:	4651      	mov	r1, sl
 80058fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058fe:	4651      	mov	r1, sl
 8005900:	00ca      	lsls	r2, r1, #3
 8005902:	4610      	mov	r0, r2
 8005904:	4619      	mov	r1, r3
 8005906:	4603      	mov	r3, r0
 8005908:	4642      	mov	r2, r8
 800590a:	189b      	adds	r3, r3, r2
 800590c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005910:	464b      	mov	r3, r9
 8005912:	460a      	mov	r2, r1
 8005914:	eb42 0303 	adc.w	r3, r2, r3
 8005918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005928:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800592c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005930:	460b      	mov	r3, r1
 8005932:	18db      	adds	r3, r3, r3
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
 8005936:	4613      	mov	r3, r2
 8005938:	eb42 0303 	adc.w	r3, r2, r3
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005942:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005946:	f7fa fc59 	bl	80001fc <__aeabi_uldivmod>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <UART_SetConfig+0x2d4>)
 8005950:	fba3 1302 	umull	r1, r3, r3, r2
 8005954:	095b      	lsrs	r3, r3, #5
 8005956:	2164      	movs	r1, #100	; 0x64
 8005958:	fb01 f303 	mul.w	r3, r1, r3
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	3332      	adds	r3, #50	; 0x32
 8005962:	4a08      	ldr	r2, [pc, #32]	; (8005984 <UART_SetConfig+0x2d4>)
 8005964:	fba2 2303 	umull	r2, r3, r2, r3
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	f003 0207 	and.w	r2, r3, #7
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4422      	add	r2, r4
 8005976:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005978:	e105      	b.n	8005b86 <UART_SetConfig+0x4d6>
 800597a:	bf00      	nop
 800597c:	40011000 	.word	0x40011000
 8005980:	40011400 	.word	0x40011400
 8005984:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598c:	2200      	movs	r2, #0
 800598e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005992:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005996:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800599a:	4642      	mov	r2, r8
 800599c:	464b      	mov	r3, r9
 800599e:	1891      	adds	r1, r2, r2
 80059a0:	6239      	str	r1, [r7, #32]
 80059a2:	415b      	adcs	r3, r3
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
 80059a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059aa:	4641      	mov	r1, r8
 80059ac:	1854      	adds	r4, r2, r1
 80059ae:	4649      	mov	r1, r9
 80059b0:	eb43 0501 	adc.w	r5, r3, r1
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	00eb      	lsls	r3, r5, #3
 80059be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c2:	00e2      	lsls	r2, r4, #3
 80059c4:	4614      	mov	r4, r2
 80059c6:	461d      	mov	r5, r3
 80059c8:	4643      	mov	r3, r8
 80059ca:	18e3      	adds	r3, r4, r3
 80059cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059d0:	464b      	mov	r3, r9
 80059d2:	eb45 0303 	adc.w	r3, r5, r3
 80059d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059f6:	4629      	mov	r1, r5
 80059f8:	008b      	lsls	r3, r1, #2
 80059fa:	4621      	mov	r1, r4
 80059fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a00:	4621      	mov	r1, r4
 8005a02:	008a      	lsls	r2, r1, #2
 8005a04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a08:	f7fa fbf8 	bl	80001fc <__aeabi_uldivmod>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4b60      	ldr	r3, [pc, #384]	; (8005b94 <UART_SetConfig+0x4e4>)
 8005a12:	fba3 2302 	umull	r2, r3, r3, r2
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	011c      	lsls	r4, r3, #4
 8005a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	1891      	adds	r1, r2, r2
 8005a32:	61b9      	str	r1, [r7, #24]
 8005a34:	415b      	adcs	r3, r3
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a3c:	4641      	mov	r1, r8
 8005a3e:	1851      	adds	r1, r2, r1
 8005a40:	6139      	str	r1, [r7, #16]
 8005a42:	4649      	mov	r1, r9
 8005a44:	414b      	adcs	r3, r1
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a54:	4659      	mov	r1, fp
 8005a56:	00cb      	lsls	r3, r1, #3
 8005a58:	4651      	mov	r1, sl
 8005a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a5e:	4651      	mov	r1, sl
 8005a60:	00ca      	lsls	r2, r1, #3
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	4642      	mov	r2, r8
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a70:	464b      	mov	r3, r9
 8005a72:	460a      	mov	r2, r1
 8005a74:	eb42 0303 	adc.w	r3, r2, r3
 8005a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a94:	4649      	mov	r1, r9
 8005a96:	008b      	lsls	r3, r1, #2
 8005a98:	4641      	mov	r1, r8
 8005a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a9e:	4641      	mov	r1, r8
 8005aa0:	008a      	lsls	r2, r1, #2
 8005aa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aa6:	f7fa fba9 	bl	80001fc <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4b39      	ldr	r3, [pc, #228]	; (8005b94 <UART_SetConfig+0x4e4>)
 8005ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	2164      	movs	r1, #100	; 0x64
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	3332      	adds	r3, #50	; 0x32
 8005ac2:	4a34      	ldr	r2, [pc, #208]	; (8005b94 <UART_SetConfig+0x4e4>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ace:	441c      	add	r4, r3
 8005ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ad8:	677a      	str	r2, [r7, #116]	; 0x74
 8005ada:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ade:	4642      	mov	r2, r8
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	1891      	adds	r1, r2, r2
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	415b      	adcs	r3, r3
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aee:	4641      	mov	r1, r8
 8005af0:	1851      	adds	r1, r2, r1
 8005af2:	6039      	str	r1, [r7, #0]
 8005af4:	4649      	mov	r1, r9
 8005af6:	414b      	adcs	r3, r1
 8005af8:	607b      	str	r3, [r7, #4]
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b06:	4659      	mov	r1, fp
 8005b08:	00cb      	lsls	r3, r1, #3
 8005b0a:	4651      	mov	r1, sl
 8005b0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b10:	4651      	mov	r1, sl
 8005b12:	00ca      	lsls	r2, r1, #3
 8005b14:	4610      	mov	r0, r2
 8005b16:	4619      	mov	r1, r3
 8005b18:	4603      	mov	r3, r0
 8005b1a:	4642      	mov	r2, r8
 8005b1c:	189b      	adds	r3, r3, r2
 8005b1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b20:	464b      	mov	r3, r9
 8005b22:	460a      	mov	r2, r1
 8005b24:	eb42 0303 	adc.w	r3, r2, r3
 8005b28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	663b      	str	r3, [r7, #96]	; 0x60
 8005b34:	667a      	str	r2, [r7, #100]	; 0x64
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b42:	4649      	mov	r1, r9
 8005b44:	008b      	lsls	r3, r1, #2
 8005b46:	4641      	mov	r1, r8
 8005b48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b4c:	4641      	mov	r1, r8
 8005b4e:	008a      	lsls	r2, r1, #2
 8005b50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b54:	f7fa fb52 	bl	80001fc <__aeabi_uldivmod>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <UART_SetConfig+0x4e4>)
 8005b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	2164      	movs	r1, #100	; 0x64
 8005b66:	fb01 f303 	mul.w	r3, r1, r3
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	3332      	adds	r3, #50	; 0x32
 8005b70:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <UART_SetConfig+0x4e4>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	f003 020f 	and.w	r2, r3, #15
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4422      	add	r2, r4
 8005b84:	609a      	str	r2, [r3, #8]
}
 8005b86:	bf00      	nop
 8005b88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b92:	bf00      	nop
 8005b94:	51eb851f 	.word	0x51eb851f

08005b98 <atoi>:
 8005b98:	220a      	movs	r2, #10
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	f000 b8b4 	b.w	8005d08 <strtol>

08005ba0 <__errno>:
 8005ba0:	4b01      	ldr	r3, [pc, #4]	; (8005ba8 <__errno+0x8>)
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	2000000c 	.word	0x2000000c

08005bac <__libc_init_array>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	4d0d      	ldr	r5, [pc, #52]	; (8005be4 <__libc_init_array+0x38>)
 8005bb0:	4c0d      	ldr	r4, [pc, #52]	; (8005be8 <__libc_init_array+0x3c>)
 8005bb2:	1b64      	subs	r4, r4, r5
 8005bb4:	10a4      	asrs	r4, r4, #2
 8005bb6:	2600      	movs	r6, #0
 8005bb8:	42a6      	cmp	r6, r4
 8005bba:	d109      	bne.n	8005bd0 <__libc_init_array+0x24>
 8005bbc:	4d0b      	ldr	r5, [pc, #44]	; (8005bec <__libc_init_array+0x40>)
 8005bbe:	4c0c      	ldr	r4, [pc, #48]	; (8005bf0 <__libc_init_array+0x44>)
 8005bc0:	f000 f8ac 	bl	8005d1c <_init>
 8005bc4:	1b64      	subs	r4, r4, r5
 8005bc6:	10a4      	asrs	r4, r4, #2
 8005bc8:	2600      	movs	r6, #0
 8005bca:	42a6      	cmp	r6, r4
 8005bcc:	d105      	bne.n	8005bda <__libc_init_array+0x2e>
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd4:	4798      	blx	r3
 8005bd6:	3601      	adds	r6, #1
 8005bd8:	e7ee      	b.n	8005bb8 <__libc_init_array+0xc>
 8005bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bde:	4798      	blx	r3
 8005be0:	3601      	adds	r6, #1
 8005be2:	e7f2      	b.n	8005bca <__libc_init_array+0x1e>
 8005be4:	080064bc 	.word	0x080064bc
 8005be8:	080064bc 	.word	0x080064bc
 8005bec:	080064bc 	.word	0x080064bc
 8005bf0:	080064c0 	.word	0x080064c0

08005bf4 <memset>:
 8005bf4:	4402      	add	r2, r0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d100      	bne.n	8005bfe <memset+0xa>
 8005bfc:	4770      	bx	lr
 8005bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005c02:	e7f9      	b.n	8005bf8 <memset+0x4>

08005c04 <_strtol_l.constprop.0>:
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0a:	d001      	beq.n	8005c10 <_strtol_l.constprop.0+0xc>
 8005c0c:	2b24      	cmp	r3, #36	; 0x24
 8005c0e:	d906      	bls.n	8005c1e <_strtol_l.constprop.0+0x1a>
 8005c10:	f7ff ffc6 	bl	8005ba0 <__errno>
 8005c14:	2316      	movs	r3, #22
 8005c16:	6003      	str	r3, [r0, #0]
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005d04 <_strtol_l.constprop.0+0x100>
 8005c22:	460d      	mov	r5, r1
 8005c24:	462e      	mov	r6, r5
 8005c26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005c2e:	f017 0708 	ands.w	r7, r7, #8
 8005c32:	d1f7      	bne.n	8005c24 <_strtol_l.constprop.0+0x20>
 8005c34:	2c2d      	cmp	r4, #45	; 0x2d
 8005c36:	d132      	bne.n	8005c9e <_strtol_l.constprop.0+0x9a>
 8005c38:	782c      	ldrb	r4, [r5, #0]
 8005c3a:	2701      	movs	r7, #1
 8005c3c:	1cb5      	adds	r5, r6, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d05b      	beq.n	8005cfa <_strtol_l.constprop.0+0xf6>
 8005c42:	2b10      	cmp	r3, #16
 8005c44:	d109      	bne.n	8005c5a <_strtol_l.constprop.0+0x56>
 8005c46:	2c30      	cmp	r4, #48	; 0x30
 8005c48:	d107      	bne.n	8005c5a <_strtol_l.constprop.0+0x56>
 8005c4a:	782c      	ldrb	r4, [r5, #0]
 8005c4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c50:	2c58      	cmp	r4, #88	; 0x58
 8005c52:	d14d      	bne.n	8005cf0 <_strtol_l.constprop.0+0xec>
 8005c54:	786c      	ldrb	r4, [r5, #1]
 8005c56:	2310      	movs	r3, #16
 8005c58:	3502      	adds	r5, #2
 8005c5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005c5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c62:	f04f 0c00 	mov.w	ip, #0
 8005c66:	fbb8 f9f3 	udiv	r9, r8, r3
 8005c6a:	4666      	mov	r6, ip
 8005c6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005c70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005c74:	f1be 0f09 	cmp.w	lr, #9
 8005c78:	d816      	bhi.n	8005ca8 <_strtol_l.constprop.0+0xa4>
 8005c7a:	4674      	mov	r4, lr
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	dd24      	ble.n	8005cca <_strtol_l.constprop.0+0xc6>
 8005c80:	f1bc 0f00 	cmp.w	ip, #0
 8005c84:	db1e      	blt.n	8005cc4 <_strtol_l.constprop.0+0xc0>
 8005c86:	45b1      	cmp	r9, r6
 8005c88:	d31c      	bcc.n	8005cc4 <_strtol_l.constprop.0+0xc0>
 8005c8a:	d101      	bne.n	8005c90 <_strtol_l.constprop.0+0x8c>
 8005c8c:	45a2      	cmp	sl, r4
 8005c8e:	db19      	blt.n	8005cc4 <_strtol_l.constprop.0+0xc0>
 8005c90:	fb06 4603 	mla	r6, r6, r3, r4
 8005c94:	f04f 0c01 	mov.w	ip, #1
 8005c98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c9c:	e7e8      	b.n	8005c70 <_strtol_l.constprop.0+0x6c>
 8005c9e:	2c2b      	cmp	r4, #43	; 0x2b
 8005ca0:	bf04      	itt	eq
 8005ca2:	782c      	ldrbeq	r4, [r5, #0]
 8005ca4:	1cb5      	addeq	r5, r6, #2
 8005ca6:	e7ca      	b.n	8005c3e <_strtol_l.constprop.0+0x3a>
 8005ca8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005cac:	f1be 0f19 	cmp.w	lr, #25
 8005cb0:	d801      	bhi.n	8005cb6 <_strtol_l.constprop.0+0xb2>
 8005cb2:	3c37      	subs	r4, #55	; 0x37
 8005cb4:	e7e2      	b.n	8005c7c <_strtol_l.constprop.0+0x78>
 8005cb6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005cba:	f1be 0f19 	cmp.w	lr, #25
 8005cbe:	d804      	bhi.n	8005cca <_strtol_l.constprop.0+0xc6>
 8005cc0:	3c57      	subs	r4, #87	; 0x57
 8005cc2:	e7db      	b.n	8005c7c <_strtol_l.constprop.0+0x78>
 8005cc4:	f04f 3cff 	mov.w	ip, #4294967295
 8005cc8:	e7e6      	b.n	8005c98 <_strtol_l.constprop.0+0x94>
 8005cca:	f1bc 0f00 	cmp.w	ip, #0
 8005cce:	da05      	bge.n	8005cdc <_strtol_l.constprop.0+0xd8>
 8005cd0:	2322      	movs	r3, #34	; 0x22
 8005cd2:	6003      	str	r3, [r0, #0]
 8005cd4:	4646      	mov	r6, r8
 8005cd6:	b942      	cbnz	r2, 8005cea <_strtol_l.constprop.0+0xe6>
 8005cd8:	4630      	mov	r0, r6
 8005cda:	e79e      	b.n	8005c1a <_strtol_l.constprop.0+0x16>
 8005cdc:	b107      	cbz	r7, 8005ce0 <_strtol_l.constprop.0+0xdc>
 8005cde:	4276      	negs	r6, r6
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	d0f9      	beq.n	8005cd8 <_strtol_l.constprop.0+0xd4>
 8005ce4:	f1bc 0f00 	cmp.w	ip, #0
 8005ce8:	d000      	beq.n	8005cec <_strtol_l.constprop.0+0xe8>
 8005cea:	1e69      	subs	r1, r5, #1
 8005cec:	6011      	str	r1, [r2, #0]
 8005cee:	e7f3      	b.n	8005cd8 <_strtol_l.constprop.0+0xd4>
 8005cf0:	2430      	movs	r4, #48	; 0x30
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1b1      	bne.n	8005c5a <_strtol_l.constprop.0+0x56>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	e7af      	b.n	8005c5a <_strtol_l.constprop.0+0x56>
 8005cfa:	2c30      	cmp	r4, #48	; 0x30
 8005cfc:	d0a5      	beq.n	8005c4a <_strtol_l.constprop.0+0x46>
 8005cfe:	230a      	movs	r3, #10
 8005d00:	e7ab      	b.n	8005c5a <_strtol_l.constprop.0+0x56>
 8005d02:	bf00      	nop
 8005d04:	080063b1 	.word	0x080063b1

08005d08 <strtol>:
 8005d08:	4613      	mov	r3, r2
 8005d0a:	460a      	mov	r2, r1
 8005d0c:	4601      	mov	r1, r0
 8005d0e:	4802      	ldr	r0, [pc, #8]	; (8005d18 <strtol+0x10>)
 8005d10:	6800      	ldr	r0, [r0, #0]
 8005d12:	f7ff bf77 	b.w	8005c04 <_strtol_l.constprop.0>
 8005d16:	bf00      	nop
 8005d18:	2000000c 	.word	0x2000000c

08005d1c <_init>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	bf00      	nop
 8005d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d22:	bc08      	pop	{r3}
 8005d24:	469e      	mov	lr, r3
 8005d26:	4770      	bx	lr

08005d28 <_fini>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr
