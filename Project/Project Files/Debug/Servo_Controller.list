
Servo_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d0  080059d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059d8  080059d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000328  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000398  20000398  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014317  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bf8  00000000  00000000  000343b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00036fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ec8  00000000  00000000  00037f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027488  00000000  00000000  00038e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012de0  00000000  00000000  000602c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e08e6  00000000  00000000  000730a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153986  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004254  00000000  00000000  001539d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080052bc 	.word	0x080052bc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	080052bc 	.word	0x080052bc

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <_ZL19ConsoleCommandMatchPKcS0_>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4413      	add	r3, r2
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	440b      	add	r3, r1
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	429a      	cmp	r2, r3
 8000524:	d104      	bne.n	8000530 <_ZL19ConsoleCommandMatchPKcS0_+0x30>
	{
		result = 1u;
 8000526:	2301      	movs	r3, #1
 8000528:	60bb      	str	r3, [r7, #8]
		i++;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d12a      	bne.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
	while ( ( 1u == result ) &&
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2b09      	cmp	r3, #9
 800053a:	d827      	bhi.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000544:	2b20      	cmp	r3, #32
 8000546:	d021      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000550:	2b0a      	cmp	r3, #10
 8000552:	d01b      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b0d      	cmp	r3, #13
 800055e:	d015      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00f      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		)
	{
		if ( buffer[i] != name[i] )
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	4413      	add	r3, r2
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	440b      	add	r3, r1
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	d001      	beq.n	8000584 <_ZL19ConsoleCommandMatchPKcS0_+0x84>
		{
			result = 0u;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 800058a:	e7d1      	b.n	8000530 <_ZL19ConsoleCommandMatchPKcS0_+0x30>
	}

	return result;
 800058c:	68bb      	ldr	r3, [r7, #8]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <_ZL18ConsoleResetBufferPcmm>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800059a:	b480      	push	{r7}
 800059c:	b087      	sub	sp, #28
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d20e      	bcs.n	80005d8 <_ZL18ConsoleResetBufferPcmm+0x3e>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	441a      	add	r2, r3
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	440b      	add	r3, r1
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	701a      	strb	r2, [r3, #0]
		i++;
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3301      	adds	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 80005d6:	e7ec      	b.n	80005b2 <_ZL18ConsoleResetBufferPcmm+0x18>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2bff      	cmp	r3, #255	; 0xff
 80005dc:	d808      	bhi.n	80005f0 <_ZL18ConsoleResetBufferPcmm+0x56>
	{
		receiveBuffer[i] =  NULL_CHAR;
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	4413      	add	r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e7f3      	b.n	80005d8 <_ZL18ConsoleResetBufferPcmm+0x3e>
	}
	return remaining;
 80005f0:	693b      	ldr	r3, [r7, #16]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_ZL21ConsoleCommandEndlinePKcm>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
			&& ( i < filledLength ) )
 800061a:	2b0d      	cmp	r3, #13
 800061c:	d00d      	beq.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b0a      	cmp	r3, #10
 8000628:	d007      	beq.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
			&& ( i < filledLength ) )
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	429a      	cmp	r2, r3
 8000630:	d203      	bcs.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
	{
		i++;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000638:	e7eb      	b.n	8000612 <_ZL21ConsoleCommandEndlinePKcm+0x14>
	}
	if ( i < filledLength )
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d201      	bcs.n	8000646 <_ZL21ConsoleCommandEndlinePKcm+0x48>
	{
		result = i;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000646:	68bb      	ldr	r3, [r7, #8]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 800065a:	f000 fbbb 	bl	8000dd4 <_Z13ConsoleIoInitv>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");	
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <ConsoleInit+0x48>)
 8000660:	f000 fc02 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(STR_ENDLINE);
 8000664:	480e      	ldr	r0, [pc, #56]	; (80006a0 <ConsoleInit+0x4c>)
 8000666:	f000 fbff 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(CONSOLE_PROMPT);
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <ConsoleInit+0x50>)
 800066c:	f000 fbfc 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
	mReceivedSoFar = 0u;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <ConsoleInit+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2bff      	cmp	r3, #255	; 0xff
 800067e:	d808      	bhi.n	8000692 <ConsoleInit+0x3e>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <ConsoleInit+0x58>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	e7f3      	b.n	800067a <ConsoleInit+0x26>
	}

}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	080052d4 	.word	0x080052d4
 80006a0:	0800531c 	.word	0x0800531c
 80006a4:	08005320 	.word	0x08005320
 80006a8:	2000018c 	.word	0x2000018c
 80006ac:	2000008c 	.word	0x2000008c

080006b0 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(encoder *ptr)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 80006b8:	4b57      	ldr	r3, [pc, #348]	; (8000818 <ConsoleProcess+0x168>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a57      	ldr	r2, [pc, #348]	; (800081c <ConsoleProcess+0x16c>)
 80006be:	1898      	adds	r0, r3, r2
 80006c0:	4b55      	ldr	r3, [pc, #340]	; (8000818 <ConsoleProcess+0x168>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80006c8:	f107 0208 	add.w	r2, r7, #8
 80006cc:	4619      	mov	r1, r3
 80006ce:	f000 fbb1 	bl	8000e34 <_Z16ConsoleIoReceivePhmPm>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d104      	bne.n	80006e2 <ConsoleProcess+0x32>
 80006d8:	4b51      	ldr	r3, [pc, #324]	; (8000820 <ConsoleProcess+0x170>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	f000 8097 	beq.w	8000810 <ConsoleProcess+0x160>
	{
		mReceiveBufferNeedsChecking = false;
 80006e2:	4b4f      	ldr	r3, [pc, #316]	; (8000820 <ConsoleProcess+0x170>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 80006e8:	4b4b      	ldr	r3, [pc, #300]	; (8000818 <ConsoleProcess+0x168>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a49      	ldr	r2, [pc, #292]	; (8000818 <ConsoleProcess+0x168>)
 80006f2:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 80006f4:	4b48      	ldr	r3, [pc, #288]	; (8000818 <ConsoleProcess+0x168>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4848      	ldr	r0, [pc, #288]	; (800081c <ConsoleProcess+0x16c>)
 80006fc:	f7ff ff7f 	bl	80005fe <_ZL21ConsoleCommandEndlinePKcm>
 8000700:	6178      	str	r0, [r7, #20]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	2b00      	cmp	r3, #0
 8000706:	f2c0 8083 	blt.w	8000810 <ConsoleProcess+0x160>
		{
			commandTable = ConsoleCommandsGetTable();
 800070a:	f000 fb59 	bl	8000dc0 <_Z23ConsoleCommandsGetTablev>
 800070e:	6138      	str	r0, [r7, #16]
			cmdIndex = 0u;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
			found = NOT_FOUND;
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	61bb      	str	r3, [r7, #24]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800071a:	69fa      	ldr	r2, [r7, #28]
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	4413      	add	r3, r2
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	461a      	mov	r2, r3
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	4413      	add	r3, r2
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d047      	beq.n	80007c0 <ConsoleProcess+0x110>
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000736:	d143      	bne.n	80007c0 <ConsoleProcess+0x110>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000738:	69fa      	ldr	r2, [r7, #28]
 800073a:	4613      	mov	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	461a      	mov	r2, r3
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	4413      	add	r3, r2
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4934      	ldr	r1, [pc, #208]	; (800081c <ConsoleProcess+0x16c>)
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fed7 	bl	8000500 <_ZL19ConsoleCommandMatchPKcS0_>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	bf14      	ite	ne
 8000758:	2301      	movne	r3, #1
 800075a:	2300      	moveq	r3, #0
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d02a      	beq.n	80007b8 <ConsoleProcess+0x108>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000762:	69fa      	ldr	r2, [r7, #28]
 8000764:	4613      	mov	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	4413      	add	r3, r2
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	461a      	mov	r2, r3
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	4413      	add	r3, r2
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4829      	ldr	r0, [pc, #164]	; (800081c <ConsoleProcess+0x16c>)
 8000776:	4798      	blx	r3
 8000778:	4603      	mov	r3, r0
 800077a:	73fb      	strb	r3, [r7, #15]
					if ( COMMAND_SUCCESS != result )
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d017      	beq.n	80007b2 <ConsoleProcess+0x102>
					{
						ConsoleIoSendString("Error: ");
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <ConsoleProcess+0x174>)
 8000784:	f000 fb70 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(mReceiveBuffer);
 8000788:	4824      	ldr	r0, [pc, #144]	; (800081c <ConsoleProcess+0x16c>)
 800078a:	f000 fb6d 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>

						ConsoleIoSendString("Help: ");
 800078e:	4826      	ldr	r0, [pc, #152]	; (8000828 <ConsoleProcess+0x178>)
 8000790:	f000 fb6a 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000794:	69fa      	ldr	r2, [r7, #28]
 8000796:	4613      	mov	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	461a      	mov	r2, r3
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	4413      	add	r3, r2
 80007a4:	3308      	adds	r3, #8
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fb5e 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(STR_ENDLINE);
 80007ac:	481f      	ldr	r0, [pc, #124]	; (800082c <ConsoleProcess+0x17c>)
 80007ae:	f000 fb5b 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>

					}
					found = cmdIndex;
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	e7b0      	b.n	800071a <ConsoleProcess+0x6a>
				}
				else
				{
					cmdIndex++;
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	3301      	adds	r3, #1
 80007bc:	61fb      	str	r3, [r7, #28]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007be:	e7ac      	b.n	800071a <ConsoleProcess+0x6a>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00d      	beq.n	80007e2 <ConsoleProcess+0x132>
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d109      	bne.n	80007e2 <ConsoleProcess+0x132>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <ConsoleProcess+0x168>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d905      	bls.n	80007e2 <ConsoleProcess+0x132>
				{
					ConsoleIoSendString("Command not found.");
 80007d6:	4816      	ldr	r0, [pc, #88]	; (8000830 <ConsoleProcess+0x180>)
 80007d8:	f000 fb46 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
					ConsoleIoSendString(STR_ENDLINE);
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <ConsoleProcess+0x17c>)
 80007de:	f000 fb43 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <ConsoleProcess+0x168>)
 80007e4:	6819      	ldr	r1, [r3, #0]
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	461a      	mov	r2, r3
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <ConsoleProcess+0x16c>)
 80007ee:	f7ff fed4 	bl	800059a <_ZL18ConsoleResetBufferPcmm>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <ConsoleProcess+0x168>)
 80007f6:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <ConsoleProcess+0x168>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf14      	ite	ne
 8000800:	2301      	movne	r3, #1
 8000802:	2300      	moveq	r3, #0
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <ConsoleProcess+0x170>)
 8000808:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 800080a:	480a      	ldr	r0, [pc, #40]	; (8000834 <ConsoleProcess+0x184>)
 800080c:	f000 fb2c 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
		}
	}
}
 8000810:	bf00      	nop
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000018c 	.word	0x2000018c
 800081c:	2000008c 	.word	0x2000008c
 8000820:	20000190 	.word	0x20000190
 8000824:	08005324 	.word	0x08005324
 8000828:	0800532c 	.word	0x0800532c
 800082c:	0800531c 	.word	0x0800531c
 8000830:	08005334 	.word	0x08005334
 8000834:	08005320 	.word	0x08005320

08000838 <_ZL17ConsoleParamFindNPKchPm>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000838:	b480      	push	{r7}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	460b      	mov	r3, r1
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800084e:	2300      	movs	r3, #0
 8000850:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000852:	7afb      	ldrb	r3, [r7, #11]
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	429a      	cmp	r2, r3
 8000858:	d00f      	beq.n	800087a <_ZL17ConsoleParamFindNPKchPm+0x42>
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	2bff      	cmp	r3, #255	; 0xff
 800085e:	d80c      	bhi.n	800087a <_ZL17ConsoleParamFindNPKchPm+0x42>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b20      	cmp	r3, #32
 800086a:	d102      	bne.n	8000872 <_ZL17ConsoleParamFindNPKchPm+0x3a>
		{
			parameterIndex++;
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	3301      	adds	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3301      	adds	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000878:	e7eb      	b.n	8000852 <_ZL17ConsoleParamFindNPKchPm+0x1a>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000880:	d102      	bne.n	8000888 <_ZL17ConsoleParamFindNPKchPm+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000882:	2310      	movs	r3, #16
 8000884:	75fb      	strb	r3, [r7, #23]
 8000886:	e002      	b.n	800088e <_ZL17ConsoleParamFindNPKchPm+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69fa      	ldr	r2, [r7, #28]
 800088c:	601a      	str	r2, [r3, #0]
	}
	return result;
 800088e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3724      	adds	r7, #36	; 0x24
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	460b      	mov	r3, r1
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80008ae:	f107 021c 	add.w	r2, r7, #28
 80008b2:	7afb      	ldrb	r3, [r7, #11]
 80008b4:	4619      	mov	r1, r3
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f7ff ffbe 	bl	8000838 <_ZL17ConsoleParamFindNPKchPm>
 80008bc:	4603      	mov	r3, r0
 80008be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80008c6:	69fa      	ldr	r2, [r7, #28]
 80008c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ca:	4413      	add	r3, r2
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80008d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008da:	2b0a      	cmp	r3, #10
 80008dc:	d01d      	beq.n	800091a <ConsoleReceiveParamInt16+0x7e>
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 80008de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008e2:	2b0d      	cmp	r3, #13
 80008e4:	d019      	beq.n	800091a <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 80008e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008ea:	2b20      	cmp	r3, #32
 80008ec:	d015      	beq.n	800091a <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	d812      	bhi.n	800091a <ConsoleReceiveParamInt16+0x7e>
	{
		str[i] = charVal;					// copy the relevant part
 80008f4:	f107 0214 	add.w	r2, r7, #20
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	4413      	add	r3, r2
 80008fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000900:	701a      	strb	r2, [r3, #0]
		i++;
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	3301      	adds	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	4413      	add	r3, r2
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000918:	e7dd      	b.n	80008d6 <ConsoleReceiveParamInt16+0x3a>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	2b08      	cmp	r3, #8
 800091e:	d102      	bne.n	8000926 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000920:	2310      	movs	r3, #16
 8000922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10e      	bne.n	800094c <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 800092e:	f107 0214 	add.w	r2, r7, #20
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	4413      	add	r3, r2
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4618      	mov	r0, r3
 8000940:	f004 fbfa 	bl	8005138 <atoi>
 8000944:	4603      	mov	r3, r0
 8000946:	b21a      	sxth	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	801a      	strh	r2, [r3, #0]
	}
	return result;
 800094c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000950:	4618      	mov	r0, r3
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <_ZL9smallItoaiPci>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000968:	2301      	movs	r3, #1
 800096a:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	da07      	bge.n	8000982 <_ZL9smallItoaiPci+0x2a>
		isNegative = true;
 8000972:	2301      	movs	r3, #1
 8000974:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	425b      	negs	r3, r3
 800097a:	60fb      	str	r3, [r7, #12]
		stringLen++;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	fb92 f3f3 	sdiv	r3, r2, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d008      	beq.n	80009a4 <_ZL9smallItoaiPci+0x4c>
		tmpIn = (int)tmpIn/radix;
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	fb92 f3f3 	sdiv	r3, r2, r3
 800099a:	61bb      	str	r3, [r7, #24]
		stringLen++;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	3301      	adds	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 80009a2:	e7f0      	b.n	8000986 <_ZL9smallItoaiPci+0x2e>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	4413      	add	r3, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
    stringLen--;
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	fb93 f2f2 	sdiv	r2, r3, r2
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	fb01 f202 	mul.w	r2, r1, r2
 80009c6:	1a9b      	subs	r3, r3, r2
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	440b      	add	r3, r1
 80009d0:	3230      	adds	r2, #48	; 0x30
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	fb92 f3f3 	sdiv	r3, r2, r3
 80009de:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	617a      	str	r2, [r7, #20]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	bf14      	ite	ne
 80009ea:	2301      	movne	r3, #1
 80009ec:	2300      	moveq	r3, #0
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d000      	beq.n	80009f6 <_ZL9smallItoaiPci+0x9e>
	do {
 80009f4:	e7e0      	b.n	80009b8 <_ZL9smallItoaiPci+0x60>

	if (isNegative) {
 80009f6:	7ffb      	ldrb	r3, [r7, #31]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <_ZL9smallItoaiPci+0xaa>
		*(outBuffer) = '-';
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	222d      	movs	r2, #45	; 0x2d
 8000a00:	701a      	strb	r2, [r3, #0]
	}
}
 8000a02:	bf00      	nop
 8000a04:	3724      	adds	r7, #36	; 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b084      	sub	sp, #16
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1c:	f107 0108 	add.w	r1, r7, #8
 8000a20:	220a      	movs	r2, #10
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff98 	bl	8000958 <_ZL9smallItoaiPci>
	ConsoleIoSendString(out);
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fa1b 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>

	return COMMAND_SUCCESS;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_ZL21ConsoleCommandCommentPKc>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <_ZL18ConsoleCommandHelpPKc>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000a60:	230e      	movs	r3, #14
 8000a62:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d21f      	bcs.n	8000ab2 <_ZL18ConsoleCommandHelpPKc+0x5e>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000a72:	4912      	ldr	r1, [pc, #72]	; (8000abc <_ZL18ConsoleCommandHelpPKc+0x68>)
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	4613      	mov	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f9f0 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <_ZL18ConsoleCommandHelpPKc+0x6c>)
 8000a8a:	f000 f9ed 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	4613      	mov	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	4413      	add	r3, r2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	3308      	adds	r3, #8
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <_ZL18ConsoleCommandHelpPKc+0x68>)
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f9e2 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <_ZL18ConsoleCommandHelpPKc+0x70>)
 8000aa6:	f000 f9df 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	e7da      	b.n	8000a68 <_ZL18ConsoleCommandHelpPKc+0x14>
	}
	return result;
 8000ab2:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	080054c4 	.word	0x080054c4
 8000ac0:	080053a8 	.word	0x080053a8
 8000ac4:	080053ac 	.word	0x080053ac

08000ac8 <_ZL20ConsoleCommandLedRedPKc>:
	}
	return result;
}

static eCommandResult_T ConsoleCommandLedRed(const char buffer[])
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 65535;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ada:	60da      	str	r2, [r3, #12]
	systemState.LEDGreen = 0;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
	systemState.LEDBlue = 0;
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
	return result;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200001e4 	.word	0x200001e4

08000afc <_ZL22ConsoleCommandLedGreenPKc>:

static eCommandResult_T ConsoleCommandLedGreen(const char buffer[])
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000b04:	2300      	movs	r3, #0
 8000b06:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 0;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
	systemState.LEDGreen = 65535;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b14:	611a      	str	r2, [r3, #16]
	systemState.LEDBlue = 0;
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
	return result;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200001e4 	.word	0x200001e4

08000b30 <_ZL21ConsoleCommandLedBluePKc>:

static eCommandResult_T ConsoleCommandLedBlue(const char buffer[])
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 0;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
	systemState.LEDGreen = 0;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
	systemState.LEDBlue = 65535;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4e:	615a      	str	r2, [r3, #20]
	return result;
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200001e4 	.word	0x200001e4

08000b64 <_ZL25ConsoleCommandGetSetpointPKc>:

static eCommandResult_T ConsoleCommandGetSetpoint(const char buffer[])
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString("setpoint = ");
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <_ZL25ConsoleCommandGetSetpointPKc+0x30>)
 8000b6e:	f000 f97b 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
	ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <_ZL25ConsoleCommandGetSetpointPKc+0x34>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff48 	bl	8000a0e <ConsoleSendParamInt16>
	ConsoleIoSendString(STR_ENDLINE);
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <_ZL25ConsoleCommandGetSetpointPKc+0x38>)
 8000b80:	f000 f972 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>

	eCommandResult_T result = COMMAND_SUCCESS;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
	return result;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	080053dc 	.word	0x080053dc
 8000b98:	200001e4 	.word	0x200001e4
 8000b9c:	080053ac 	.word	0x080053ac

08000ba0 <_ZL25ConsoleCommandSetSetpointPKc>:

static eCommandResult_T ConsoleCommandSetSetpoint(const char buffer[])
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	461a      	mov	r2, r3
 8000bae:	2101      	movs	r1, #1
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fe73 	bl	800089c <ConsoleReceiveParamInt16>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d110      	bne.n	8000be2 <_ZL25ConsoleCommandSetSetpointPKc+0x42>
		{
			systemState.setpoint = (uint32_t)parameterInt;
 8000bc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <_ZL25ConsoleCommandSetSetpointPKc+0x4c>)
 8000bc8:	601a      	str	r2, [r3, #0]
			ConsoleIoSendString("Setpoint updated to ");
 8000bca:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <_ZL25ConsoleCommandSetSetpointPKc+0x50>)
 8000bcc:	f000 f94c 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <_ZL25ConsoleCommandSetSetpointPKc+0x4c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff19 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <_ZL25ConsoleCommandSetSetpointPKc+0x54>)
 8000bde:	f000 f943 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200001e4 	.word	0x200001e4
 8000bf0:	080053e8 	.word	0x080053e8
 8000bf4:	080053ac 	.word	0x080053ac

08000bf8 <_ZL27ConsoleCommandGetCurrentPosPKc>:

static eCommandResult_T ConsoleCommandGetCurrentPos(const char buffer[])
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString("Current position = ");
 8000c00:	4809      	ldr	r0, [pc, #36]	; (8000c28 <_ZL27ConsoleCommandGetCurrentPosPKc+0x30>)
 8000c02:	f000 f931 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
	ConsoleSendParamInt16((uint16_t)systemState.currentPos);
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <_ZL27ConsoleCommandGetCurrentPosPKc+0x34>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fefe 	bl	8000a0e <ConsoleSendParamInt16>
	ConsoleIoSendString(STR_ENDLINE);
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <_ZL27ConsoleCommandGetCurrentPosPKc+0x38>)
 8000c14:	f000 f928 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>

	eCommandResult_T result = COMMAND_SUCCESS;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
	return result;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08005400 	.word	0x08005400
 8000c2c:	200001e4 	.word	0x200001e4
 8000c30:	080053ac 	.word	0x080053ac

08000c34 <_ZL21ConsoleCommandSetModePKc>:

static eCommandResult_T ConsoleCommandSetMode(const char buffer[])
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	461a      	mov	r2, r3
 8000c42:	2101      	movs	r1, #1
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff fe29 	bl	800089c <ConsoleReceiveParamInt16>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d110      	bne.n	8000c76 <_ZL21ConsoleCommandSetModePKc+0x42>
		{
			systemState.mode = (uint32_t)parameterInt;
 8000c54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <_ZL21ConsoleCommandSetModePKc+0x4c>)
 8000c5c:	639a      	str	r2, [r3, #56]	; 0x38
			ConsoleIoSendString("Mode updated to ");
 8000c5e:	4809      	ldr	r0, [pc, #36]	; (8000c84 <_ZL21ConsoleCommandSetModePKc+0x50>)
 8000c60:	f000 f902 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.mode);
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <_ZL21ConsoleCommandSetModePKc+0x4c>)
 8000c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fecf 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <_ZL21ConsoleCommandSetModePKc+0x54>)
 8000c72:	f000 f8f9 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200001e4 	.word	0x200001e4
 8000c84:	08005414 	.word	0x08005414
 8000c88:	080053ac 	.word	0x080053ac

08000c8c <_ZL19ConsoleCommandSetKpPKc>:

static eCommandResult_T ConsoleCommandSetKp(const char buffer[])
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fdfd 	bl	800089c <ConsoleReceiveParamInt16>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d110      	bne.n	8000cce <_ZL19ConsoleCommandSetKpPKc+0x42>
		{
			PID.kp = (uint32_t)parameterInt;
 8000cac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <_ZL19ConsoleCommandSetKpPKc+0x4c>)
 8000cb4:	615a      	str	r2, [r3, #20]
			ConsoleIoSendString("Kp updated to ");
 8000cb6:	4809      	ldr	r0, [pc, #36]	; (8000cdc <_ZL19ConsoleCommandSetKpPKc+0x50>)
 8000cb8:	f000 f8d6 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.kp);
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <_ZL19ConsoleCommandSetKpPKc+0x4c>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fea3 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <_ZL19ConsoleCommandSetKpPKc+0x54>)
 8000cca:	f000 f8cd 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000224 	.word	0x20000224
 8000cdc:	08005428 	.word	0x08005428
 8000ce0:	080053ac 	.word	0x080053ac

08000ce4 <_ZL19ConsoleCommandSetKiPKc>:

static eCommandResult_T ConsoleCommandSetKi(const char buffer[])
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff fdd1 	bl	800089c <ConsoleReceiveParamInt16>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d110      	bne.n	8000d26 <_ZL19ConsoleCommandSetKiPKc+0x42>
		{
			PID.ki = (uint32_t)parameterInt;
 8000d04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <_ZL19ConsoleCommandSetKiPKc+0x4c>)
 8000d0c:	619a      	str	r2, [r3, #24]
			ConsoleIoSendString("Ki updated to ");
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <_ZL19ConsoleCommandSetKiPKc+0x50>)
 8000d10:	f000 f8aa 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.ki);
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <_ZL19ConsoleCommandSetKiPKc+0x4c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fe77 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <_ZL19ConsoleCommandSetKiPKc+0x54>)
 8000d22:	f000 f8a1 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000224 	.word	0x20000224
 8000d34:	08005438 	.word	0x08005438
 8000d38:	080053ac 	.word	0x080053ac

08000d3c <_ZL19ConsoleCommandSetKdPKc>:

static eCommandResult_T ConsoleCommandSetKd(const char buffer[])
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff fda5 	bl	800089c <ConsoleReceiveParamInt16>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d110      	bne.n	8000d7e <_ZL19ConsoleCommandSetKdPKc+0x42>
		{
			PID.kd = (uint32_t)parameterInt;
 8000d5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <_ZL19ConsoleCommandSetKdPKc+0x4c>)
 8000d64:	61da      	str	r2, [r3, #28]
			ConsoleIoSendString("Kd updated to ");
 8000d66:	4809      	ldr	r0, [pc, #36]	; (8000d8c <_ZL19ConsoleCommandSetKdPKc+0x50>)
 8000d68:	f000 f87e 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.kd);
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <_ZL19ConsoleCommandSetKdPKc+0x4c>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fe4b 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <_ZL19ConsoleCommandSetKdPKc+0x54>)
 8000d7a:	f000 f875 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000224 	.word	0x20000224
 8000d8c:	08005448 	.word	0x08005448
 8000d90:	080053ac 	.word	0x080053ac

08000d94 <_ZL17ConsoleCommandVerPKc>:


static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <_ZL17ConsoleCommandVerPKc+0x24>)
 8000da2:	f000 f861 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(STR_ENDLINE);
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <_ZL17ConsoleCommandVerPKc+0x28>)
 8000da8:	f000 f85e 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
	return result;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	08005458 	.word	0x08005458
 8000dbc:	080053ac 	.word	0x080053ac

08000dc0 <_Z23ConsoleCommandsGetTablev>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <_Z23ConsoleCommandsGetTablev+0x10>)
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	080054c4 	.word	0x080054c4

08000dd4 <_Z13ConsoleIoInitv>:
#include <global.h>

UART_HandleTypeDef huart1;

eConsoleError ConsoleIoInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	    huart1.Instance = USART1;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <_Z13ConsoleIoInitv+0x58>)
 8000dda:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <_Z13ConsoleIoInitv+0x5c>)
 8000ddc:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_Z13ConsoleIoInitv+0x58>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_Z13ConsoleIoInitv+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <_Z13ConsoleIoInitv+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <_Z13ConsoleIoInitv+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <_Z13ConsoleIoInitv+0x58>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <_Z13ConsoleIoInitv+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <_Z13ConsoleIoInitv+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e0a:	4808      	ldr	r0, [pc, #32]	; (8000e2c <_Z13ConsoleIoInitv+0x58>)
 8000e0c:	f003 fd30 	bl	8004870 <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf14      	ite	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	2300      	moveq	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <_Z13ConsoleIoInitv+0x50>
		{
		  Error_Handler();
 8000e20:	f000 fbb6 	bl	8001590 <Error_Handler>
		}


	return CONSOLE_SUCCESS;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000194 	.word	0x20000194
 8000e30:	40011000 	.word	0x40011000

08000e34 <_Z16ConsoleIoReceivePhmPm>:
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]


	HAL_UART_Receive(&huart1, (uint8_t *)buffer, bufferLength, 100);
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	68f9      	ldr	r1, [r7, #12]
 8000e48:	4806      	ldr	r0, [pc, #24]	; (8000e64 <_Z16ConsoleIoReceivePhmPm+0x30>)
 8000e4a:	f003 fdf0 	bl	8004a2e <HAL_UART_Receive>
	*readLength = strlen((const char*)buffer);
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f7ff f9cc 	bl	80001ec <strlen>
 8000e54:	4602      	mov	r2, r0
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]

	return CONSOLE_SUCCESS;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000194 	.word	0x20000194

08000e68 <_Z19ConsoleIoSendStringPKc>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer) , 10);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff f9bb 	bl	80001ec <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <_Z19ConsoleIoSendStringPKc+0x28>)
 8000e80:	f003 fd43 	bl	800490a <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000194 	.word	0x20000194

08000e94 <_ZN7encoder4initEv>:
#include <main.h>
#include <global.h>
#include <stdint.h>

void encoder::init()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	//SPI
	hspi1.Instance = SPI1;
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000e9c:	4a34      	ldr	r2, [pc, #208]	; (8000f70 <_ZN7encoder4initEv+0xdc>)
 8000e9e:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea0:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000ea2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea6:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea8:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eb4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000ee4:	220a      	movs	r2, #10
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ee8:	4820      	ldr	r0, [pc, #128]	; (8000f6c <_ZN7encoder4initEv+0xd8>)
 8000eea:	f002 f96d 	bl	80031c8 <HAL_SPI_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf14      	ite	ne
 8000ef4:	2301      	movne	r3, #1
 8000ef6:	2300      	moveq	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <_ZN7encoder4initEv+0x6e>
	{
	  Error_Handler();
 8000efe:	f000 f8ef 	bl	80010e0 <_ZN7encoder13Error_HandlerEv>
	}

	//CS pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2110      	movs	r1, #16
 8000f06:	481b      	ldr	r0, [pc, #108]	; (8000f74 <_ZN7encoder4initEv+0xe0>)
 8000f08:	f001 fc84 	bl	8002814 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <_ZN7encoder4initEv+0xe4>)
 8000f0e:	2210      	movs	r2, #16
 8000f10:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <_ZN7encoder4initEv+0xe4>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <_ZN7encoder4initEv+0xe4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <_ZN7encoder4initEv+0xe4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	4914      	ldr	r1, [pc, #80]	; (8000f78 <_ZN7encoder4initEv+0xe4>)
 8000f26:	4813      	ldr	r0, [pc, #76]	; (8000f74 <_ZN7encoder4initEv+0xe0>)
 8000f28:	f001 fab0 	bl	800248c <HAL_GPIO_Init>

	//set CS high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2110      	movs	r1, #16
 8000f30:	4810      	ldr	r0, [pc, #64]	; (8000f74 <_ZN7encoder4initEv+0xe0>)
 8000f32:	f001 fc6f 	bl	8002814 <HAL_GPIO_WritePin>

	uint16_t readBit = 0x8000;
 8000f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f3a:	80fb      	strh	r3, [r7, #6]
	uint16_t readAngleAddress = 0x3fff;
 8000f3c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000f40:	80bb      	strh	r3, [r7, #4]
	readCommand = (readBit | readAngleAddress);
 8000f42:	88fa      	ldrh	r2, [r7, #6]
 8000f44:	88bb      	ldrh	r3, [r7, #4]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <_ZN7encoder4initEv+0xe8>)
 8000f4c:	801a      	strh	r2, [r3, #0]
	dummyCommand = 0x0;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <_ZN7encoder4initEv+0xec>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]

	valueMask = 0x3fff;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <_ZN7encoder4initEv+0xf0>)
 8000f56:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000f5a:	801a      	strh	r2, [r3, #0]
	value = 0;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <_ZN7encoder4initEv+0xf4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	801a      	strh	r2, [r3, #0]

}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000250 	.word	0x20000250
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40020000 	.word	0x40020000
 8000f78:	20000380 	.word	0x20000380
 8000f7c:	200001d8 	.word	0x200001d8
 8000f80:	200001da 	.word	0x200001da
 8000f84:	200001e2 	.word	0x200001e2
 8000f88:	200001e0 	.word	0x200001e0

08000f8c <_ZN7encoder6getRawEv>:

uint32_t encoder::getRaw()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af02      	add	r7, sp, #8
	//Setup commands
	uint16_t test = 0xffff;
 8000f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f96:	807b      	strh	r3, [r7, #2]
	uint16_t test2 = 0xAAAA;
 8000f98:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000f9c:	80fb      	strh	r3, [r7, #6]
	uint16_t readValue = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	80bb      	strh	r3, [r7, #4]
	uint8_t spi_buf[2];

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	4822      	ldr	r0, [pc, #136]	; (8001030 <_ZN7encoder6getRawEv+0xa4>)
 8000fa8:	f001 fc34 	bl	8002814 <HAL_GPIO_WritePin>
	sendBuffer = &test;
 8000fac:	4a21      	ldr	r2, [pc, #132]	; (8001034 <_ZN7encoder6getRawEv+0xa8>)
 8000fae:	1cbb      	adds	r3, r7, #2
 8000fb0:	6013      	str	r3, [r2, #0]
	//HAL_SPI_Transmit(&hspi1, (uint8_t*)sendBuffer, 1, 1);
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)sendBuffer,spi_buf, 1, 100);
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <_ZN7encoder6getRawEv+0xa8>)
 8000fb4:	6819      	ldr	r1, [r3, #0]
 8000fb6:	463a      	mov	r2, r7
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	481e      	ldr	r0, [pc, #120]	; (8001038 <_ZN7encoder6getRawEv+0xac>)
 8000fc0:	f002 f98b 	bl	80032da <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	4819      	ldr	r0, [pc, #100]	; (8001030 <_ZN7encoder6getRawEv+0xa4>)
 8000fca:	f001 fc23 	bl	8002814 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	4817      	ldr	r0, [pc, #92]	; (8001030 <_ZN7encoder6getRawEv+0xa4>)
 8000fd4:	f001 fc1e 	bl	8002814 <HAL_GPIO_WritePin>
	sendBuffer = &test;
 8000fd8:	4a16      	ldr	r2, [pc, #88]	; (8001034 <_ZN7encoder6getRawEv+0xa8>)
 8000fda:	1cbb      	adds	r3, r7, #2
 8000fdc:	6013      	str	r3, [r2, #0]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)sendBuffer,spi_buf, 1, 100);
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_ZN7encoder6getRawEv+0xa8>)
 8000fe0:	6819      	ldr	r1, [r3, #0]
 8000fe2:	463a      	mov	r2, r7
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	4813      	ldr	r0, [pc, #76]	; (8001038 <_ZN7encoder6getRawEv+0xac>)
 8000fec:	f002 f975 	bl	80032da <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	480e      	ldr	r0, [pc, #56]	; (8001030 <_ZN7encoder6getRawEv+0xa4>)
 8000ff6:	f001 fc0d 	bl	8002814 <HAL_GPIO_WritePin>


	readValue = spi_buf[0] | (spi_buf[1] << 8);
 8000ffa:	783b      	ldrb	r3, [r7, #0]
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	787b      	ldrb	r3, [r7, #1]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21b      	sxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b21b      	sxth	r3, r3
 8001008:	80bb      	strh	r3, [r7, #4]
	value = readValue & valueMask;
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <_ZN7encoder6getRawEv+0xb0>)
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	88bb      	ldrh	r3, [r7, #4]
 8001010:	4013      	ands	r3, r2
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <_ZN7encoder6getRawEv+0xb4>)
 8001016:	801a      	strh	r2, [r3, #0]
	systemState.currentPos = (uint32_t)value;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <_ZN7encoder6getRawEv+0xb4>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <_ZN7encoder6getRawEv+0xb8>)
 8001020:	609a      	str	r2, [r3, #8]
	return (uint32_t)value;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <_ZN7encoder6getRawEv+0xb4>)
 8001024:	881b      	ldrh	r3, [r3, #0]

}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020000 	.word	0x40020000
 8001034:	200001dc 	.word	0x200001dc
 8001038:	20000250 	.word	0x20000250
 800103c:	200001e2 	.word	0x200001e2
 8001040:	200001e0 	.word	0x200001e0
 8001044:	200001e4 	.word	0x200001e4

08001048 <_ZN7encoder8getAngleEv>:

float encoder::getAngle(){
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	int32_t adjustedPos = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
	uint32_t encoderMax = 16384;
 8001054:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001058:	613b      	str	r3, [r7, #16]
	float encoderScaler = 0.0219;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <_ZN7encoder8getAngleEv+0x8c>)
 800105c:	60fb      	str	r3, [r7, #12]
	float angle = 0;
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]

	this->getRaw();
 8001064:	f7ff ff92 	bl	8000f8c <_ZN7encoder6getRawEv>
	if((systemState.currentPos - systemState.zeroRaw) > 0){
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <_ZN7encoder8getAngleEv+0x90>)
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <_ZN7encoder8getAngleEv+0x90>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	dd06      	ble.n	8001084 <_ZN7encoder8getAngleEv+0x3c>
		adjustedPos = systemState.currentPos - systemState.zeroRaw;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <_ZN7encoder8getAngleEv+0x90>)
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <_ZN7encoder8getAngleEv+0x90>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e00f      	b.n	80010a4 <_ZN7encoder8getAngleEv+0x5c>
	}
	else if((systemState.currentPos - systemState.zeroRaw) < 0){
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <_ZN7encoder8getAngleEv+0x90>)
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <_ZN7encoder8getAngleEv+0x90>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	da08      	bge.n	80010a4 <_ZN7encoder8getAngleEv+0x5c>
		adjustedPos = (encoderMax - systemState.zeroRaw) + systemState.currentPos;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <_ZN7encoder8getAngleEv+0x90>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	461a      	mov	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <_ZN7encoder8getAngleEv+0x90>)
 800109e:	6892      	ldr	r2, [r2, #8]
 80010a0:	4413      	add	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
	}
	angle = 360 - ((float)adjustedPos * encoderScaler);
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80010dc <_ZN7encoder8getAngleEv+0x94>
 80010ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010be:	edc7 7a02 	vstr	s15, [r7, #8]
	return angle;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	ee07 3a90 	vmov	s15, r3

}
 80010c8:	eeb0 0a67 	vmov.f32	s0, s15
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	3cb367a1 	.word	0x3cb367a1
 80010d8:	200001e4 	.word	0x200001e4
 80010dc:	43b40000 	.word	0x43b40000

080010e0 <_ZN7encoder13Error_HandlerEv>:

void encoder::Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <_ZN7encoder13Error_HandlerEv+0x8>
	...

080010ec <main>:
GPIO_InitTypeDef GPIO_InitStruct = {0};

int timer_val = 0;

int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
  //Initialize the various parts of the system (each is encapsulated in its own c++ class with the exception of globals above)
  Machine::init();
 80010f2:	f000 fe6d 	bl	8001dd0 <_ZN7Machine4initEv>
  //led::init();
  //motor::init();
  //encoder::init();

  motor motor1;
  motor1.init();
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fa4f 	bl	800159c <_ZN5motor4initEv>
  motor *motor1ptr;
  motor1ptr = &motor1;
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	60fb      	str	r3, [r7, #12]

  encoder encoder1;
  encoder1.init();
 8001102:	f7ff fec7 	bl	8000e94 <_ZN7encoder4initEv>
  encoder *encoder1ptr;
  encoder1ptr = &encoder1;
 8001106:	463b      	mov	r3, r7
 8001108:	60bb      	str	r3, [r7, #8]


  systemState.setpoint = 100;
 800110a:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <main+0x14c>)
 800110c:	2264      	movs	r2, #100	; 0x64
 800110e:	601a      	str	r2, [r3, #0]
  systemState.setAngle = 45;
 8001110:	4b49      	ldr	r3, [pc, #292]	; (8001238 <main+0x14c>)
 8001112:	4a4a      	ldr	r2, [pc, #296]	; (800123c <main+0x150>)
 8001114:	605a      	str	r2, [r3, #4]
  systemState.currentPos = 0;
 8001116:	4b48      	ldr	r3, [pc, #288]	; (8001238 <main+0x14c>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  systemState.LEDRed = 0;
 800111c:	4b46      	ldr	r3, [pc, #280]	; (8001238 <main+0x14c>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  systemState.LEDGreen = 0;
 8001122:	4b45      	ldr	r3, [pc, #276]	; (8001238 <main+0x14c>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  systemState.LEDBlue = 0;
 8001128:	4b43      	ldr	r3, [pc, #268]	; (8001238 <main+0x14c>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  systemState.currentSpeed = 0;
 800112e:	4b42      	ldr	r3, [pc, #264]	; (8001238 <main+0x14c>)
 8001130:	2200      	movs	r2, #0
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
  systemState.motorOnOff = 0;
 8001134:	4b40      	ldr	r3, [pc, #256]	; (8001238 <main+0x14c>)
 8001136:	2200      	movs	r2, #0
 8001138:	62da      	str	r2, [r3, #44]	; 0x2c
  systemState.mode = 0;
 800113a:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <main+0x14c>)
 800113c:	2200      	movs	r2, #0
 800113e:	639a      	str	r2, [r3, #56]	; 0x38
  systemState.zeroRaw = -1;
 8001140:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <main+0x14c>)
 8001142:	f04f 32ff 	mov.w	r2, #4294967295
 8001146:	631a      	str	r2, [r3, #48]	; 0x30
  systemState.currentMode = 0;
 8001148:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <main+0x14c>)
 800114a:	2200      	movs	r2, #0
 800114c:	63da      	str	r2, [r3, #60]	; 0x3c

  PID.lastTime = 0;
 800114e:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <main+0x154>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
  PID.loopTime = 100;
 8001154:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <main+0x154>)
 8001156:	2264      	movs	r2, #100	; 0x64
 8001158:	605a      	str	r2, [r3, #4]
  PID.angleErrorSum = 0;
 800115a:	4b39      	ldr	r3, [pc, #228]	; (8001240 <main+0x154>)
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  PID.angleLastError = 0;
 8001162:	4b37      	ldr	r3, [pc, #220]	; (8001240 <main+0x154>)
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  PID.angleErrorDer = 0;
 800116a:	4b35      	ldr	r3, [pc, #212]	; (8001240 <main+0x154>)
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  PID.kp = 1;
 8001172:	4b33      	ldr	r3, [pc, #204]	; (8001240 <main+0x154>)
 8001174:	2201      	movs	r2, #1
 8001176:	615a      	str	r2, [r3, #20]
  PID.ki = 1;
 8001178:	4b31      	ldr	r3, [pc, #196]	; (8001240 <main+0x154>)
 800117a:	2201      	movs	r2, #1
 800117c:	619a      	str	r2, [r3, #24]
  PID.kd = 0;
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <main+0x154>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  PID.minOut = -100;
 8001184:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <main+0x154>)
 8001186:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
  PID.maxOut = 100;
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <main+0x154>)
 800118e:	2264      	movs	r2, #100	; 0x64
 8001190:	621a      	str	r2, [r3, #32]
  PID.output = 0;
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <main+0x154>)
 8001194:	2200      	movs	r2, #0
 8001196:	629a      	str	r2, [r3, #40]	; 0x28

  ConsoleInit();
 8001198:	f7ff fa5c 	bl	8000654 <ConsoleInit>


  //timer_val = __HAL_TIM_GET_COUNTER(&htim14);
  while (1)
  {
	  switch(systemState.mode){
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <main+0x14c>)
 800119e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d037      	beq.n	8001214 <main+0x128>
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d839      	bhi.n	800121c <main+0x130>
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <main+0xc6>
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d00e      	beq.n	80011ce <main+0xe2>
 80011b0:	e034      	b.n	800121c <main+0x130>
	  case 0:
		  	  if(systemState.mode == systemState.currentMode){
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <main+0x14c>)
 80011b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <main+0x14c>)
 80011b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d033      	beq.n	8001226 <main+0x13a>
		  		  //Do nothing already in Off mode
		  	  }
		  	  else{
		  		  motor1.turnOffMotor();
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fb85 	bl	80018d0 <_ZN5motor12turnOffMotorEv>
		  		  systemState.currentMode = 0;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <main+0x14c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
	  	  	  }
		  	  break;
 80011cc:	e02b      	b.n	8001226 <main+0x13a>
	  case 1:
		  	  if(systemState.mode != systemState.currentMode){
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <main+0x14c>)
 80011d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <main+0x14c>)
 80011d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d010      	beq.n	80011fc <main+0x110>
		  		  //Motor needs to be turned on
		  		  motor1.turnOnMotor();
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fb33 	bl	8001848 <_ZN5motor11turnOnMotorEv>
		  		  if(systemState.zeroRaw < 0){
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <main+0x14c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da05      	bge.n	80011f6 <main+0x10a>
		  			  motor1.zeroMotor(&encoder1);
 80011ea:	463a      	mov	r2, r7
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fc1f 	bl	8001a34 <_ZN5motor9zeroMotorEP7encoder>
		  		  }
		  		  systemState.currentMode = 1;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <main+0x14c>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  }
		  	  //Code for control loop
		  	  controlLoop(&encoder1);
 80011fc:	463b      	mov	r3, r7
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f83c 	bl	800127c <_Z11controlLoopP7encoder>
		  	  motor1.setSpeed(PID.output);
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <main+0x154>)
 8001206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fb8b 	bl	8001928 <_ZN5motor8setSpeedEi>
		  	  break;
 8001212:	e009      	b.n	8001228 <main+0x13c>

	  case 2:
		  	  //code for speed mode
		  	  systemState.currentMode = 2;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <main+0x14c>)
 8001216:	2202      	movs	r2, #2
 8001218:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  break;
 800121a:	e005      	b.n	8001228 <main+0x13c>

	  default:
		  motor1.turnOffMotor();
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fb56 	bl	80018d0 <_ZN5motor12turnOffMotorEv>
 8001224:	e000      	b.n	8001228 <main+0x13c>
		  	  break;
 8001226:	bf00      	nop
	  //motor1.setSpeed(0);
	  //HAL_Delay(50000);
	  ///motor1.setSpeed(80);
	  //HAL_Delay(5000);

	  ConsoleProcess(&encoder1);
 8001228:	463b      	mov	r3, r7
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fa40 	bl	80006b0 <ConsoleProcess>

	  encoder::getRaw();
 8001230:	f7ff feac 	bl	8000f8c <_ZN7encoder6getRawEv>
	  switch(systemState.mode){
 8001234:	e7b2      	b.n	800119c <main+0xb0>
 8001236:	bf00      	nop
 8001238:	200001e4 	.word	0x200001e4
 800123c:	42340000 	.word	0x42340000
 8001240:	20000224 	.word	0x20000224

08001244 <HAL_TIM_PeriodElapsedCallback>:
  }
}

//motor steping interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	if(htim == &htim14){
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d10b      	bne.n	800126c <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)1);  //STP
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800125c:	f001 fada 	bl	8002814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001266:	4804      	ldr	r0, [pc, #16]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001268:	f001 fad4 	bl	8002814 <HAL_GPIO_WritePin>
	}

}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200002f0 	.word	0x200002f0
 8001278:	40021000 	.word	0x40021000

0800127c <_Z11controlLoopP7encoder>:

int32_t controlLoop(encoder *encoder)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	int32_t waiting = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
	int32_t timeNow = (int32_t)__HAL_TIM_GET_COUNTER(&htim13);
 8001288:	4bb6      	ldr	r3, [pc, #728]	; (8001564 <_Z11controlLoopP7encoder+0x2e8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	617b      	str	r3, [r7, #20]
	int32_t timeSinceLast = (int32_t)(timeNow - PID.lastTime);
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	4bb5      	ldr	r3, [pc, #724]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	613b      	str	r3, [r7, #16]

		if(timeSinceLast > PID.loopTime)
 800129a:	4bb3      	ldr	r3, [pc, #716]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f080 8159 	bcs.w	8001558 <_Z11controlLoopP7encoder+0x2dc>
		{
			//Calculate Errors
			float currentAngle = encoder->getAngle();
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fece 	bl	8001048 <_ZN7encoder8getAngleEv>
 80012ac:	ed87 0a03 	vstr	s0, [r7, #12]
			float angleError = systemState.setAngle - currentAngle;
 80012b0:	4bae      	ldr	r3, [pc, #696]	; (800156c <_Z11controlLoopP7encoder+0x2f0>)
 80012b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80012b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012be:	edc7 7a02 	vstr	s15, [r7, #8]
			PID.angleErrorSum += (angleError * (timeSinceLast/1000));
 80012c2:	4ba9      	ldr	r3, [pc, #676]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 80012c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4aa9      	ldr	r2, [pc, #676]	; (8001570 <_Z11controlLoopP7encoder+0x2f4>)
 80012cc:	fb82 1203 	smull	r1, r2, r2, r3
 80012d0:	1192      	asrs	r2, r2, #6
 80012d2:	17db      	asrs	r3, r3, #31
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ea:	4b9f      	ldr	r3, [pc, #636]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 80012ec:	edc3 7a02 	vstr	s15, [r3, #8]
			PID.angleErrorDer = (angleError - PID.angleLastError)/(timeSinceLast/1000);
 80012f0:	4b9d      	ldr	r3, [pc, #628]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 80012f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80012fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4a9b      	ldr	r2, [pc, #620]	; (8001570 <_Z11controlLoopP7encoder+0x2f4>)
 8001302:	fb82 1203 	smull	r1, r2, r2, r3
 8001306:	1192      	asrs	r2, r2, #6
 8001308:	17db      	asrs	r3, r3, #31
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001318:	4b93      	ldr	r3, [pc, #588]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 800131a:	edc3 7a04 	vstr	s15, [r3, #16]

			//Compute PID output
			float prop = PID.kp * angleError;
 800131e:	4b92      	ldr	r3, [pc, #584]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132a:	ed97 7a02 	vldr	s14, [r7, #8]
 800132e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001332:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			float integral = PID.ki * PID.angleErrorSum;
 8001336:	4b8c      	ldr	r3, [pc, #560]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001342:	4b89      	ldr	r3, [pc, #548]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001344:	edd3 7a02 	vldr	s15, [r3, #8]
 8001348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134c:	edc7 7a08 	vstr	s15, [r7, #32]
			float derivitive = PID.kd * PID.angleErrorDer;
 8001350:	4b85      	ldr	r3, [pc, #532]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800135c:	4b82      	ldr	r3, [pc, #520]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 800135e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001366:	edc7 7a07 	vstr	s15, [r7, #28]

			//Limit Outputs if necessary
			if(prop < PID.minOut){prop = PID.minOut;}
 800136a:	4b7f      	ldr	r3, [pc, #508]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001376:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800137a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	d507      	bpl.n	8001394 <_Z11controlLoopP7encoder+0x118>
 8001384:	4b78      	ldr	r3, [pc, #480]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001390:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			if(prop > PID.maxOut){prop = PID.maxOut;}
 8001394:	4b74      	ldr	r3, [pc, #464]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	ee07 3a90 	vmov	s15, r3
 800139c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	dd07      	ble.n	80013be <_Z11controlLoopP7encoder+0x142>
 80013ae:	4b6e      	ldr	r3, [pc, #440]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			if(integral < PID.minOut){integral = PID.minOut;}
 80013be:	4b6a      	ldr	r3, [pc, #424]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80013ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d6:	d507      	bpl.n	80013e8 <_Z11controlLoopP7encoder+0x16c>
 80013d8:	4b63      	ldr	r3, [pc, #396]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e4:	edc7 7a08 	vstr	s15, [r7, #32]
			if(integral > PID.maxOut){integral = PID.maxOut;}
 80013e8:	4b5f      	ldr	r3, [pc, #380]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80013f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	dd07      	ble.n	8001412 <_Z11controlLoopP7encoder+0x196>
 8001402:	4b59      	ldr	r3, [pc, #356]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	edc7 7a08 	vstr	s15, [r7, #32]
			if(derivitive < PID.minOut){derivitive = PID.minOut;}
 8001412:	4b55      	ldr	r3, [pc, #340]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142a:	d507      	bpl.n	800143c <_Z11controlLoopP7encoder+0x1c0>
 800142c:	4b4e      	ldr	r3, [pc, #312]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	edc7 7a07 	vstr	s15, [r7, #28]
			if(derivitive > PID.maxOut){derivitive = PID.maxOut;}
 800143c:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001448:	ed97 7a07 	vldr	s14, [r7, #28]
 800144c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	dd07      	ble.n	8001466 <_Z11controlLoopP7encoder+0x1ea>
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001462:	edc7 7a07 	vstr	s15, [r7, #28]


			//Final output calc
			PID.output = (int32_t)(prop + integral + derivitive);
 8001466:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800146a:	edd7 7a08 	vldr	s15, [r7, #32]
 800146e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001472:	edd7 7a07 	vldr	s15, [r7, #28]
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147e:	ee17 2a90 	vmov	r2, s15
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001484:	629a      	str	r2, [r3, #40]	; 0x28

			//update old variables
			PID.angleLastError = angleError;
 8001486:	4a38      	ldr	r2, [pc, #224]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
			PID.lastTime = timeNow;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	4a36      	ldr	r2, [pc, #216]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 8001490:	6013      	str	r3, [r2, #0]

			//ConsoleIoInit();
			ConsoleIoSendString("Set Angle = ");
 8001492:	4838      	ldr	r0, [pc, #224]	; (8001574 <_Z11controlLoopP7encoder+0x2f8>)
 8001494:	f7ff fce8 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.setAngle);
 8001498:	4b34      	ldr	r3, [pc, #208]	; (800156c <_Z11controlLoopP7encoder+0x2f0>)
 800149a:	edd3 7a01 	vldr	s15, [r3, #4]
 800149e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014a2:	ee17 3a90 	vmov	r3, s15
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff faaf 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(" Current Angle = ");
 80014b0:	4831      	ldr	r0, [pc, #196]	; (8001578 <_Z11controlLoopP7encoder+0x2fc>)
 80014b2:	f7ff fcd9 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)currentAngle);
 80014b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014be:	ee17 3a90 	vmov	r3, s15
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff faa1 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(" Encoder Raw = ");
 80014cc:	482b      	ldr	r0, [pc, #172]	; (800157c <_Z11controlLoopP7encoder+0x300>)
 80014ce:	f7ff fccb 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.currentPos);
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <_Z11controlLoopP7encoder+0x2f0>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fa98 	bl	8000a0e <ConsoleSendParamInt16>
			//ConsoleIoSendString(" Encoder Zero = ");
			//ConsoleSendParamInt16((uint16_t)systemState.zeroRaw);
			ConsoleIoSendString(" Output = ");
 80014de:	4828      	ldr	r0, [pc, #160]	; (8001580 <_Z11controlLoopP7encoder+0x304>)
 80014e0:	f7ff fcc2 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.output);
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <_Z11controlLoopP7encoder+0x2ec>)
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fa8f 	bl	8000a0e <ConsoleSendParamInt16>
			ConsoleIoSendString(" Error = ");
 80014f0:	4824      	ldr	r0, [pc, #144]	; (8001584 <_Z11controlLoopP7encoder+0x308>)
 80014f2:	f7ff fcb9 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
			if(angleError > 0){ConsoleSendParamInt16((uint16_t)angleError);}
 80014f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80014fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	dd0b      	ble.n	800151c <_Z11controlLoopP7encoder+0x2a0>
 8001504:	edd7 7a02 	vldr	s15, [r7, #8]
 8001508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800150c:	ee17 3a90 	vmov	r3, s15
 8001510:	b29b      	uxth	r3, r3
 8001512:	b21b      	sxth	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fa7a 	bl	8000a0e <ConsoleSendParamInt16>
 800151a:	e016      	b.n	800154a <_Z11controlLoopP7encoder+0x2ce>
			else if (angleError < 0){
 800151c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001528:	d50f      	bpl.n	800154a <_Z11controlLoopP7encoder+0x2ce>
				ConsoleIoSendString("-");
 800152a:	4817      	ldr	r0, [pc, #92]	; (8001588 <_Z11controlLoopP7encoder+0x30c>)
 800152c:	f7ff fc9c 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>
				ConsoleSendParamInt16((uint16_t)(angleError * -1));
 8001530:	edd7 7a02 	vldr	s15, [r7, #8]
 8001534:	eef1 7a67 	vneg.f32	s15, s15
 8001538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800153c:	ee17 3a90 	vmov	r3, s15
 8001540:	b29b      	uxth	r3, r3
 8001542:	b21b      	sxth	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fa62 	bl	8000a0e <ConsoleSendParamInt16>
			}
			ConsoleIoSendString(STR_ENDLINE);
 800154a:	4810      	ldr	r0, [pc, #64]	; (800158c <_Z11controlLoopP7encoder+0x310>)
 800154c:	f7ff fc8c 	bl	8000e68 <_Z19ConsoleIoSendStringPKc>

			waiting = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
			return 1;
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <_Z11controlLoopP7encoder+0x2de>
		}
		return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3728      	adds	r7, #40	; 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200002a8 	.word	0x200002a8
 8001568:	20000224 	.word	0x20000224
 800156c:	200001e4 	.word	0x200001e4
 8001570:	10624dd3 	.word	0x10624dd3
 8001574:	08005470 	.word	0x08005470
 8001578:	08005480 	.word	0x08005480
 800157c:	08005494 	.word	0x08005494
 8001580:	080054a4 	.word	0x080054a4
 8001584:	080054b0 	.word	0x080054b0
 8001588:	080054bc 	.word	0x080054bc
 800158c:	080054c0 	.word	0x080054c0

08001590 <Error_Handler>:

void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	e7fe      	b.n	8001598 <Error_Handler+0x8>
	...

0800159c <_ZN5motor4initEv>:
#include <main.h>
#include <global.h>
#include <cstdlib>

void motor::init()
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]


	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
 80015a8:	4b9e      	ldr	r3, [pc, #632]	; (8001824 <_ZN5motor4initEv+0x288>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	4a9d      	ldr	r2, [pc, #628]	; (8001824 <_ZN5motor4initEv+0x288>)
 80015ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b2:	6313      	str	r3, [r2, #48]	; 0x30
 80015b4:	4b9b      	ldr	r3, [pc, #620]	; (8001824 <_ZN5motor4initEv+0x288>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	4b97      	ldr	r3, [pc, #604]	; (8001824 <_ZN5motor4initEv+0x288>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	4a96      	ldr	r2, [pc, #600]	; (8001824 <_ZN5motor4initEv+0x288>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6313      	str	r3, [r2, #48]	; 0x30
 80015d0:	4b94      	ldr	r3, [pc, #592]	; (8001824 <_ZN5motor4initEv+0x288>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	623b      	str	r3, [r7, #32]
 80015da:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	4b90      	ldr	r3, [pc, #576]	; (8001824 <_ZN5motor4initEv+0x288>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	4a8f      	ldr	r2, [pc, #572]	; (8001824 <_ZN5motor4initEv+0x288>)
 80015e6:	f043 0320 	orr.w	r3, r3, #32
 80015ea:	6313      	str	r3, [r2, #48]	; 0x30
 80015ec:	4b8d      	ldr	r3, [pc, #564]	; (8001824 <_ZN5motor4initEv+0x288>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	4b89      	ldr	r3, [pc, #548]	; (8001824 <_ZN5motor4initEv+0x288>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4a88      	ldr	r2, [pc, #544]	; (8001824 <_ZN5motor4initEv+0x288>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6313      	str	r3, [r2, #48]	; 0x30
 8001608:	4b86      	ldr	r3, [pc, #536]	; (8001824 <_ZN5motor4initEv+0x288>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	4b82      	ldr	r3, [pc, #520]	; (8001824 <_ZN5motor4initEv+0x288>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	4a81      	ldr	r2, [pc, #516]	; (8001824 <_ZN5motor4initEv+0x288>)
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	6313      	str	r3, [r2, #48]	; 0x30
 8001624:	4b7f      	ldr	r3, [pc, #508]	; (8001824 <_ZN5motor4initEv+0x288>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	4b7b      	ldr	r3, [pc, #492]	; (8001824 <_ZN5motor4initEv+0x288>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4a7a      	ldr	r2, [pc, #488]	; (8001824 <_ZN5motor4initEv+0x288>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	6313      	str	r3, [r2, #48]	; 0x30
 8001640:	4b78      	ldr	r3, [pc, #480]	; (8001824 <_ZN5motor4initEv+0x288>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	4b74      	ldr	r3, [pc, #464]	; (8001824 <_ZN5motor4initEv+0x288>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4a73      	ldr	r2, [pc, #460]	; (8001824 <_ZN5motor4initEv+0x288>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6313      	str	r3, [r2, #48]	; 0x30
 800165c:	4b71      	ldr	r3, [pc, #452]	; (8001824 <_ZN5motor4initEv+0x288>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	4b6d      	ldr	r3, [pc, #436]	; (8001824 <_ZN5motor4initEv+0x288>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	4a6c      	ldr	r2, [pc, #432]	; (8001824 <_ZN5motor4initEv+0x288>)
 8001672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001676:	6313      	str	r3, [r2, #48]	; 0x30
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <_ZN5motor4initEv+0x288>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800168a:	4867      	ldr	r0, [pc, #412]	; (8001828 <_ZN5motor4initEv+0x28c>)
 800168c:	f001 f8c2 	bl	8002814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8001696:	4865      	ldr	r0, [pc, #404]	; (800182c <_ZN5motor4initEv+0x290>)
 8001698:	f001 f8bc 	bl	8002814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 80016a2:	4863      	ldr	r0, [pc, #396]	; (8001830 <_ZN5motor4initEv+0x294>)
 80016a4:	f001 f8b6 	bl	8002814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80016ae:	4861      	ldr	r0, [pc, #388]	; (8001834 <_ZN5motor4initEv+0x298>)
 80016b0:	f001 f8b0 	bl	8002814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80016ba:	485f      	ldr	r0, [pc, #380]	; (8001838 <_ZN5motor4initEv+0x29c>)
 80016bc:	f001 f8aa 	bl	8002814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PF12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016c0:	4b5e      	ldr	r3, [pc, #376]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80016c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016c6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	4b5c      	ldr	r3, [pc, #368]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	4b5b      	ldr	r3, [pc, #364]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	4b59      	ldr	r3, [pc, #356]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016da:	4958      	ldr	r1, [pc, #352]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80016dc:	4852      	ldr	r0, [pc, #328]	; (8001828 <_ZN5motor4initEv+0x28c>)
 80016de:	f000 fed5 	bl	800248c <HAL_GPIO_Init>

	/*Configure GPIO pins : PE10 PE12 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 80016e2:	4b56      	ldr	r3, [pc, #344]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80016e4:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 80016e8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	4b54      	ldr	r3, [pc, #336]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	4b52      	ldr	r3, [pc, #328]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	4b51      	ldr	r3, [pc, #324]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fc:	494f      	ldr	r1, [pc, #316]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80016fe:	484b      	ldr	r0, [pc, #300]	; (800182c <_ZN5motor4initEv+0x290>)
 8001700:	f000 fec4 	bl	800248c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB12 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8001704:	4b4d      	ldr	r3, [pc, #308]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001706:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 800170a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	4b4b      	ldr	r3, [pc, #300]	; (800183c <_ZN5motor4initEv+0x2a0>)
 800170e:	2201      	movs	r2, #1
 8001710:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	4b4a      	ldr	r3, [pc, #296]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	4b48      	ldr	r3, [pc, #288]	; (800183c <_ZN5motor4initEv+0x2a0>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	4947      	ldr	r1, [pc, #284]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001720:	4843      	ldr	r0, [pc, #268]	; (8001830 <_ZN5motor4initEv+0x294>)
 8001722:	f000 feb3 	bl	800248c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001726:	4b45      	ldr	r3, [pc, #276]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800172c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	4b43      	ldr	r3, [pc, #268]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001730:	2202      	movs	r2, #2
 8001732:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	4b40      	ldr	r3, [pc, #256]	; (800183c <_ZN5motor4initEv+0x2a0>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001740:	4b3e      	ldr	r3, [pc, #248]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001742:	2209      	movs	r2, #9
 8001744:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	493d      	ldr	r1, [pc, #244]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001748:	4839      	ldr	r0, [pc, #228]	; (8001830 <_ZN5motor4initEv+0x294>)
 800174a:	f000 fe9f 	bl	800248c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD10 PD12 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 800174e:	4b3b      	ldr	r3, [pc, #236]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001750:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 8001754:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	4b39      	ldr	r3, [pc, #228]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001758:	2201      	movs	r2, #1
 800175a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	4b37      	ldr	r3, [pc, #220]	; (800183c <_ZN5motor4initEv+0x2a0>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	4b36      	ldr	r3, [pc, #216]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001768:	4934      	ldr	r1, [pc, #208]	; (800183c <_ZN5motor4initEv+0x2a0>)
 800176a:	4832      	ldr	r0, [pc, #200]	; (8001834 <_ZN5motor4initEv+0x298>)
 800176c:	f000 fe8e 	bl	800248c <HAL_GPIO_Init>

	/*Configure GPIO pin : PD14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001776:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <_ZN5motor4initEv+0x2a0>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	4b2f      	ldr	r3, [pc, #188]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001784:	492d      	ldr	r1, [pc, #180]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001786:	482b      	ldr	r0, [pc, #172]	; (8001834 <_ZN5motor4initEv+0x298>)
 8001788:	f000 fe80 	bl	800248c <HAL_GPIO_Init>

	/*Configure GPIO pins : PG13 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <_ZN5motor4initEv+0x2a0>)
 800178e:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001792:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <_ZN5motor4initEv+0x2a0>)
 8001796:	2201      	movs	r2, #1
 8001798:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	4b28      	ldr	r3, [pc, #160]	; (800183c <_ZN5motor4initEv+0x2a0>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);\
 80017a6:	4925      	ldr	r1, [pc, #148]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80017a8:	4823      	ldr	r0, [pc, #140]	; (8001838 <_ZN5motor4initEv+0x29c>)
 80017aa:	f000 fe6f 	bl	800248c <HAL_GPIO_Init>

	/*Configure GPIO pin : PD14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80017b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	491e      	ldr	r1, [pc, #120]	; (800183c <_ZN5motor4initEv+0x2a0>)
 80017c4:	481b      	ldr	r0, [pc, #108]	; (8001834 <_ZN5motor4initEv+0x298>)
 80017c6:	f000 fe61 	bl	800248c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2006      	movs	r0, #6
 80017d0:	f000 fe25 	bl	800241e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017d4:	2006      	movs	r0, #6
 80017d6:	f000 fe3e 	bl	8002456 <HAL_NVIC_EnableIRQ>


	htim14.Instance = TIM14;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <_ZN5motor4initEv+0x2a4>)
 80017dc:	4a19      	ldr	r2, [pc, #100]	; (8001844 <_ZN5motor4initEv+0x2a8>)
 80017de:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 16000 -1;
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <_ZN5motor4initEv+0x2a4>)
 80017e2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80017e6:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <_ZN5motor4initEv+0x2a4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 100 - 1;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <_ZN5motor4initEv+0x2a4>)
 80017f0:	2263      	movs	r2, #99	; 0x63
 80017f2:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <_ZN5motor4initEv+0x2a4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <_ZN5motor4initEv+0x2a4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001800:	480f      	ldr	r0, [pc, #60]	; (8001840 <_ZN5motor4initEv+0x2a4>)
 8001802:	f001 ffd7 	bl	80037b4 <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <_ZN5motor4initEv+0x27e>
	{
	  Error_Handler();
 8001816:	f000 f941 	bl	8001a9c <_ZN5motor13Error_HandlerEv>
	}
	//HAL_TIM_Base_Start_IT(&htim14);
	//this->setSpeed(0);

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40021400 	.word	0x40021400
 800182c:	40021000 	.word	0x40021000
 8001830:	40020400 	.word	0x40020400
 8001834:	40020c00 	.word	0x40020c00
 8001838:	40021800 	.word	0x40021800
 800183c:	20000380 	.word	0x20000380
 8001840:	200002f0 	.word	0x200002f0
 8001844:	40002000 	.word	0x40002000

08001848 <_ZN5motor11turnOnMotorEv>:

void motor::turnOnMotor(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

	//Set enable pin to 0 for turn on outputs of fets
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, (GPIO_PinState)0);  //EN
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001856:	481b      	ldr	r0, [pc, #108]	; (80018c4 <_ZN5motor11turnOnMotorEv+0x7c>)
 8001858:	f000 ffdc 	bl	8002814 <HAL_GPIO_WritePin>
	//Set reset pin (0 = outputs off, 1 = outputs on)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (GPIO_PinState)1);  //RST
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001862:	4819      	ldr	r0, [pc, #100]	; (80018c8 <_ZN5motor11turnOnMotorEv+0x80>)
 8001864:	f000 ffd6 	bl	8002814 <HAL_GPIO_WritePin>
	//Assert sleepmode logic high is on, logic low is off
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, (GPIO_PinState)1);  //SLP
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800186e:	4817      	ldr	r0, [pc, #92]	; (80018cc <_ZN5motor11turnOnMotorEv+0x84>)
 8001870:	f000 ffd0 	bl	8002814 <HAL_GPIO_WritePin>
	//Set the microsteping pins based on stepMode
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, (GPIO_PinState)0);  //MS1
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800187a:	4812      	ldr	r0, [pc, #72]	; (80018c4 <_ZN5motor11turnOnMotorEv+0x7c>)
 800187c:	f000 ffca 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (GPIO_PinState)0);  //MS2
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001886:	4810      	ldr	r0, [pc, #64]	; (80018c8 <_ZN5motor11turnOnMotorEv+0x80>)
 8001888:	f000 ffc4 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, (GPIO_PinState)0);  //MS2
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001892:	480c      	ldr	r0, [pc, #48]	; (80018c4 <_ZN5motor11turnOnMotorEv+0x7c>)
 8001894:	f000 ffbe 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (GPIO_PinState)0);  //MS3
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189e:	480a      	ldr	r0, [pc, #40]	; (80018c8 <_ZN5motor11turnOnMotorEv+0x80>)
 80018a0:	f000 ffb8 	bl	8002814 <HAL_GPIO_WritePin>
	//Assert direction
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, (GPIO_PinState)1);  //DIR
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018aa:	4808      	ldr	r0, [pc, #32]	; (80018cc <_ZN5motor11turnOnMotorEv+0x84>)
 80018ac:	f000 ffb2 	bl	8002814 <HAL_GPIO_WritePin>
	//Assert logic low on STEP pin
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <_ZN5motor11turnOnMotorEv+0x84>)
 80018b8:	f000 ffac 	bl	8002814 <HAL_GPIO_WritePin>

	//Turn on timer and set motor speed to 0

}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40020c00 	.word	0x40020c00
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40021000 	.word	0x40021000

080018d0 <_ZN5motor12turnOffMotorEv>:

void motor::turnOffMotor(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

	//Set enable pin to 1 for turn off outputs of fets
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, (GPIO_PinState)1);  //EN
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018de:	480f      	ldr	r0, [pc, #60]	; (800191c <_ZN5motor12turnOffMotorEv+0x4c>)
 80018e0:	f000 ff98 	bl	8002814 <HAL_GPIO_WritePin>
	//Set reset pin (1 = outputs off, 0 = outputs on)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (GPIO_PinState)1);  //RST
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <_ZN5motor12turnOffMotorEv+0x50>)
 80018ec:	f000 ff92 	bl	8002814 <HAL_GPIO_WritePin>
	//Assert sleepmode is off (1)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, (GPIO_PinState)1);  //SLP
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018f6:	480b      	ldr	r0, [pc, #44]	; (8001924 <_ZN5motor12turnOffMotorEv+0x54>)
 80018f8:	f000 ff8c 	bl	8002814 <HAL_GPIO_WritePin>
	//Assert direction
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, (GPIO_PinState)1);  //DIR
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001902:	4808      	ldr	r0, [pc, #32]	; (8001924 <_ZN5motor12turnOffMotorEv+0x54>)
 8001904:	f000 ff86 	bl	8002814 <HAL_GPIO_WritePin>
	//Assert logic low on STEP pin
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <_ZN5motor12turnOffMotorEv+0x54>)
 8001910:	f000 ff80 	bl	8002814 <HAL_GPIO_WritePin>

}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40020400 	.word	0x40020400
 8001924:	40021000 	.word	0x40021000

08001928 <_ZN5motor8setSpeedEi>:
		currentStep++;
	}
}

void motor::setSpeed(int speedVal)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]


	//Determine if value needs changing
	if(systemState.currentSpeed == speedVal)
 8001932:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <_ZN5motor8setSpeedEi+0xb0>)
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d048      	beq.n	80019ce <_ZN5motor8setSpeedEi+0xa6>
	{
		//do nothing
	}
	else
	{
		HAL_TIM_Base_Stop(&htim14);
 800193c:	4827      	ldr	r0, [pc, #156]	; (80019dc <_ZN5motor8setSpeedEi+0xb4>)
 800193e:	f001 fff1 	bl	8003924 <HAL_TIM_Base_Stop>
		if(speedVal < -100){speedVal = -100;}
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001948:	da02      	bge.n	8001950 <_ZN5motor8setSpeedEi+0x28>
 800194a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800194e:	603b      	str	r3, [r7, #0]
		if(speedVal > 100){speedVal = 100;}
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	dd01      	ble.n	800195a <_ZN5motor8setSpeedEi+0x32>
 8001956:	2364      	movs	r3, #100	; 0x64
 8001958:	603b      	str	r3, [r7, #0]

		if(speedVal == 0){
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d109      	bne.n	8001974 <_ZN5motor8setSpeedEi+0x4c>
			//turn off interrupt/stop timer
			HAL_TIM_Base_Stop(&htim14);
 8001960:	481e      	ldr	r0, [pc, #120]	; (80019dc <_ZN5motor8setSpeedEi+0xb4>)
 8001962:	f001 ffdf 	bl	8003924 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop_IT(&htim14);
 8001966:	481d      	ldr	r0, [pc, #116]	; (80019dc <_ZN5motor8setSpeedEi+0xb4>)
 8001968:	f002 f874 	bl	8003a54 <HAL_TIM_Base_Stop_IT>
			systemState.motorOnOff = 0;
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <_ZN5motor8setSpeedEi+0xb0>)
 800196e:	2200      	movs	r2, #0
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_Base_Start_IT(&htim14);
			systemState.currentSpeed = speedVal;

		}
	}
}
 8001972:	e02c      	b.n	80019ce <_ZN5motor8setSpeedEi+0xa6>
			if(speedVal < 0)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	da04      	bge.n	8001984 <_ZN5motor8setSpeedEi+0x5c>
				this->setDirection(0);
 800197a:	2100      	movs	r1, #0
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f82f 	bl	80019e0 <_ZN5motor12setDirectionEi>
 8001982:	e003      	b.n	800198c <_ZN5motor8setSpeedEi+0x64>
				this->setDirection(1);
 8001984:	2101      	movs	r1, #1
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f82a 	bl	80019e0 <_ZN5motor12setDirectionEi>
			int prescaler = 1000/(abs(speedVal));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	bfb8      	it	lt
 8001992:	425b      	neglt	r3, r3
 8001994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001998:	fb92 f3f3 	sdiv	r3, r2, r3
 800199c:	60fb      	str	r3, [r7, #12]
			htim14.Init.Period = prescaler - 1;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <_ZN5motor8setSpeedEi+0xb4>)
 80019a6:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <_ZN5motor8setSpeedEi+0xb4>)
 80019aa:	f001 ff03 	bl	80037b4 <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <_ZN5motor8setSpeedEi+0x9a>
				  Error_Handler();
 80019be:	f000 f86d 	bl	8001a9c <_ZN5motor13Error_HandlerEv>
			HAL_TIM_Base_Start_IT(&htim14);
 80019c2:	4806      	ldr	r0, [pc, #24]	; (80019dc <_ZN5motor8setSpeedEi+0xb4>)
 80019c4:	f001 ffd6 	bl	8003974 <HAL_TIM_Base_Start_IT>
			systemState.currentSpeed = speedVal;
 80019c8:	4a03      	ldr	r2, [pc, #12]	; (80019d8 <_ZN5motor8setSpeedEi+0xb0>)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6293      	str	r3, [r2, #40]	; 0x28
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200001e4 	.word	0x200001e4
 80019dc:	200002f0 	.word	0x200002f0

080019e0 <_ZN5motor12setDirectionEi>:

void motor::setDirection(int direction){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, (GPIO_PinState)direction);  //DIR
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <_ZN5motor12setDirectionEi+0x24>)
 80019f6:	f000 ff0d 	bl	8002814 <HAL_GPIO_WritePin>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000

08001a08 <_ZN5motor4stepEv>:

void motor::step()
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)1);  //STP
 8001a10:	2201      	movs	r2, #1
 8001a12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a16:	4806      	ldr	r0, [pc, #24]	; (8001a30 <_ZN5motor4stepEv+0x28>)
 8001a18:	f000 fefc 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <_ZN5motor4stepEv+0x28>)
 8001a24:	f000 fef6 	bl	8002814 <HAL_GPIO_WritePin>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000

08001a34 <_ZN5motor9zeroMotorEP7encoder>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (GPIO_PinState)MS2);  //MS2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (GPIO_PinState)MS3);  //MS3
}

void motor::zeroMotor(encoder *ptr)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
	//set direction
	this->setDirection(0);
 8001a3e:	2100      	movs	r1, #0
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffcd 	bl	80019e0 <_ZN5motor12setDirectionEi>
	//step untill limit switch is triggered


	while((HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_14)))
 8001a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4a:	4812      	ldr	r0, [pc, #72]	; (8001a94 <_ZN5motor9zeroMotorEP7encoder+0x60>)
 8001a4c:	f000 feca 	bl	80027e4 <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <_ZN5motor9zeroMotorEP7encoder+0x3a>
	{
		this->step();
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ffd1 	bl	8001a08 <_ZN5motor4stepEv>
		HAL_Delay(100);
 8001a66:	2064      	movs	r0, #100	; 0x64
 8001a68:	f000 fbda 	bl	8002220 <HAL_Delay>
	while((HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_14)))
 8001a6c:	e7eb      	b.n	8001a46 <_ZN5motor9zeroMotorEP7encoder+0x12>
	}
	HAL_Delay(5);
 8001a6e:	2005      	movs	r0, #5
 8001a70:	f000 fbd6 	bl	8002220 <HAL_Delay>
	systemState.zeroRaw = (float)ptr->getRaw();
 8001a74:	f7ff fa8a 	bl	8000f8c <_ZN7encoder6getRawEv>
 8001a78:	ee07 0a90 	vmov	s15, r0
 8001a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a84:	ee17 2a90 	vmov	r2, s15
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <_ZN5motor9zeroMotorEP7encoder+0x64>)
 8001a8a:	631a      	str	r2, [r3, #48]	; 0x30


}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	200001e4 	.word	0x200001e4

08001a9c <_ZN5motor13Error_HandlerEv>:


}

void motor::Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  __disable_irq();
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <_ZN5motor13Error_HandlerEv+0x8>
	...

08001aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <HAL_SPI_MspInit+0x84>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d12b      	bne.n	8001b72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_SPI_MspInit+0x88>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_SPI_MspInit+0x88>)
 8001b24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_SPI_MspInit+0x88>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_SPI_MspInit+0x88>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_SPI_MspInit+0x88>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_SPI_MspInit+0x88>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b52:	23e0      	movs	r3, #224	; 0xe0
 8001b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b62:	2305      	movs	r3, #5
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <HAL_SPI_MspInit+0x8c>)
 8001b6e:	f000 fc8d 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	; 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40013000 	.word	0x40013000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020000 	.word	0x40020000

08001b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a22      	ldr	r2, [pc, #136]	; (8001c20 <HAL_TIM_Base_MspInit+0x98>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10e      	bne.n	8001bb8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_TIM_Base_MspInit+0x9c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <HAL_TIM_Base_MspInit+0x9c>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_TIM_Base_MspInit+0x9c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001bb6:	e02e      	b.n	8001c16 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <HAL_TIM_Base_MspInit+0xa0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10e      	bne.n	8001be0 <HAL_TIM_Base_MspInit+0x58>
      __HAL_RCC_TIM13_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_TIM_Base_MspInit+0x9c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <HAL_TIM_Base_MspInit+0x9c>)
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_TIM_Base_MspInit+0x9c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
}
 8001bde:	e01a      	b.n	8001c16 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM14)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <HAL_TIM_Base_MspInit+0xa4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d115      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_TIM_Base_MspInit+0x9c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <HAL_TIM_Base_MspInit+0x9c>)
 8001bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_TIM_Base_MspInit+0x9c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	202d      	movs	r0, #45	; 0x2d
 8001c0c:	f000 fc07 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c10:	202d      	movs	r0, #45	; 0x2d
 8001c12:	f000 fc20 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40001c00 	.word	0x40001c00
 8001c2c:	40002000 	.word	0x40002000

08001c30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_TIM_MspPostInit+0x68>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d11e      	bne.n	8001c90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_TIM_MspPostInit+0x6c>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_TIM_MspPostInit+0x6c>)
 8001c5c:	f043 0310 	orr.w	r3, r3, #16
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_TIM_MspPostInit+0x6c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001c6e:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001c72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_TIM_MspPostInit+0x70>)
 8001c8c:	f000 fbfe 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12c      	bne.n	8001d20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd0:	f043 0310 	orr.w	r3, r3, #16
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cfe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d10:	2307      	movs	r3, #7
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_UART_MspInit+0x8c>)
 8001d1c:	f000 fbb6 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40011000 	.word	0x40011000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <NMI_Handler+0x4>

08001d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <MemManage_Handler+0x4>

08001d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d80:	f000 fa2e 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI0_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(Button_Pin);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <TIM8_TRG_COM_TIM14_IRQHandler>:

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001d9e:	f001 fee1 	bl	8003b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200002f0 	.word	0x200002f0

08001dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <SystemInit+0x20>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <SystemInit+0x20>)
 8001db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <_ZN7Machine4initEv>:
#include <processor.h>
#include <global.h>


void Machine::init()
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	HAL_Init();
 8001dd4:	f000 f9b2 	bl	800213c <HAL_Init>
	Machine::Config_Clock();
 8001dd8:	f000 f806 	bl	8001de8 <_ZN7Machine12Config_ClockEv>
	Machine::MX_TIM1_Init();
 8001ddc:	f000 f89e 	bl	8001f1c <_ZN7Machine12MX_TIM1_InitEv>
	Machine::MX_TIM13_Init();
 8001de0:	f000 f870 	bl	8001ec4 <_ZN7Machine13MX_TIM13_InitEv>
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_ZN7Machine12Config_ClockEv>:

void Machine::Config_Clock(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b094      	sub	sp, #80	; 0x50
 8001dec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	2230      	movs	r2, #48	; 0x30
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 f9cc 	bl	8005194 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <_ZN7Machine12Config_ClockEv+0xd4>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	4a29      	ldr	r2, [pc, #164]	; (8001ebc <_ZN7Machine12Config_ClockEv+0xd4>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1c:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <_ZN7Machine12Config_ClockEv+0xd4>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <_ZN7Machine12Config_ClockEv+0xd8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e34:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <_ZN7Machine12Config_ClockEv+0xd8>)
 8001e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <_ZN7Machine12Config_ClockEv+0xd8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e50:	2310      	movs	r3, #16
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e58:	f107 0320 	add.w	r3, r7, #32
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 fcf3 	bl	8002848 <HAL_RCC_OscConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf14      	ite	ne
 8001e68:	2301      	movne	r3, #1
 8001e6a:	2300      	moveq	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <_ZN7Machine12Config_ClockEv+0x8e>
	  {
	    Error_Handler();
 8001e72:	f000 f933 	bl	80020dc <_ZN7Machine13Error_HandlerEv>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e76:	230f      	movs	r3, #15
 8001e78:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 ff51 	bl	8002d38 <HAL_RCC_ClockConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <_ZN7Machine12Config_ClockEv+0xc2>
	  {
	    Error_Handler();
 8001ea6:	f000 f919 	bl	80020dc <_ZN7Machine13Error_HandlerEv>
	  }
	  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f001 f828 	bl	8002f04 <HAL_RCC_MCOConfig>
}
 8001eb4:	bf00      	nop
 8001eb6:	3750      	adds	r7, #80	; 0x50
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <_ZN7Machine13MX_TIM13_InitEv>:

void Machine::MX_TIM13_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <_ZN7Machine13MX_TIM13_InitEv+0x54>)
 8001ecc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1600-1;
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8001ed0:	f240 623f 	movw	r2, #1599	; 0x63f
 8001ed4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8001ede:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ee2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8001ef2:	f001 fc5f 	bl	80037b4 <HAL_TIM_Base_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <_ZN7Machine13MX_TIM13_InitEv+0x46>
  {
    Error_Handler();
 8001f06:	f000 f8e9 	bl	80020dc <_ZN7Machine13Error_HandlerEv>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  HAL_TIM_Base_Start(&htim13);
 8001f0a:	4802      	ldr	r0, [pc, #8]	; (8001f14 <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8001f0c:	f001 fca2 	bl	8003854 <HAL_TIM_Base_Start>
  /* USER CODE END TIM13_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200002a8 	.word	0x200002a8
 8001f18:	40001c00 	.word	0x40001c00

08001f1c <_ZN7Machine12MX_TIM1_InitEv>:

void Machine::MX_TIM1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b096      	sub	sp, #88	; 0x58
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	615a      	str	r2, [r3, #20]
 8001f4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2220      	movs	r2, #32
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 f91d 	bl	8005194 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f5a:	4b5e      	ldr	r3, [pc, #376]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8001f5c:	4a5e      	ldr	r2, [pc, #376]	; (80020d8 <_ZN7Machine12MX_TIM1_InitEv+0x1bc>)
 8001f5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f60:	4b5c      	ldr	r3, [pc, #368]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f66:	4b5b      	ldr	r3, [pc, #364]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f6c:	4b59      	ldr	r3, [pc, #356]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8001f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f74:	4b57      	ldr	r3, [pc, #348]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f7a:	4b56      	ldr	r3, [pc, #344]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f80:	4b54      	ldr	r3, [pc, #336]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f86:	4853      	ldr	r0, [pc, #332]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8001f88:	f001 fc14 	bl	80037b4 <HAL_TIM_Base_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	bf14      	ite	ne
 8001f92:	2301      	movne	r3, #1
 8001f94:	2300      	moveq	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <_ZN7Machine12MX_TIM1_InitEv+0x84>
  {
    Error_Handler();
 8001f9c:	f000 f89e 	bl	80020dc <_ZN7Machine13Error_HandlerEv>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001faa:	4619      	mov	r1, r3
 8001fac:	4849      	ldr	r0, [pc, #292]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8001fae:	f001 ffa3 	bl	8003ef8 <HAL_TIM_ConfigClockSource>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <_ZN7Machine12MX_TIM1_InitEv+0xaa>
  {
    Error_Handler();
 8001fc2:	f000 f88b 	bl	80020dc <_ZN7Machine13Error_HandlerEv>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fc6:	4843      	ldr	r0, [pc, #268]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8001fc8:	f001 fd73 	bl	8003ab2 <HAL_TIM_PWM_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bf14      	ite	ne
 8001fd2:	2301      	movne	r3, #1
 8001fd4:	2300      	moveq	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <_ZN7Machine12MX_TIM1_InitEv+0xc4>
  {
    Error_Handler();
 8001fdc:	f000 f87e 	bl	80020dc <_ZN7Machine13Error_HandlerEv>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fe8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fec:	4619      	mov	r1, r3
 8001fee:	4839      	ldr	r0, [pc, #228]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8001ff0:	f002 fb5c 	bl	80046ac <HAL_TIMEx_MasterConfigSynchronization>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf14      	ite	ne
 8001ffa:	2301      	movne	r3, #1
 8001ffc:	2300      	moveq	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <_ZN7Machine12MX_TIM1_InitEv+0xec>
  {
    Error_Handler();
 8002004:	f000 f86a 	bl	80020dc <_ZN7Machine13Error_HandlerEv>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002008:	2360      	movs	r3, #96	; 0x60
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002014:	2300      	movs	r3, #0
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800201c:	2300      	movs	r3, #0
 800201e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002028:	2200      	movs	r2, #0
 800202a:	4619      	mov	r1, r3
 800202c:	4829      	ldr	r0, [pc, #164]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 800202e:	f001 fea1 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <_ZN7Machine12MX_TIM1_InitEv+0x12a>
  {
    Error_Handler();
 8002042:	f000 f84b 	bl	80020dc <_ZN7Machine13Error_HandlerEv>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204a:	2204      	movs	r2, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4821      	ldr	r0, [pc, #132]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002050:	f001 fe90 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <_ZN7Machine12MX_TIM1_InitEv+0x14c>
  {
    Error_Handler();
 8002064:	f000 f83a 	bl	80020dc <_ZN7Machine13Error_HandlerEv>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206c:	2208      	movs	r2, #8
 800206e:	4619      	mov	r1, r3
 8002070:	4818      	ldr	r0, [pc, #96]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002072:	f001 fe7f 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <_ZN7Machine12MX_TIM1_InitEv+0x16e>
  {
    Error_Handler();
 8002086:	f000 f829 	bl	80020dc <_ZN7Machine13Error_HandlerEv>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800209e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4809      	ldr	r0, [pc, #36]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 80020ae:	f002 fb79 	bl	80047a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <_ZN7Machine12MX_TIM1_InitEv+0x1aa>
  {
    Error_Handler();
 80020c2:	f000 f80b 	bl	80020dc <_ZN7Machine13Error_HandlerEv>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020c6:	4803      	ldr	r0, [pc, #12]	; (80020d4 <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 80020c8:	f7ff fdb2 	bl	8001c30 <HAL_TIM_MspPostInit>

}
 80020cc:	bf00      	nop
 80020ce:	3758      	adds	r7, #88	; 0x58
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000338 	.word	0x20000338
 80020d8:	40010000 	.word	0x40010000

080020dc <_ZN7Machine13Error_HandlerEv>:

void Machine::Error_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020e0:	b672      	cpsid	i
}
 80020e2:	bf00      	nop
  __disable_irq();
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <_ZN7Machine13Error_HandlerEv+0x8>
	...

080020e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80020e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002120 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020ec:	480d      	ldr	r0, [pc, #52]	; (8002124 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ee:	490e      	ldr	r1, [pc, #56]	; (8002128 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f4:	e002      	b.n	80020fc <LoopCopyDataInit>

080020f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fa:	3304      	adds	r3, #4

080020fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002100:	d3f9      	bcc.n	80020f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002104:	4c0b      	ldr	r4, [pc, #44]	; (8002134 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002108:	e001      	b.n	800210e <LoopFillZerobss>

0800210a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800210c:	3204      	adds	r2, #4

0800210e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002110:	d3fb      	bcc.n	800210a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002112:	f7ff fe4b 	bl	8001dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002116:	f003 f819 	bl	800514c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211a:	f7fe ffe7 	bl	80010ec <main>
  bx  lr    
 800211e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002120:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800212c:	080059e0 	.word	0x080059e0
  ldr r2, =_sbss
 8002130:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002134:	20000398 	.word	0x20000398

08002138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC_IRQHandler>
	...

0800213c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <HAL_Init+0x40>)
 8002146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_Init+0x40>)
 8002152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_Init+0x40>)
 800215e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 f94f 	bl	8002408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216a:	200f      	movs	r0, #15
 800216c:	f000 f808 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002170:	f7ff fc9a 	bl	8001aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023c00 	.word	0x40023c00

08002180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_InitTick+0x54>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_InitTick+0x58>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f967 	bl	8002472 <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d80a      	bhi.n	80021ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f000 f92f 	bl	800241e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c0:	4a06      	ldr	r2, [pc, #24]	; (80021dc <HAL_InitTick+0x5c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000000 	.word	0x20000000
 80021d8:	20000008 	.word	0x20000008
 80021dc:	20000004 	.word	0x20000004

080021e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_IncTick+0x20>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x24>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_IncTick+0x24>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000008 	.word	0x20000008
 8002204:	20000394 	.word	0x20000394

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000394 	.word	0x20000394

08002220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff ffee 	bl	8002208 <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d005      	beq.n	8002246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_Delay+0x44>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002246:	bf00      	nop
 8002248:	f7ff ffde 	bl	8002208 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8f7      	bhi.n	8002248 <HAL_Delay+0x28>
  {
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000008 	.word	0x20000008

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <__NVIC_EnableIRQ+0x38>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d4:	d301      	bcc.n	80023da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00f      	b.n	80023fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <SysTick_Config+0x40>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e2:	210f      	movs	r1, #15
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f7ff ff8e 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <SysTick_Config+0x40>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <SysTick_Config+0x40>)
 80023f4:	2207      	movs	r2, #7
 80023f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	e000e010 	.word	0xe000e010

08002408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff29 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002430:	f7ff ff3e 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 8002434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f7ff ff8e 	bl	800235c <NVIC_EncodePriority>
 8002440:	4602      	mov	r2, r0
 8002442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff5d 	bl	8002308 <__NVIC_SetPriority>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff31 	bl	80022cc <__NVIC_EnableIRQ>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffa2 	bl	80023c4 <SysTick_Config>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e177      	b.n	8002798 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8166 	bne.w	8002792 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d005      	beq.n	80024de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d130      	bne.n	8002540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 0201 	and.w	r2, r3, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b03      	cmp	r3, #3
 800254a:	d017      	beq.n	800257c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d123      	bne.n	80025d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	08da      	lsrs	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3208      	adds	r2, #8
 8002590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	08da      	lsrs	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3208      	adds	r2, #8
 80025ca:	69b9      	ldr	r1, [r7, #24]
 80025cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0203 	and.w	r2, r3, #3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80c0 	beq.w	8002792 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b66      	ldr	r3, [pc, #408]	; (80027b0 <HAL_GPIO_Init+0x324>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	4a65      	ldr	r2, [pc, #404]	; (80027b0 <HAL_GPIO_Init+0x324>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6453      	str	r3, [r2, #68]	; 0x44
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_GPIO_Init+0x324>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262e:	4a61      	ldr	r2, [pc, #388]	; (80027b4 <HAL_GPIO_Init+0x328>)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <HAL_GPIO_Init+0x32c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d037      	beq.n	80026ca <HAL_GPIO_Init+0x23e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a57      	ldr	r2, [pc, #348]	; (80027bc <HAL_GPIO_Init+0x330>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d031      	beq.n	80026c6 <HAL_GPIO_Init+0x23a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a56      	ldr	r2, [pc, #344]	; (80027c0 <HAL_GPIO_Init+0x334>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d02b      	beq.n	80026c2 <HAL_GPIO_Init+0x236>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a55      	ldr	r2, [pc, #340]	; (80027c4 <HAL_GPIO_Init+0x338>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d025      	beq.n	80026be <HAL_GPIO_Init+0x232>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a54      	ldr	r2, [pc, #336]	; (80027c8 <HAL_GPIO_Init+0x33c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01f      	beq.n	80026ba <HAL_GPIO_Init+0x22e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a53      	ldr	r2, [pc, #332]	; (80027cc <HAL_GPIO_Init+0x340>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_GPIO_Init+0x22a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_GPIO_Init+0x344>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0x226>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a51      	ldr	r2, [pc, #324]	; (80027d4 <HAL_GPIO_Init+0x348>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00d      	beq.n	80026ae <HAL_GPIO_Init+0x222>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a50      	ldr	r2, [pc, #320]	; (80027d8 <HAL_GPIO_Init+0x34c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x21e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4f      	ldr	r2, [pc, #316]	; (80027dc <HAL_GPIO_Init+0x350>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_Init+0x21a>
 80026a2:	2309      	movs	r3, #9
 80026a4:	e012      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026a6:	230a      	movs	r3, #10
 80026a8:	e010      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026aa:	2308      	movs	r3, #8
 80026ac:	e00e      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026ae:	2307      	movs	r3, #7
 80026b0:	e00c      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026b2:	2306      	movs	r3, #6
 80026b4:	e00a      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e008      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026be:	2303      	movs	r3, #3
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026ca:	2300      	movs	r3, #0
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	f002 0203 	and.w	r2, r2, #3
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026dc:	4935      	ldr	r1, [pc, #212]	; (80027b4 <HAL_GPIO_Init+0x328>)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_GPIO_Init+0x354>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270e:	4a34      	ldr	r2, [pc, #208]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002738:	4a29      	ldr	r2, [pc, #164]	; (80027e0 <HAL_GPIO_Init+0x354>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273e:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002762:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_GPIO_Init+0x354>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_GPIO_Init+0x354>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	f67f ae84 	bls.w	80024a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40021400 	.word	0x40021400
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40021c00 	.word	0x40021c00
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40022400 	.word	0x40022400
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	e001      	b.n	8002806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002806:	7bfb      	ldrb	r3, [r7, #15]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e267      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d075      	beq.n	8002952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002866:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d00c      	beq.n	800288c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b85      	ldr	r3, [pc, #532]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800287a:	2b08      	cmp	r3, #8
 800287c:	d112      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b7e      	ldr	r3, [pc, #504]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05b      	beq.n	8002950 <HAL_RCC_OscConfig+0x108>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d157      	bne.n	8002950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e242      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x74>
 80028ae:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a75      	ldr	r2, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x98>
 80028c6:	4b70      	ldr	r3, [pc, #448]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6f      	ldr	r2, [pc, #444]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6c      	ldr	r2, [pc, #432]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028e0:	4b69      	ldr	r3, [pc, #420]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a68      	ldr	r2, [pc, #416]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b66      	ldr	r3, [pc, #408]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a65      	ldr	r2, [pc, #404]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff fc82 	bl	8002208 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff fc7e 	bl	8002208 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e207      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xc0>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fc6e 	bl	8002208 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff fc6a 	bl	8002208 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1f3      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b51      	ldr	r3, [pc, #324]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0xe8>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d063      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800295e:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002972:	2b08      	cmp	r3, #8
 8002974:	d11c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b44      	ldr	r3, [pc, #272]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1c7      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4937      	ldr	r1, [pc, #220]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	e03a      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b8:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7ff fc23 	bl	8002208 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c6:	f7ff fc1f 	bl	8002208 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1a8      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4925      	ldr	r1, [pc, #148]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7ff fc02 	bl	8002208 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a08:	f7ff fbfe 	bl	8002208 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e187      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d036      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7ff fbe2 	bl	8002208 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a48:	f7ff fbde 	bl	8002208 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e167      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x200>
 8002a66:	e01b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fbcb 	bl	8002208 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	e00e      	b.n	8002a94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a76:	f7ff fbc7 	bl	8002208 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d907      	bls.n	8002a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e150      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	42470000 	.word	0x42470000
 8002a90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b88      	ldr	r3, [pc, #544]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ea      	bne.n	8002a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8097 	beq.w	8002bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b81      	ldr	r3, [pc, #516]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a7c      	ldr	r2, [pc, #496]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b7a      	ldr	r3, [pc, #488]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b77      	ldr	r3, [pc, #476]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b74      	ldr	r3, [pc, #464]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a73      	ldr	r2, [pc, #460]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7ff fb87 	bl	8002208 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7ff fb83 	bl	8002208 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e10c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x2ea>
 8002b24:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a63      	ldr	r2, [pc, #396]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b30:	e01c      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x30c>
 8002b3a:	4b5f      	ldr	r3, [pc, #380]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a5e      	ldr	r2, [pc, #376]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a5b      	ldr	r2, [pc, #364]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b54:	4b58      	ldr	r3, [pc, #352]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a57      	ldr	r2, [pc, #348]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	4a54      	ldr	r2, [pc, #336]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7ff fb48 	bl	8002208 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7ff fb44 	bl	8002208 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0cb      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ee      	beq.n	8002b7c <HAL_RCC_OscConfig+0x334>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fb32 	bl	8002208 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7ff fb2e 	bl	8002208 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0b5      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	4a38      	ldr	r2, [pc, #224]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a1 	beq.w	8002d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be6:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d05c      	beq.n	8002cac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d141      	bne.n	8002c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff fb02 	bl	8002208 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c08:	f7ff fafe 	bl	8002208 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e087      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	491b      	ldr	r1, [pc, #108]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7ff fad7 	bl	8002208 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7ff fad3 	bl	8002208 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e05c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x416>
 8002c7c:	e054      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff fac0 	bl	8002208 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7ff fabc 	bl	8002208 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e045      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x444>
 8002caa:	e03d      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e038      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_RCC_OscConfig+0x4ec>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d028      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d121      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d11a      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d111      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b68      	ldr	r3, [pc, #416]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d90c      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b65      	ldr	r3, [pc, #404]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0b8      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da4:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a52      	ldr	r2, [pc, #328]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b50      	ldr	r3, [pc, #320]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	494d      	ldr	r1, [pc, #308]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d044      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b47      	ldr	r3, [pc, #284]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d119      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e07f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e067      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b37      	ldr	r3, [pc, #220]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4934      	ldr	r1, [pc, #208]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7ff f9ee 	bl	8002208 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7ff f9ea 	bl	8002208 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e04f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d20c      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e032      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4916      	ldr	r1, [pc, #88]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ebe:	f000 f889 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	490a      	ldr	r1, [pc, #40]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	5ccb      	ldrb	r3, [r1, r3]
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	4a09      	ldr	r2, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff f94e 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	080058b4 	.word	0x080058b4
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000004 	.word	0x20000004

08002f04 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08c      	sub	sp, #48	; 0x30
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d129      	bne.n	8002f6a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_RCC_MCOConfig+0xc4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <HAL_RCC_MCOConfig+0xc4>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCC_MCOConfig+0xc4>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002f48:	f107 031c 	add.w	r3, r7, #28
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	481f      	ldr	r0, [pc, #124]	; (8002fcc <HAL_RCC_MCOConfig+0xc8>)
 8002f50:	f7ff fa9c 	bl	800248c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_RCC_MCOConfig+0xc4>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	4919      	ldr	r1, [pc, #100]	; (8002fc8 <HAL_RCC_MCOConfig+0xc4>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002f68:	e029      	b.n	8002fbe <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_RCC_MCOConfig+0xc4>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <HAL_RCC_MCOConfig+0xc4>)
 8002f74:	f043 0304 	orr.w	r3, r3, #4
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_RCC_MCOConfig+0xc4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f90:	2303      	movs	r3, #3
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002f9c:	f107 031c 	add.w	r3, r7, #28
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <HAL_RCC_MCOConfig+0xcc>)
 8002fa4:	f7ff fa72 	bl	800248c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <HAL_RCC_MCOConfig+0xc4>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	00d9      	lsls	r1, r3, #3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	4903      	ldr	r1, [pc, #12]	; (8002fc8 <HAL_RCC_MCOConfig+0xc4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
}
 8002fbe:	bf00      	nop
 8002fc0:	3730      	adds	r7, #48	; 0x30
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	40020800 	.word	0x40020800

08002fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd8:	b090      	sub	sp, #64	; 0x40
 8002fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fec:	4b59      	ldr	r3, [pc, #356]	; (8003154 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d00d      	beq.n	8003014 <HAL_RCC_GetSysClockFreq+0x40>
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	f200 80a1 	bhi.w	8003140 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x34>
 8003002:	2b04      	cmp	r3, #4
 8003004:	d003      	beq.n	800300e <HAL_RCC_GetSysClockFreq+0x3a>
 8003006:	e09b      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_GetSysClockFreq+0x184>)
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800300c:	e09b      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800300e:	4b53      	ldr	r3, [pc, #332]	; (800315c <HAL_RCC_GetSysClockFreq+0x188>)
 8003010:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003012:	e098      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003014:	4b4f      	ldr	r3, [pc, #316]	; (8003154 <HAL_RCC_GetSysClockFreq+0x180>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800301e:	4b4d      	ldr	r3, [pc, #308]	; (8003154 <HAL_RCC_GetSysClockFreq+0x180>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d028      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302a:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_RCC_GetSysClockFreq+0x180>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	099b      	lsrs	r3, r3, #6
 8003030:	2200      	movs	r2, #0
 8003032:	623b      	str	r3, [r7, #32]
 8003034:	627a      	str	r2, [r7, #36]	; 0x24
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800303c:	2100      	movs	r1, #0
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCC_GetSysClockFreq+0x188>)
 8003040:	fb03 f201 	mul.w	r2, r3, r1
 8003044:	2300      	movs	r3, #0
 8003046:	fb00 f303 	mul.w	r3, r0, r3
 800304a:	4413      	add	r3, r2
 800304c:	4a43      	ldr	r2, [pc, #268]	; (800315c <HAL_RCC_GetSysClockFreq+0x188>)
 800304e:	fba0 1202 	umull	r1, r2, r0, r2
 8003052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003054:	460a      	mov	r2, r1
 8003056:	62ba      	str	r2, [r7, #40]	; 0x28
 8003058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305a:	4413      	add	r3, r2
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003060:	2200      	movs	r2, #0
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	61fa      	str	r2, [r7, #28]
 8003066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800306a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800306e:	f7fd f8c5 	bl	80001fc <__aeabi_uldivmod>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4613      	mov	r3, r2
 8003078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800307a:	e053      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307c:	4b35      	ldr	r3, [pc, #212]	; (8003154 <HAL_RCC_GetSysClockFreq+0x180>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	2200      	movs	r2, #0
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	617a      	str	r2, [r7, #20]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800308e:	f04f 0b00 	mov.w	fp, #0
 8003092:	4652      	mov	r2, sl
 8003094:	465b      	mov	r3, fp
 8003096:	f04f 0000 	mov.w	r0, #0
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	0159      	lsls	r1, r3, #5
 80030a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a4:	0150      	lsls	r0, r2, #5
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	ebb2 080a 	subs.w	r8, r2, sl
 80030ae:	eb63 090b 	sbc.w	r9, r3, fp
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030c6:	ebb2 0408 	subs.w	r4, r2, r8
 80030ca:	eb63 0509 	sbc.w	r5, r3, r9
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	00eb      	lsls	r3, r5, #3
 80030d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030dc:	00e2      	lsls	r2, r4, #3
 80030de:	4614      	mov	r4, r2
 80030e0:	461d      	mov	r5, r3
 80030e2:	eb14 030a 	adds.w	r3, r4, sl
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	eb45 030b 	adc.w	r3, r5, fp
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030fa:	4629      	mov	r1, r5
 80030fc:	028b      	lsls	r3, r1, #10
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003104:	4621      	mov	r1, r4
 8003106:	028a      	lsls	r2, r1, #10
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310e:	2200      	movs	r2, #0
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	60fa      	str	r2, [r7, #12]
 8003114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003118:	f7fd f870 	bl	80001fc <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_GetSysClockFreq+0x180>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003134:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetSysClockFreq+0x184>)
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003148:	4618      	mov	r0, r3
 800314a:	3740      	adds	r7, #64	; 0x40
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	00f42400 	.word	0x00f42400
 800315c:	017d7840 	.word	0x017d7840

08003160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_GetHCLKFreq+0x14>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000

08003178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800317c:	f7ff fff0 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0a9b      	lsrs	r3, r3, #10
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4903      	ldr	r1, [pc, #12]	; (800319c <HAL_RCC_GetPCLK1Freq+0x24>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40023800 	.word	0x40023800
 800319c:	080058c4 	.word	0x080058c4

080031a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031a4:	f7ff ffdc 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0b5b      	lsrs	r3, r3, #13
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40023800 	.word	0x40023800
 80031c4:	080058c4 	.word	0x080058c4

080031c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07b      	b.n	80032d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d108      	bne.n	80031f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ea:	d009      	beq.n	8003200 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	61da      	str	r2, [r3, #28]
 80031f2:	e005      	b.n	8003200 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe fc6c 	bl	8001af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003236:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	ea42 0103 	orr.w	r1, r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	f003 0104 	and.w	r1, r3, #4
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f003 0210 	and.w	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b08c      	sub	sp, #48	; 0x30
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032e8:	2301      	movs	r3, #1
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x26>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e18a      	b.n	8003616 <HAL_SPI_TransmitReceive+0x33c>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003308:	f7fe ff7e 	bl	8002208 <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800331e:	887b      	ldrh	r3, [r7, #2]
 8003320:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003326:	2b01      	cmp	r3, #1
 8003328:	d00f      	beq.n	800334a <HAL_SPI_TransmitReceive+0x70>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003330:	d107      	bne.n	8003342 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d103      	bne.n	8003342 <HAL_SPI_TransmitReceive+0x68>
 800333a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800333e:	2b04      	cmp	r3, #4
 8003340:	d003      	beq.n	800334a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003348:	e15b      	b.n	8003602 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_SPI_TransmitReceive+0x82>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_SPI_TransmitReceive+0x82>
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d103      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003362:	e14e      	b.n	8003602 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b04      	cmp	r3, #4
 800336e:	d003      	beq.n	8003378 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2205      	movs	r2, #5
 8003374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	887a      	ldrh	r2, [r7, #2]
 800338e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	887a      	ldrh	r2, [r7, #2]
 800339a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	d007      	beq.n	80033cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d4:	d178      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_SPI_TransmitReceive+0x10a>
 80033de:	8b7b      	ldrh	r3, [r7, #26]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d166      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	881a      	ldrh	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	1c9a      	adds	r2, r3, #2
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003408:	e053      	b.n	80034b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b02      	cmp	r3, #2
 8003416:	d11b      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x176>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d016      	beq.n	8003450 <HAL_SPI_TransmitReceive+0x176>
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d113      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	881a      	ldrh	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	1c9a      	adds	r2, r3, #2
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	d119      	bne.n	8003492 <HAL_SPI_TransmitReceive+0x1b8>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d014      	beq.n	8003492 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	b292      	uxth	r2, r2
 8003474:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	1c9a      	adds	r2, r3, #2
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800348e:	2301      	movs	r3, #1
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003492:	f7fe feb9 	bl	8002208 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800349e:	429a      	cmp	r2, r3
 80034a0:	d807      	bhi.n	80034b2 <HAL_SPI_TransmitReceive+0x1d8>
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d003      	beq.n	80034b2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034b0:	e0a7      	b.n	8003602 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1a6      	bne.n	800340a <HAL_SPI_TransmitReceive+0x130>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1a1      	bne.n	800340a <HAL_SPI_TransmitReceive+0x130>
 80034c6:	e07c      	b.n	80035c2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_TransmitReceive+0x1fc>
 80034d0:	8b7b      	ldrh	r3, [r7, #26]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d16b      	bne.n	80035ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	330c      	adds	r3, #12
 80034e0:	7812      	ldrb	r2, [r2, #0]
 80034e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034fc:	e057      	b.n	80035ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d11c      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x26c>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d017      	beq.n	8003546 <HAL_SPI_TransmitReceive+0x26c>
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d114      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d119      	bne.n	8003588 <HAL_SPI_TransmitReceive+0x2ae>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d014      	beq.n	8003588 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003584:	2301      	movs	r3, #1
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003588:	f7fe fe3e 	bl	8002208 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003594:	429a      	cmp	r2, r3
 8003596:	d803      	bhi.n	80035a0 <HAL_SPI_TransmitReceive+0x2c6>
 8003598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d102      	bne.n	80035a6 <HAL_SPI_TransmitReceive+0x2cc>
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035ac:	e029      	b.n	8003602 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1a2      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x224>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d19d      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f8b2 	bl	8003730 <SPI_EndRxTxTransaction>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035de:	e010      	b.n	8003602 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	e000      	b.n	8003602 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003600:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003612:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003616:	4618      	mov	r0, r3
 8003618:	3730      	adds	r7, #48	; 0x30
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003630:	f7fe fdea 	bl	8002208 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	4413      	add	r3, r2
 800363e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003640:	f7fe fde2 	bl	8002208 <HAL_GetTick>
 8003644:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003646:	4b39      	ldr	r3, [pc, #228]	; (800372c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	015b      	lsls	r3, r3, #5
 800364c:	0d1b      	lsrs	r3, r3, #20
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003656:	e054      	b.n	8003702 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d050      	beq.n	8003702 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003660:	f7fe fdd2 	bl	8002208 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	429a      	cmp	r2, r3
 800366e:	d902      	bls.n	8003676 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d13d      	bne.n	80036f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003684:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800368e:	d111      	bne.n	80036b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003698:	d004      	beq.n	80036a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d107      	bne.n	80036b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036bc:	d10f      	bne.n	80036de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e017      	b.n	8003722 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3b01      	subs	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	429a      	cmp	r2, r3
 800371e:	d19b      	bne.n	8003658 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000000 	.word	0x20000000

08003730 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800373c:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <SPI_EndRxTxTransaction+0x7c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <SPI_EndRxTxTransaction+0x80>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0d5b      	lsrs	r3, r3, #21
 8003748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800375a:	d112      	bne.n	8003782 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2200      	movs	r2, #0
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f7ff ff5a 	bl	8003620 <SPI_WaitFlagStateUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	f043 0220 	orr.w	r2, r3, #32
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e00f      	b.n	80037a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	3b01      	subs	r3, #1
 800378c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b80      	cmp	r3, #128	; 0x80
 800379a:	d0f2      	beq.n	8003782 <SPI_EndRxTxTransaction+0x52>
 800379c:	e000      	b.n	80037a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800379e:	bf00      	nop
  }

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000000 	.word	0x20000000
 80037b0:	165e9f81 	.word	0x165e9f81

080037b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e041      	b.n	800384a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fe f9d4 	bl	8001b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f000 fc70 	bl	80040d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d001      	beq.n	800386c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e046      	b.n	80038fa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a23      	ldr	r2, [pc, #140]	; (8003908 <HAL_TIM_Base_Start+0xb4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d022      	beq.n	80038c4 <HAL_TIM_Base_Start+0x70>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d01d      	beq.n	80038c4 <HAL_TIM_Base_Start+0x70>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1f      	ldr	r2, [pc, #124]	; (800390c <HAL_TIM_Base_Start+0xb8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d018      	beq.n	80038c4 <HAL_TIM_Base_Start+0x70>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_TIM_Base_Start+0xbc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_TIM_Base_Start+0x70>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <HAL_TIM_Base_Start+0xc0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00e      	beq.n	80038c4 <HAL_TIM_Base_Start+0x70>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <HAL_TIM_Base_Start+0xc4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_TIM_Base_Start+0x70>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a19      	ldr	r2, [pc, #100]	; (800391c <HAL_TIM_Base_Start+0xc8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d004      	beq.n	80038c4 <HAL_TIM_Base_Start+0x70>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_TIM_Base_Start+0xcc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d111      	bne.n	80038e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d010      	beq.n	80038f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	e007      	b.n	80038f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40010400 	.word	0x40010400
 800391c:	40014000 	.word	0x40014000
 8003920:	40001800 	.word	0x40001800

08003924 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	f241 1311 	movw	r3, #4369	; 0x1111
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10f      	bne.n	800395c <HAL_TIM_Base_Stop+0x38>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6a1a      	ldr	r2, [r3, #32]
 8003942:	f240 4344 	movw	r3, #1092	; 0x444
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <HAL_TIM_Base_Stop+0x38>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d001      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e04e      	b.n	8003a2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a23      	ldr	r2, [pc, #140]	; (8003a38 <HAL_TIM_Base_Start_IT+0xc4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d022      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d01d      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <HAL_TIM_Base_Start_IT+0xc8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d018      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <HAL_TIM_Base_Start_IT+0xcc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <HAL_TIM_Base_Start_IT+0xd0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HAL_TIM_Base_Start_IT+0xd4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <HAL_TIM_Base_Start_IT+0xd8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <HAL_TIM_Base_Start_IT+0xdc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d111      	bne.n	8003a18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d010      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a16:	e007      	b.n	8003a28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800
 8003a44:	40000c00 	.word	0x40000c00
 8003a48:	40010400 	.word	0x40010400
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40001800 	.word	0x40001800

08003a54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10f      	bne.n	8003a9c <HAL_TIM_Base_Stop_IT+0x48>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	f240 4344 	movw	r3, #1092	; 0x444
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <HAL_TIM_Base_Stop_IT+0x48>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e041      	b.n	8003b48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f839 	bl	8003b50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f000 faf1 	bl	80040d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0202 	mvn.w	r2, #2
 8003b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa77 	bl	800409a <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fa69 	bl	8004086 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa7a 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0204 	mvn.w	r2, #4
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fa4d 	bl	800409a <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa3f 	bl	8004086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa50 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0208 	mvn.w	r2, #8
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa23 	bl	800409a <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa15 	bl	8004086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa26 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0210 	mvn.w	r2, #16
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2208      	movs	r2, #8
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f9f9 	bl	800409a <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f9eb 	bl	8004086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f9fc 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d107      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0201 	mvn.w	r2, #1
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fd faae 	bl	8001244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf2:	2b80      	cmp	r3, #128	; 0x80
 8003cf4:	d10e      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d00:	2b80      	cmp	r3, #128	; 0x80
 8003d02:	d107      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fda4 	bl	800485c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d10e      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d107      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f9c1 	bl	80040c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d10e      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d107      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0220 	mvn.w	r2, #32
 8003d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fd6e 	bl	8004848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e0ae      	b.n	8003ef0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	f200 809f 	bhi.w	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003ddd 	.word	0x08003ddd
 8003dac:	08003ee1 	.word	0x08003ee1
 8003db0:	08003ee1 	.word	0x08003ee1
 8003db4:	08003ee1 	.word	0x08003ee1
 8003db8:	08003e1d 	.word	0x08003e1d
 8003dbc:	08003ee1 	.word	0x08003ee1
 8003dc0:	08003ee1 	.word	0x08003ee1
 8003dc4:	08003ee1 	.word	0x08003ee1
 8003dc8:	08003e5f 	.word	0x08003e5f
 8003dcc:	08003ee1 	.word	0x08003ee1
 8003dd0:	08003ee1 	.word	0x08003ee1
 8003dd4:	08003ee1 	.word	0x08003ee1
 8003dd8:	08003e9f 	.word	0x08003e9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fa18 	bl	8004218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0208 	orr.w	r2, r2, #8
 8003df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0204 	bic.w	r2, r2, #4
 8003e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6999      	ldr	r1, [r3, #24]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	619a      	str	r2, [r3, #24]
      break;
 8003e1a:	e064      	b.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fa68 	bl	80042f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6999      	ldr	r1, [r3, #24]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	619a      	str	r2, [r3, #24]
      break;
 8003e5c:	e043      	b.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fabd 	bl	80043e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0208 	orr.w	r2, r2, #8
 8003e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0204 	bic.w	r2, r2, #4
 8003e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69d9      	ldr	r1, [r3, #28]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	61da      	str	r2, [r3, #28]
      break;
 8003e9c:	e023      	b.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fb11 	bl	80044cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69d9      	ldr	r1, [r3, #28]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	021a      	lsls	r2, r3, #8
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	61da      	str	r2, [r3, #28]
      break;
 8003ede:	e002      	b.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIM_ConfigClockSource+0x1c>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e0b4      	b.n	800407e <HAL_TIM_ConfigClockSource+0x186>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4c:	d03e      	beq.n	8003fcc <HAL_TIM_ConfigClockSource+0xd4>
 8003f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f52:	f200 8087 	bhi.w	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5a:	f000 8086 	beq.w	800406a <HAL_TIM_ConfigClockSource+0x172>
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f62:	d87f      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f64:	2b70      	cmp	r3, #112	; 0x70
 8003f66:	d01a      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0xa6>
 8003f68:	2b70      	cmp	r3, #112	; 0x70
 8003f6a:	d87b      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f6c:	2b60      	cmp	r3, #96	; 0x60
 8003f6e:	d050      	beq.n	8004012 <HAL_TIM_ConfigClockSource+0x11a>
 8003f70:	2b60      	cmp	r3, #96	; 0x60
 8003f72:	d877      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b50      	cmp	r3, #80	; 0x50
 8003f76:	d03c      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0xfa>
 8003f78:	2b50      	cmp	r3, #80	; 0x50
 8003f7a:	d873      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d058      	beq.n	8004032 <HAL_TIM_ConfigClockSource+0x13a>
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d86f      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b30      	cmp	r3, #48	; 0x30
 8003f86:	d064      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x15a>
 8003f88:	2b30      	cmp	r3, #48	; 0x30
 8003f8a:	d86b      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d060      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x15a>
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d867      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d05c      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x15a>
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d05a      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x15a>
 8003f9c:	e062      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6899      	ldr	r1, [r3, #8]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f000 fb5d 	bl	800466c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	609a      	str	r2, [r3, #8]
      break;
 8003fca:	e04f      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6899      	ldr	r1, [r3, #8]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f000 fb46 	bl	800466c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fee:	609a      	str	r2, [r3, #8]
      break;
 8003ff0:	e03c      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6859      	ldr	r1, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f000 faba 	bl	8004578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2150      	movs	r1, #80	; 0x50
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fb13 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 8004010:	e02c      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6859      	ldr	r1, [r3, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	461a      	mov	r2, r3
 8004020:	f000 fad9 	bl	80045d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2160      	movs	r1, #96	; 0x60
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fb03 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 8004030:	e01c      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6859      	ldr	r1, [r3, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	461a      	mov	r2, r3
 8004040:	f000 fa9a 	bl	8004578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2140      	movs	r1, #64	; 0x40
 800404a:	4618      	mov	r0, r3
 800404c:	f000 faf3 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 8004050:	e00c      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f000 faea 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 8004062:	e003      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
      break;
 8004068:	e000      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800406a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a40      	ldr	r2, [pc, #256]	; (80041ec <TIM_Base_SetConfig+0x114>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <TIM_Base_SetConfig+0x40>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f6:	d00f      	beq.n	8004118 <TIM_Base_SetConfig+0x40>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a3d      	ldr	r2, [pc, #244]	; (80041f0 <TIM_Base_SetConfig+0x118>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00b      	beq.n	8004118 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a3c      	ldr	r2, [pc, #240]	; (80041f4 <TIM_Base_SetConfig+0x11c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <TIM_Base_SetConfig+0x40>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a3b      	ldr	r2, [pc, #236]	; (80041f8 <TIM_Base_SetConfig+0x120>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_Base_SetConfig+0x40>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a3a      	ldr	r2, [pc, #232]	; (80041fc <TIM_Base_SetConfig+0x124>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d108      	bne.n	800412a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2f      	ldr	r2, [pc, #188]	; (80041ec <TIM_Base_SetConfig+0x114>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d02b      	beq.n	800418a <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d027      	beq.n	800418a <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2c      	ldr	r2, [pc, #176]	; (80041f0 <TIM_Base_SetConfig+0x118>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d023      	beq.n	800418a <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2b      	ldr	r2, [pc, #172]	; (80041f4 <TIM_Base_SetConfig+0x11c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d01f      	beq.n	800418a <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2a      	ldr	r2, [pc, #168]	; (80041f8 <TIM_Base_SetConfig+0x120>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01b      	beq.n	800418a <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a29      	ldr	r2, [pc, #164]	; (80041fc <TIM_Base_SetConfig+0x124>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d017      	beq.n	800418a <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a28      	ldr	r2, [pc, #160]	; (8004200 <TIM_Base_SetConfig+0x128>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a27      	ldr	r2, [pc, #156]	; (8004204 <TIM_Base_SetConfig+0x12c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00f      	beq.n	800418a <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <TIM_Base_SetConfig+0x130>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00b      	beq.n	800418a <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a25      	ldr	r2, [pc, #148]	; (800420c <TIM_Base_SetConfig+0x134>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d007      	beq.n	800418a <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a24      	ldr	r2, [pc, #144]	; (8004210 <TIM_Base_SetConfig+0x138>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a23      	ldr	r2, [pc, #140]	; (8004214 <TIM_Base_SetConfig+0x13c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d108      	bne.n	800419c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <TIM_Base_SetConfig+0x114>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_Base_SetConfig+0xf8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <TIM_Base_SetConfig+0x124>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d103      	bne.n	80041d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	615a      	str	r2, [r3, #20]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40010400 	.word	0x40010400
 8004200:	40014000 	.word	0x40014000
 8004204:	40014400 	.word	0x40014400
 8004208:	40014800 	.word	0x40014800
 800420c:	40001800 	.word	0x40001800
 8004210:	40001c00 	.word	0x40001c00
 8004214:	40002000 	.word	0x40002000

08004218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f023 0201 	bic.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0303 	bic.w	r3, r3, #3
 800424e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f023 0302 	bic.w	r3, r3, #2
 8004260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <TIM_OC1_SetConfig+0xd8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_OC1_SetConfig+0x64>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a1f      	ldr	r2, [pc, #124]	; (80042f4 <TIM_OC1_SetConfig+0xdc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d10c      	bne.n	8004296 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0308 	bic.w	r3, r3, #8
 8004282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <TIM_OC1_SetConfig+0xd8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d003      	beq.n	80042a6 <TIM_OC1_SetConfig+0x8e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a14      	ldr	r2, [pc, #80]	; (80042f4 <TIM_OC1_SetConfig+0xdc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d111      	bne.n	80042ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	621a      	str	r2, [r3, #32]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40010400 	.word	0x40010400

080042f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f023 0210 	bic.w	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	021b      	lsls	r3, r3, #8
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f023 0320 	bic.w	r3, r3, #32
 8004342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a22      	ldr	r2, [pc, #136]	; (80043dc <TIM_OC2_SetConfig+0xe4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_OC2_SetConfig+0x68>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a21      	ldr	r2, [pc, #132]	; (80043e0 <TIM_OC2_SetConfig+0xe8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d10d      	bne.n	800437c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a17      	ldr	r2, [pc, #92]	; (80043dc <TIM_OC2_SetConfig+0xe4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_OC2_SetConfig+0x94>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <TIM_OC2_SetConfig+0xe8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d113      	bne.n	80043b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800439a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40010000 	.word	0x40010000
 80043e0:	40010400 	.word	0x40010400

080043e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0303 	bic.w	r3, r3, #3
 800441a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800442c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <TIM_OC3_SetConfig+0xe0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d003      	beq.n	800444a <TIM_OC3_SetConfig+0x66>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <TIM_OC3_SetConfig+0xe4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d10d      	bne.n	8004466 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a16      	ldr	r2, [pc, #88]	; (80044c4 <TIM_OC3_SetConfig+0xe0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_OC3_SetConfig+0x92>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <TIM_OC3_SetConfig+0xe4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d113      	bne.n	800449e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800447c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40010400 	.word	0x40010400

080044cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	031b      	lsls	r3, r3, #12
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <TIM_OC4_SetConfig+0xa4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_OC4_SetConfig+0x68>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a11      	ldr	r2, [pc, #68]	; (8004574 <TIM_OC4_SetConfig+0xa8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d109      	bne.n	8004548 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800453a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	019b      	lsls	r3, r3, #6
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	621a      	str	r2, [r3, #32]
}
 8004562:	bf00      	nop
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40010000 	.word	0x40010000
 8004574:	40010400 	.word	0x40010400

08004578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0201 	bic.w	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 030a 	bic.w	r3, r3, #10
 80045b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b087      	sub	sp, #28
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0210 	bic.w	r2, r3, #16
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	031b      	lsls	r3, r3, #12
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004612:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	f043 0307 	orr.w	r3, r3, #7
 8004658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	021a      	lsls	r2, r3, #8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	431a      	orrs	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4313      	orrs	r3, r2
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	609a      	str	r2, [r3, #8]
}
 80046a0:	bf00      	nop
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e05a      	b.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a21      	ldr	r2, [pc, #132]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d022      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004710:	d01d      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1d      	ldr	r2, [pc, #116]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d018      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00e      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a18      	ldr	r2, [pc, #96]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d009      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a17      	ldr	r2, [pc, #92]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10c      	bne.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	4313      	orrs	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40010400 	.word	0x40010400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40001800 	.word	0x40001800

080047a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047bc:	2302      	movs	r3, #2
 80047be:	e03d      	b.n	800483c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e03f      	b.n	8004902 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd fa04 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f9cb 	bl	8004c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b08a      	sub	sp, #40	; 0x28
 800490e:	af02      	add	r7, sp, #8
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b20      	cmp	r3, #32
 8004928:	d17c      	bne.n	8004a24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_UART_Transmit+0x2c>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e075      	b.n	8004a26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_UART_Transmit+0x3e>
 8004944:	2302      	movs	r3, #2
 8004946:	e06e      	b.n	8004a26 <HAL_UART_Transmit+0x11c>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2221      	movs	r2, #33	; 0x21
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800495e:	f7fd fc53 	bl	8002208 <HAL_GetTick>
 8004962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	88fa      	ldrh	r2, [r7, #6]
 800496e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004978:	d108      	bne.n	800498c <HAL_UART_Transmit+0x82>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d104      	bne.n	800498c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004982:	2300      	movs	r3, #0
 8004984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	e003      	b.n	8004994 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800499c:	e02a      	b.n	80049f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2180      	movs	r1, #128	; 0x80
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f8e2 	bl	8004b72 <UART_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e036      	b.n	8004a26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10b      	bne.n	80049d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	3302      	adds	r3, #2
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	e007      	b.n	80049e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	781a      	ldrb	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	3301      	adds	r3, #1
 80049e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1cf      	bne.n	800499e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2200      	movs	r2, #0
 8004a06:	2140      	movs	r1, #64	; 0x40
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f8b2 	bl	8004b72 <UART_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e006      	b.n	8004a26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b08a      	sub	sp, #40	; 0x28
 8004a32:	af02      	add	r7, sp, #8
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	f040 808c 	bne.w	8004b68 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_UART_Receive+0x2e>
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e084      	b.n	8004b6a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Receive+0x40>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e07d      	b.n	8004b6a <HAL_UART_Receive+0x13c>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2222      	movs	r2, #34	; 0x22
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a8a:	f7fd fbbd 	bl	8002208 <HAL_GetTick>
 8004a8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	88fa      	ldrh	r2, [r7, #6]
 8004a94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa4:	d108      	bne.n	8004ab8 <HAL_UART_Receive+0x8a>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d104      	bne.n	8004ab8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	e003      	b.n	8004ac0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004ac8:	e043      	b.n	8004b52 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2120      	movs	r1, #32
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f84c 	bl	8004b72 <UART_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e042      	b.n	8004b6a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10c      	bne.n	8004b04 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	3302      	adds	r3, #2
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e01f      	b.n	8004b44 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0c:	d007      	beq.n	8004b1e <HAL_UART_Receive+0xf0>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <HAL_UART_Receive+0xfe>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e008      	b.n	8004b3e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1b6      	bne.n	8004aca <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e000      	b.n	8004b6a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004b68:	2302      	movs	r3, #2
  }
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3720      	adds	r7, #32
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b090      	sub	sp, #64	; 0x40
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b82:	e050      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d04c      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d007      	beq.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b92:	f7fd fb39 	bl	8002208 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d241      	bcs.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bc2:	637a      	str	r2, [r7, #52]	; 0x34
 8004bc4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e5      	bne.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	613b      	str	r3, [r7, #16]
   return(result);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3314      	adds	r3, #20
 8004bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bf6:	623a      	str	r2, [r7, #32]
 8004bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	69f9      	ldr	r1, [r7, #28]
 8004bfc:	6a3a      	ldr	r2, [r7, #32]
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e5      	bne.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e00f      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	bf0c      	ite	eq
 8004c36:	2301      	moveq	r3, #1
 8004c38:	2300      	movne	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d09f      	beq.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3740      	adds	r7, #64	; 0x40
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c54:	b0c0      	sub	sp, #256	; 0x100
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6c:	68d9      	ldr	r1, [r3, #12]
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	ea40 0301 	orr.w	r3, r0, r1
 8004c78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ca8:	f021 010c 	bic.w	r1, r1, #12
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cca:	6999      	ldr	r1, [r3, #24]
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	ea40 0301 	orr.w	r3, r0, r1
 8004cd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b8f      	ldr	r3, [pc, #572]	; (8004f1c <UART_SetConfig+0x2cc>)
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d005      	beq.n	8004cf0 <UART_SetConfig+0xa0>
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b8d      	ldr	r3, [pc, #564]	; (8004f20 <UART_SetConfig+0x2d0>)
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d104      	bne.n	8004cfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cf0:	f7fe fa56 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 8004cf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cf8:	e003      	b.n	8004d02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cfa:	f7fe fa3d 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 8004cfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0c:	f040 810c 	bne.w	8004f28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d22:	4622      	mov	r2, r4
 8004d24:	462b      	mov	r3, r5
 8004d26:	1891      	adds	r1, r2, r2
 8004d28:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d2a:	415b      	adcs	r3, r3
 8004d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d32:	4621      	mov	r1, r4
 8004d34:	eb12 0801 	adds.w	r8, r2, r1
 8004d38:	4629      	mov	r1, r5
 8004d3a:	eb43 0901 	adc.w	r9, r3, r1
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d52:	4690      	mov	r8, r2
 8004d54:	4699      	mov	r9, r3
 8004d56:	4623      	mov	r3, r4
 8004d58:	eb18 0303 	adds.w	r3, r8, r3
 8004d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d60:	462b      	mov	r3, r5
 8004d62:	eb49 0303 	adc.w	r3, r9, r3
 8004d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d7e:	460b      	mov	r3, r1
 8004d80:	18db      	adds	r3, r3, r3
 8004d82:	653b      	str	r3, [r7, #80]	; 0x50
 8004d84:	4613      	mov	r3, r2
 8004d86:	eb42 0303 	adc.w	r3, r2, r3
 8004d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d94:	f7fb fa32 	bl	80001fc <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4b61      	ldr	r3, [pc, #388]	; (8004f24 <UART_SetConfig+0x2d4>)
 8004d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	011c      	lsls	r4, r3, #4
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004db0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004db4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004dc8:	4641      	mov	r1, r8
 8004dca:	eb12 0a01 	adds.w	sl, r2, r1
 8004dce:	4649      	mov	r1, r9
 8004dd0:	eb43 0b01 	adc.w	fp, r3, r1
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004de0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004de8:	4692      	mov	sl, r2
 8004dea:	469b      	mov	fp, r3
 8004dec:	4643      	mov	r3, r8
 8004dee:	eb1a 0303 	adds.w	r3, sl, r3
 8004df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004df6:	464b      	mov	r3, r9
 8004df8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e14:	460b      	mov	r3, r1
 8004e16:	18db      	adds	r3, r3, r3
 8004e18:	643b      	str	r3, [r7, #64]	; 0x40
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	eb42 0303 	adc.w	r3, r2, r3
 8004e20:	647b      	str	r3, [r7, #68]	; 0x44
 8004e22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e2a:	f7fb f9e7 	bl	80001fc <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4611      	mov	r1, r2
 8004e34:	4b3b      	ldr	r3, [pc, #236]	; (8004f24 <UART_SetConfig+0x2d4>)
 8004e36:	fba3 2301 	umull	r2, r3, r3, r1
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	2264      	movs	r2, #100	; 0x64
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	1acb      	subs	r3, r1, r3
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e4a:	4b36      	ldr	r3, [pc, #216]	; (8004f24 <UART_SetConfig+0x2d4>)
 8004e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e58:	441c      	add	r4, r3
 8004e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	1891      	adds	r1, r2, r2
 8004e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e74:	415b      	adcs	r3, r3
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	1851      	adds	r1, r2, r1
 8004e80:	6339      	str	r1, [r7, #48]	; 0x30
 8004e82:	4649      	mov	r1, r9
 8004e84:	414b      	adcs	r3, r1
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e94:	4659      	mov	r1, fp
 8004e96:	00cb      	lsls	r3, r1, #3
 8004e98:	4651      	mov	r1, sl
 8004e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e9e:	4651      	mov	r1, sl
 8004ea0:	00ca      	lsls	r2, r1, #3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	189b      	adds	r3, r3, r2
 8004eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	460a      	mov	r2, r1
 8004eb4:	eb42 0303 	adc.w	r3, r2, r3
 8004eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ec8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ecc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	18db      	adds	r3, r3, r3
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	eb42 0303 	adc.w	r3, r2, r3
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ee6:	f7fb f989 	bl	80001fc <__aeabi_uldivmod>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <UART_SetConfig+0x2d4>)
 8004ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	2164      	movs	r1, #100	; 0x64
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	3332      	adds	r3, #50	; 0x32
 8004f02:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <UART_SetConfig+0x2d4>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	f003 0207 	and.w	r2, r3, #7
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4422      	add	r2, r4
 8004f16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f18:	e105      	b.n	8005126 <UART_SetConfig+0x4d6>
 8004f1a:	bf00      	nop
 8004f1c:	40011000 	.word	0x40011000
 8004f20:	40011400 	.word	0x40011400
 8004f24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f3a:	4642      	mov	r2, r8
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	1891      	adds	r1, r2, r2
 8004f40:	6239      	str	r1, [r7, #32]
 8004f42:	415b      	adcs	r3, r3
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
 8004f46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f4a:	4641      	mov	r1, r8
 8004f4c:	1854      	adds	r4, r2, r1
 8004f4e:	4649      	mov	r1, r9
 8004f50:	eb43 0501 	adc.w	r5, r3, r1
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	00eb      	lsls	r3, r5, #3
 8004f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f62:	00e2      	lsls	r2, r4, #3
 8004f64:	4614      	mov	r4, r2
 8004f66:	461d      	mov	r5, r3
 8004f68:	4643      	mov	r3, r8
 8004f6a:	18e3      	adds	r3, r4, r3
 8004f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f70:	464b      	mov	r3, r9
 8004f72:	eb45 0303 	adc.w	r3, r5, r3
 8004f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f96:	4629      	mov	r1, r5
 8004f98:	008b      	lsls	r3, r1, #2
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	008a      	lsls	r2, r1, #2
 8004fa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fa8:	f7fb f928 	bl	80001fc <__aeabi_uldivmod>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4b60      	ldr	r3, [pc, #384]	; (8005134 <UART_SetConfig+0x4e4>)
 8004fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	011c      	lsls	r4, r3, #4
 8004fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004fc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004fcc:	4642      	mov	r2, r8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	1891      	adds	r1, r2, r2
 8004fd2:	61b9      	str	r1, [r7, #24]
 8004fd4:	415b      	adcs	r3, r3
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fdc:	4641      	mov	r1, r8
 8004fde:	1851      	adds	r1, r2, r1
 8004fe0:	6139      	str	r1, [r7, #16]
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	414b      	adcs	r3, r1
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	00cb      	lsls	r3, r1, #3
 8004ff8:	4651      	mov	r1, sl
 8004ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffe:	4651      	mov	r1, sl
 8005000:	00ca      	lsls	r2, r1, #3
 8005002:	4610      	mov	r0, r2
 8005004:	4619      	mov	r1, r3
 8005006:	4603      	mov	r3, r0
 8005008:	4642      	mov	r2, r8
 800500a:	189b      	adds	r3, r3, r2
 800500c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005010:	464b      	mov	r3, r9
 8005012:	460a      	mov	r2, r1
 8005014:	eb42 0303 	adc.w	r3, r2, r3
 8005018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	67bb      	str	r3, [r7, #120]	; 0x78
 8005026:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005034:	4649      	mov	r1, r9
 8005036:	008b      	lsls	r3, r1, #2
 8005038:	4641      	mov	r1, r8
 800503a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800503e:	4641      	mov	r1, r8
 8005040:	008a      	lsls	r2, r1, #2
 8005042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005046:	f7fb f8d9 	bl	80001fc <__aeabi_uldivmod>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4b39      	ldr	r3, [pc, #228]	; (8005134 <UART_SetConfig+0x4e4>)
 8005050:	fba3 1302 	umull	r1, r3, r3, r2
 8005054:	095b      	lsrs	r3, r3, #5
 8005056:	2164      	movs	r1, #100	; 0x64
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	3332      	adds	r3, #50	; 0x32
 8005062:	4a34      	ldr	r2, [pc, #208]	; (8005134 <UART_SetConfig+0x4e4>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800506e:	441c      	add	r4, r3
 8005070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005074:	2200      	movs	r2, #0
 8005076:	673b      	str	r3, [r7, #112]	; 0x70
 8005078:	677a      	str	r2, [r7, #116]	; 0x74
 800507a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800507e:	4642      	mov	r2, r8
 8005080:	464b      	mov	r3, r9
 8005082:	1891      	adds	r1, r2, r2
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	415b      	adcs	r3, r3
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800508e:	4641      	mov	r1, r8
 8005090:	1851      	adds	r1, r2, r1
 8005092:	6039      	str	r1, [r7, #0]
 8005094:	4649      	mov	r1, r9
 8005096:	414b      	adcs	r3, r1
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050a6:	4659      	mov	r1, fp
 80050a8:	00cb      	lsls	r3, r1, #3
 80050aa:	4651      	mov	r1, sl
 80050ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050b0:	4651      	mov	r1, sl
 80050b2:	00ca      	lsls	r2, r1, #3
 80050b4:	4610      	mov	r0, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	4603      	mov	r3, r0
 80050ba:	4642      	mov	r2, r8
 80050bc:	189b      	adds	r3, r3, r2
 80050be:	66bb      	str	r3, [r7, #104]	; 0x68
 80050c0:	464b      	mov	r3, r9
 80050c2:	460a      	mov	r2, r1
 80050c4:	eb42 0303 	adc.w	r3, r2, r3
 80050c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	663b      	str	r3, [r7, #96]	; 0x60
 80050d4:	667a      	str	r2, [r7, #100]	; 0x64
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050e2:	4649      	mov	r1, r9
 80050e4:	008b      	lsls	r3, r1, #2
 80050e6:	4641      	mov	r1, r8
 80050e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ec:	4641      	mov	r1, r8
 80050ee:	008a      	lsls	r2, r1, #2
 80050f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050f4:	f7fb f882 	bl	80001fc <__aeabi_uldivmod>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4b0d      	ldr	r3, [pc, #52]	; (8005134 <UART_SetConfig+0x4e4>)
 80050fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	2164      	movs	r1, #100	; 0x64
 8005106:	fb01 f303 	mul.w	r3, r1, r3
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	3332      	adds	r3, #50	; 0x32
 8005110:	4a08      	ldr	r2, [pc, #32]	; (8005134 <UART_SetConfig+0x4e4>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	f003 020f 	and.w	r2, r3, #15
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4422      	add	r2, r4
 8005124:	609a      	str	r2, [r3, #8]
}
 8005126:	bf00      	nop
 8005128:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800512c:	46bd      	mov	sp, r7
 800512e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005132:	bf00      	nop
 8005134:	51eb851f 	.word	0x51eb851f

08005138 <atoi>:
 8005138:	220a      	movs	r2, #10
 800513a:	2100      	movs	r1, #0
 800513c:	f000 b8b4 	b.w	80052a8 <strtol>

08005140 <__errno>:
 8005140:	4b01      	ldr	r3, [pc, #4]	; (8005148 <__errno+0x8>)
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	2000000c 	.word	0x2000000c

0800514c <__libc_init_array>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4d0d      	ldr	r5, [pc, #52]	; (8005184 <__libc_init_array+0x38>)
 8005150:	4c0d      	ldr	r4, [pc, #52]	; (8005188 <__libc_init_array+0x3c>)
 8005152:	1b64      	subs	r4, r4, r5
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	2600      	movs	r6, #0
 8005158:	42a6      	cmp	r6, r4
 800515a:	d109      	bne.n	8005170 <__libc_init_array+0x24>
 800515c:	4d0b      	ldr	r5, [pc, #44]	; (800518c <__libc_init_array+0x40>)
 800515e:	4c0c      	ldr	r4, [pc, #48]	; (8005190 <__libc_init_array+0x44>)
 8005160:	f000 f8ac 	bl	80052bc <_init>
 8005164:	1b64      	subs	r4, r4, r5
 8005166:	10a4      	asrs	r4, r4, #2
 8005168:	2600      	movs	r6, #0
 800516a:	42a6      	cmp	r6, r4
 800516c:	d105      	bne.n	800517a <__libc_init_array+0x2e>
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	f855 3b04 	ldr.w	r3, [r5], #4
 8005174:	4798      	blx	r3
 8005176:	3601      	adds	r6, #1
 8005178:	e7ee      	b.n	8005158 <__libc_init_array+0xc>
 800517a:	f855 3b04 	ldr.w	r3, [r5], #4
 800517e:	4798      	blx	r3
 8005180:	3601      	adds	r6, #1
 8005182:	e7f2      	b.n	800516a <__libc_init_array+0x1e>
 8005184:	080059d8 	.word	0x080059d8
 8005188:	080059d8 	.word	0x080059d8
 800518c:	080059d8 	.word	0x080059d8
 8005190:	080059dc 	.word	0x080059dc

08005194 <memset>:
 8005194:	4402      	add	r2, r0
 8005196:	4603      	mov	r3, r0
 8005198:	4293      	cmp	r3, r2
 800519a:	d100      	bne.n	800519e <memset+0xa>
 800519c:	4770      	bx	lr
 800519e:	f803 1b01 	strb.w	r1, [r3], #1
 80051a2:	e7f9      	b.n	8005198 <memset+0x4>

080051a4 <_strtol_l.constprop.0>:
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051aa:	d001      	beq.n	80051b0 <_strtol_l.constprop.0+0xc>
 80051ac:	2b24      	cmp	r3, #36	; 0x24
 80051ae:	d906      	bls.n	80051be <_strtol_l.constprop.0+0x1a>
 80051b0:	f7ff ffc6 	bl	8005140 <__errno>
 80051b4:	2316      	movs	r3, #22
 80051b6:	6003      	str	r3, [r0, #0]
 80051b8:	2000      	movs	r0, #0
 80051ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80052a4 <_strtol_l.constprop.0+0x100>
 80051c2:	460d      	mov	r5, r1
 80051c4:	462e      	mov	r6, r5
 80051c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051ca:	f814 700c 	ldrb.w	r7, [r4, ip]
 80051ce:	f017 0708 	ands.w	r7, r7, #8
 80051d2:	d1f7      	bne.n	80051c4 <_strtol_l.constprop.0+0x20>
 80051d4:	2c2d      	cmp	r4, #45	; 0x2d
 80051d6:	d132      	bne.n	800523e <_strtol_l.constprop.0+0x9a>
 80051d8:	782c      	ldrb	r4, [r5, #0]
 80051da:	2701      	movs	r7, #1
 80051dc:	1cb5      	adds	r5, r6, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d05b      	beq.n	800529a <_strtol_l.constprop.0+0xf6>
 80051e2:	2b10      	cmp	r3, #16
 80051e4:	d109      	bne.n	80051fa <_strtol_l.constprop.0+0x56>
 80051e6:	2c30      	cmp	r4, #48	; 0x30
 80051e8:	d107      	bne.n	80051fa <_strtol_l.constprop.0+0x56>
 80051ea:	782c      	ldrb	r4, [r5, #0]
 80051ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80051f0:	2c58      	cmp	r4, #88	; 0x58
 80051f2:	d14d      	bne.n	8005290 <_strtol_l.constprop.0+0xec>
 80051f4:	786c      	ldrb	r4, [r5, #1]
 80051f6:	2310      	movs	r3, #16
 80051f8:	3502      	adds	r5, #2
 80051fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80051fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8005202:	f04f 0c00 	mov.w	ip, #0
 8005206:	fbb8 f9f3 	udiv	r9, r8, r3
 800520a:	4666      	mov	r6, ip
 800520c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005210:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005214:	f1be 0f09 	cmp.w	lr, #9
 8005218:	d816      	bhi.n	8005248 <_strtol_l.constprop.0+0xa4>
 800521a:	4674      	mov	r4, lr
 800521c:	42a3      	cmp	r3, r4
 800521e:	dd24      	ble.n	800526a <_strtol_l.constprop.0+0xc6>
 8005220:	f1bc 0f00 	cmp.w	ip, #0
 8005224:	db1e      	blt.n	8005264 <_strtol_l.constprop.0+0xc0>
 8005226:	45b1      	cmp	r9, r6
 8005228:	d31c      	bcc.n	8005264 <_strtol_l.constprop.0+0xc0>
 800522a:	d101      	bne.n	8005230 <_strtol_l.constprop.0+0x8c>
 800522c:	45a2      	cmp	sl, r4
 800522e:	db19      	blt.n	8005264 <_strtol_l.constprop.0+0xc0>
 8005230:	fb06 4603 	mla	r6, r6, r3, r4
 8005234:	f04f 0c01 	mov.w	ip, #1
 8005238:	f815 4b01 	ldrb.w	r4, [r5], #1
 800523c:	e7e8      	b.n	8005210 <_strtol_l.constprop.0+0x6c>
 800523e:	2c2b      	cmp	r4, #43	; 0x2b
 8005240:	bf04      	itt	eq
 8005242:	782c      	ldrbeq	r4, [r5, #0]
 8005244:	1cb5      	addeq	r5, r6, #2
 8005246:	e7ca      	b.n	80051de <_strtol_l.constprop.0+0x3a>
 8005248:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800524c:	f1be 0f19 	cmp.w	lr, #25
 8005250:	d801      	bhi.n	8005256 <_strtol_l.constprop.0+0xb2>
 8005252:	3c37      	subs	r4, #55	; 0x37
 8005254:	e7e2      	b.n	800521c <_strtol_l.constprop.0+0x78>
 8005256:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800525a:	f1be 0f19 	cmp.w	lr, #25
 800525e:	d804      	bhi.n	800526a <_strtol_l.constprop.0+0xc6>
 8005260:	3c57      	subs	r4, #87	; 0x57
 8005262:	e7db      	b.n	800521c <_strtol_l.constprop.0+0x78>
 8005264:	f04f 3cff 	mov.w	ip, #4294967295
 8005268:	e7e6      	b.n	8005238 <_strtol_l.constprop.0+0x94>
 800526a:	f1bc 0f00 	cmp.w	ip, #0
 800526e:	da05      	bge.n	800527c <_strtol_l.constprop.0+0xd8>
 8005270:	2322      	movs	r3, #34	; 0x22
 8005272:	6003      	str	r3, [r0, #0]
 8005274:	4646      	mov	r6, r8
 8005276:	b942      	cbnz	r2, 800528a <_strtol_l.constprop.0+0xe6>
 8005278:	4630      	mov	r0, r6
 800527a:	e79e      	b.n	80051ba <_strtol_l.constprop.0+0x16>
 800527c:	b107      	cbz	r7, 8005280 <_strtol_l.constprop.0+0xdc>
 800527e:	4276      	negs	r6, r6
 8005280:	2a00      	cmp	r2, #0
 8005282:	d0f9      	beq.n	8005278 <_strtol_l.constprop.0+0xd4>
 8005284:	f1bc 0f00 	cmp.w	ip, #0
 8005288:	d000      	beq.n	800528c <_strtol_l.constprop.0+0xe8>
 800528a:	1e69      	subs	r1, r5, #1
 800528c:	6011      	str	r1, [r2, #0]
 800528e:	e7f3      	b.n	8005278 <_strtol_l.constprop.0+0xd4>
 8005290:	2430      	movs	r4, #48	; 0x30
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1b1      	bne.n	80051fa <_strtol_l.constprop.0+0x56>
 8005296:	2308      	movs	r3, #8
 8005298:	e7af      	b.n	80051fa <_strtol_l.constprop.0+0x56>
 800529a:	2c30      	cmp	r4, #48	; 0x30
 800529c:	d0a5      	beq.n	80051ea <_strtol_l.constprop.0+0x46>
 800529e:	230a      	movs	r3, #10
 80052a0:	e7ab      	b.n	80051fa <_strtol_l.constprop.0+0x56>
 80052a2:	bf00      	nop
 80052a4:	080058cd 	.word	0x080058cd

080052a8 <strtol>:
 80052a8:	4613      	mov	r3, r2
 80052aa:	460a      	mov	r2, r1
 80052ac:	4601      	mov	r1, r0
 80052ae:	4802      	ldr	r0, [pc, #8]	; (80052b8 <strtol+0x10>)
 80052b0:	6800      	ldr	r0, [r0, #0]
 80052b2:	f7ff bf77 	b.w	80051a4 <_strtol_l.constprop.0>
 80052b6:	bf00      	nop
 80052b8:	2000000c 	.word	0x2000000c

080052bc <_init>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	bf00      	nop
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr

080052c8 <_fini>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr
