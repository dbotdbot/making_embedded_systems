
Servo_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006460  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800660c  0800660c  0001660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d8c  08006d8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006d8c  08006d8c  00016d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d94  08006d94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d94  08006d94  00016d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000037c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ec  200003ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017da6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003577  00000000  00000000  00037e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  0003b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001060  00000000  00000000  0003c548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c8e  00000000  00000000  0003d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157fe  00000000  00000000  00065236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1071  00000000  00000000  0007aa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015baa5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049a8  00000000  00000000  0015baf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080065f4 	.word	0x080065f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	080065f4 	.word	0x080065f4

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <_ZN6canBus4initEv>:
#include <main.h>
#include <global.h>
#include <cstdlib>


void canBus::init(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]

	  hcan1.Instance = CAN1;
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <_ZN6canBus4initEv+0x78>)
 800050a:	4a1c      	ldr	r2, [pc, #112]	; (800057c <_ZN6canBus4initEv+0x7c>)
 800050c:	601a      	str	r2, [r3, #0]
	  hcan1.Init.Prescaler = 16;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <_ZN6canBus4initEv+0x78>)
 8000510:	2210      	movs	r2, #16
 8000512:	605a      	str	r2, [r3, #4]
	  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <_ZN6canBus4initEv+0x78>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
	  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <_ZN6canBus4initEv+0x78>)
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
	  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <_ZN6canBus4initEv+0x78>)
 8000522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000526:	611a      	str	r2, [r3, #16]
	  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <_ZN6canBus4initEv+0x78>)
 800052a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800052e:	615a      	str	r2, [r3, #20]
	  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <_ZN6canBus4initEv+0x78>)
 8000532:	2200      	movs	r2, #0
 8000534:	761a      	strb	r2, [r3, #24]
	  hcan1.Init.AutoBusOff = DISABLE;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <_ZN6canBus4initEv+0x78>)
 8000538:	2200      	movs	r2, #0
 800053a:	765a      	strb	r2, [r3, #25]
	  hcan1.Init.AutoWakeUp = DISABLE;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <_ZN6canBus4initEv+0x78>)
 800053e:	2200      	movs	r2, #0
 8000540:	769a      	strb	r2, [r3, #26]
	  hcan1.Init.AutoRetransmission = DISABLE;
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <_ZN6canBus4initEv+0x78>)
 8000544:	2200      	movs	r2, #0
 8000546:	76da      	strb	r2, [r3, #27]
	  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <_ZN6canBus4initEv+0x78>)
 800054a:	2200      	movs	r2, #0
 800054c:	771a      	strb	r2, [r3, #28]
	  hcan1.Init.TransmitFifoPriority = DISABLE;
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <_ZN6canBus4initEv+0x78>)
 8000550:	2200      	movs	r2, #0
 8000552:	775a      	strb	r2, [r3, #29]
	  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000554:	4808      	ldr	r0, [pc, #32]	; (8000578 <_ZN6canBus4initEv+0x78>)
 8000556:	f002 f9db 	bl	8002910 <HAL_CAN_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	bf14      	ite	ne
 8000560:	2301      	movne	r3, #1
 8000562:	2300      	moveq	r3, #0
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <_ZN6canBus4initEv+0x6e>
	  {
	    Error_Handler();
 800056a:	f000 f899 	bl	80006a0 <_ZN6canBus13Error_HandlerEv>
	  /* USER CODE BEGIN CAN1_Init 2 */

	  /* USER CODE END CAN1_Init 2 */


}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000258 	.word	0x20000258
 800057c:	40006400 	.word	0x40006400

08000580 <_ZN6canBus6turnOnEv>:

void canBus::turnOn(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	HAL_CAN_Start(&hcan1);
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <_ZN6canBus6turnOnEv+0x34>)
 800058a:	f002 fb9d 	bl	8002cc8 <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800058e:	2102      	movs	r1, #2
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <_ZN6canBus6turnOnEv+0x34>)
 8000592:	f002 fcb8 	bl	8002f06 <HAL_CAN_ActivateNotification>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	bf14      	ite	ne
 800059c:	2301      	movne	r3, #1
 800059e:	2300      	moveq	r3, #0
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <_ZN6canBus6turnOnEv+0x2a>
	  {
		  Error_Handler();
 80005a6:	f000 f87b 	bl	80006a0 <_ZN6canBus13Error_HandlerEv>
	  }
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000258 	.word	0x20000258

080005b8 <_ZN6canBus20transmitHeaderConfigEv>:

void canBus::transmitHeaderConfig(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <_ZN6canBus20transmitHeaderConfigEv+0x28>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 0x446;
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <_ZN6canBus20transmitHeaderConfigEv+0x28>)
 80005c8:	f240 4246 	movw	r2, #1094	; 0x446
 80005cc:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <_ZN6canBus20transmitHeaderConfigEv+0x28>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	200003c4 	.word	0x200003c4

080005e4 <_ZN6canBus8transmitEmPh>:

void canBus::transmit(uint32_t numDataBytes, uint8_t *data)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	TxHeader.DLC = numDataBytes;
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <_ZN6canBus8transmitEmPh+0x60>)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	6113      	str	r3, [r2, #16]
	for(uint32_t i = 0; i<numDataBytes; i++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d20c      	bcs.n	800061c <_ZN6canBus8transmitEmPh+0x38>
	{
		TxData[i] = data[i];
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	4413      	add	r3, r2
 8000608:	7819      	ldrb	r1, [r3, #0]
 800060a:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <_ZN6canBus8transmitEmPh+0x64>)
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	4413      	add	r3, r2
 8000610:	460a      	mov	r2, r1
 8000612:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i<numDataBytes; i++)
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	3301      	adds	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e7ee      	b.n	80005fa <_ZN6canBus8transmitEmPh+0x16>
	}
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <_ZN6canBus8transmitEmPh+0x68>)
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <_ZN6canBus8transmitEmPh+0x64>)
 8000620:	4908      	ldr	r1, [pc, #32]	; (8000644 <_ZN6canBus8transmitEmPh+0x60>)
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <_ZN6canBus8transmitEmPh+0x6c>)
 8000624:	f002 fb94 	bl	8002d50 <HAL_CAN_AddTxMessage>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	bf14      	ite	ne
 800062e:	2301      	movne	r3, #1
 8000630:	2300      	moveq	r3, #0
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <_ZN6canBus8transmitEmPh+0x58>
	{
	   Error_Handler ();
 8000638:	f000 f832 	bl	80006a0 <_ZN6canBus13Error_HandlerEv>
	}
}
 800063c:	bf00      	nop
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200003c4 	.word	0x200003c4
 8000648:	200003dc 	.word	0x200003dc
 800064c:	200003e4 	.word	0x200003e4
 8000650:	20000258 	.word	0x20000258

08000654 <_ZN6canBus12filterConfigEv>:

void canBus::filterConfig(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	b08c      	sub	sp, #48	; 0x30
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800065c:	2301      	movs	r3, #1
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
	canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000660:	230a      	movs	r3, #10
 8000662:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterIdHigh = 0x446<<5;
 8000668:	f648 03c0 	movw	r3, #35008	; 0x88c0
 800066c:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterIdLow = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 8000672:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000676:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000680:	2301      	movs	r3, #1
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1
 8000684:	2314      	movs	r3, #20
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	4619      	mov	r1, r3
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <_ZN6canBus12filterConfigEv+0x48>)
 8000690:	f002 fa3a 	bl	8002b08 <HAL_CAN_ConfigFilter>
}
 8000694:	bf00      	nop
 8000696:	3730      	adds	r7, #48	; 0x30
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000258 	.word	0x20000258

080006a0 <_ZN6canBus13Error_HandlerEv>:

void canBus::Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  __disable_irq();
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <_ZN6canBus13Error_HandlerEv+0x8>

080006aa <_ZL19ConsoleCommandMatchPKcS0_>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b085      	sub	sp, #20
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4413      	add	r3, r2
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	440b      	add	r3, r1
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d104      	bne.n	80006da <_ZL19ConsoleCommandMatchPKcS0_+0x30>
	{
		result = 1u;
 80006d0:	2301      	movs	r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
		i++;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d12a      	bne.n	8000736 <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
	while ( ( 1u == result ) &&
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b09      	cmp	r3, #9
 80006e4:	d827      	bhi.n	8000736 <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80006ee:	2b20      	cmp	r3, #32
 80006f0:	d021      	beq.n	8000736 <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80006fa:	2b0a      	cmp	r3, #10
 80006fc:	d01b      	beq.n	8000736 <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b0d      	cmp	r3, #13
 8000708:	d015      	beq.n	8000736 <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000712:	2b00      	cmp	r3, #0
 8000714:	d00f      	beq.n	8000736 <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		)
	{
		if ( buffer[i] != name[i] )
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	440b      	add	r3, r1
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	429a      	cmp	r2, r3
 8000728:	d001      	beq.n	800072e <_ZL19ConsoleCommandMatchPKcS0_+0x84>
		{
			result = 0u;
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
		}
		i++;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 8000734:	e7d1      	b.n	80006da <_ZL19ConsoleCommandMatchPKcS0_+0x30>
	}

	return result;
 8000736:	68bb      	ldr	r3, [r7, #8]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <_ZL18ConsoleResetBufferPcmm>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 8000744:	b480      	push	{r7}
 8000746:	b087      	sub	sp, #28
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	429a      	cmp	r2, r3
 8000762:	d20e      	bcs.n	8000782 <_ZL18ConsoleResetBufferPcmm+0x3e>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	441a      	add	r2, r3
 800076a:	68f9      	ldr	r1, [r7, #12]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	440b      	add	r3, r1
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	701a      	strb	r2, [r3, #0]
		i++;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	3301      	adds	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000780:	e7ec      	b.n	800075c <_ZL18ConsoleResetBufferPcmm+0x18>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	2bff      	cmp	r3, #255	; 0xff
 8000786:	d808      	bhi.n	800079a <_ZL18ConsoleResetBufferPcmm+0x56>
	{
		receiveBuffer[i] =  NULL_CHAR;
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	4413      	add	r3, r2
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e7f3      	b.n	8000782 <_ZL18ConsoleResetBufferPcmm+0x3e>
	}
	return remaining;
 800079a:	693b      	ldr	r3, [r7, #16]
}
 800079c:	4618      	mov	r0, r3
 800079e:	371c      	adds	r7, #28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <_ZL21ConsoleCommandEndlinePKcm>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
			&& ( i < filledLength ) )
 80007c4:	2b0d      	cmp	r3, #13
 80007c6:	d00d      	beq.n	80007e4 <_ZL21ConsoleCommandEndlinePKcm+0x3c>
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	4413      	add	r3, r2
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b0a      	cmp	r3, #10
 80007d2:	d007      	beq.n	80007e4 <_ZL21ConsoleCommandEndlinePKcm+0x3c>
			&& ( i < filledLength ) )
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d203      	bcs.n	80007e4 <_ZL21ConsoleCommandEndlinePKcm+0x3c>
	{
		i++;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80007e2:	e7eb      	b.n	80007bc <_ZL21ConsoleCommandEndlinePKcm+0x14>
	}
	if ( i < filledLength )
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d201      	bcs.n	80007f0 <_ZL21ConsoleCommandEndlinePKcm+0x48>
	{
		result = i;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80007f0:	68bb      	ldr	r3, [r7, #8]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8000806:	f000 fc21 	bl	800104c <_Z13ConsoleIoInitv>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");	
 800080a:	480f      	ldr	r0, [pc, #60]	; (8000848 <ConsoleInit+0x48>)
 800080c:	f000 fc68 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(STR_ENDLINE);
 8000810:	480e      	ldr	r0, [pc, #56]	; (800084c <ConsoleInit+0x4c>)
 8000812:	f000 fc65 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <ConsoleInit+0x50>)
 8000818:	f000 fc62 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
	mReceivedSoFar = 0u;
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <ConsoleInit+0x54>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2bff      	cmp	r3, #255	; 0xff
 800082a:	d808      	bhi.n	800083e <ConsoleInit+0x3e>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <ConsoleInit+0x58>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3301      	adds	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	e7f3      	b.n	8000826 <ConsoleInit+0x26>
	}

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	0800660c 	.word	0x0800660c
 800084c:	08006654 	.word	0x08006654
 8000850:	08006658 	.word	0x08006658
 8000854:	2000018c 	.word	0x2000018c
 8000858:	2000008c 	.word	0x2000008c

0800085c <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(encoder *ptr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 8000864:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <ConsoleProcess+0x168>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a57      	ldr	r2, [pc, #348]	; (80009c8 <ConsoleProcess+0x16c>)
 800086a:	1898      	adds	r0, r3, r2
 800086c:	4b55      	ldr	r3, [pc, #340]	; (80009c4 <ConsoleProcess+0x168>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000874:	f107 0208 	add.w	r2, r7, #8
 8000878:	4619      	mov	r1, r3
 800087a:	f000 fc17 	bl	80010ac <_Z16ConsoleIoReceivePhmPm>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d104      	bne.n	800088e <ConsoleProcess+0x32>
 8000884:	4b51      	ldr	r3, [pc, #324]	; (80009cc <ConsoleProcess+0x170>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	f000 8097 	beq.w	80009bc <ConsoleProcess+0x160>
	{
		mReceiveBufferNeedsChecking = false;
 800088e:	4b4f      	ldr	r3, [pc, #316]	; (80009cc <ConsoleProcess+0x170>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000894:	4b4b      	ldr	r3, [pc, #300]	; (80009c4 <ConsoleProcess+0x168>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4413      	add	r3, r2
 800089c:	4a49      	ldr	r2, [pc, #292]	; (80009c4 <ConsoleProcess+0x168>)
 800089e:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 80008a0:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <ConsoleProcess+0x168>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	4848      	ldr	r0, [pc, #288]	; (80009c8 <ConsoleProcess+0x16c>)
 80008a8:	f7ff ff7e 	bl	80007a8 <_ZL21ConsoleCommandEndlinePKcm>
 80008ac:	6178      	str	r0, [r7, #20]
		if ( cmdEndline >= 0 )  // have complete string, find command
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f2c0 8083 	blt.w	80009bc <ConsoleProcess+0x160>
		{
			commandTable = ConsoleCommandsGetTable();
 80008b6:	f000 fbbf 	bl	8001038 <_Z23ConsoleCommandsGetTablev>
 80008ba:	6138      	str	r0, [r7, #16]
			cmdIndex = 0u;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
			found = NOT_FOUND;
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	61bb      	str	r3, [r7, #24]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80008c6:	69fa      	ldr	r2, [r7, #28]
 80008c8:	4613      	mov	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	4413      	add	r3, r2
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	461a      	mov	r2, r3
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	4413      	add	r3, r2
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d047      	beq.n	800096c <ConsoleProcess+0x110>
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e2:	d143      	bne.n	800096c <ConsoleProcess+0x110>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80008e4:	69fa      	ldr	r2, [r7, #28]
 80008e6:	4613      	mov	r3, r2
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	4413      	add	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	461a      	mov	r2, r3
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	4413      	add	r3, r2
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4934      	ldr	r1, [pc, #208]	; (80009c8 <ConsoleProcess+0x16c>)
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fed6 	bl	80006aa <_ZL19ConsoleCommandMatchPKcS0_>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	bf14      	ite	ne
 8000904:	2301      	movne	r3, #1
 8000906:	2300      	moveq	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d02a      	beq.n	8000964 <ConsoleProcess+0x108>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 800090e:	69fa      	ldr	r2, [r7, #28]
 8000910:	4613      	mov	r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	4413      	add	r3, r2
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	461a      	mov	r2, r3
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	4413      	add	r3, r2
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	4829      	ldr	r0, [pc, #164]	; (80009c8 <ConsoleProcess+0x16c>)
 8000922:	4798      	blx	r3
 8000924:	4603      	mov	r3, r0
 8000926:	73fb      	strb	r3, [r7, #15]
					if ( COMMAND_SUCCESS != result )
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d017      	beq.n	800095e <ConsoleProcess+0x102>
					{
						ConsoleIoSendString("Error: ");
 800092e:	4828      	ldr	r0, [pc, #160]	; (80009d0 <ConsoleProcess+0x174>)
 8000930:	f000 fbd6 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(mReceiveBuffer);
 8000934:	4824      	ldr	r0, [pc, #144]	; (80009c8 <ConsoleProcess+0x16c>)
 8000936:	f000 fbd3 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>

						ConsoleIoSendString("Help: ");
 800093a:	4826      	ldr	r0, [pc, #152]	; (80009d4 <ConsoleProcess+0x178>)
 800093c:	f000 fbd0 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	4613      	mov	r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	4413      	add	r3, r2
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	461a      	mov	r2, r3
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	4413      	add	r3, r2
 8000950:	3308      	adds	r3, #8
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fbc4 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(STR_ENDLINE);
 8000958:	481f      	ldr	r0, [pc, #124]	; (80009d8 <ConsoleProcess+0x17c>)
 800095a:	f000 fbc1 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>

					}
					found = cmdIndex;
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	61bb      	str	r3, [r7, #24]
 8000962:	e7b0      	b.n	80008c6 <ConsoleProcess+0x6a>
				}
				else
				{
					cmdIndex++;
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	3301      	adds	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800096a:	e7ac      	b.n	80008c6 <ConsoleProcess+0x6a>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00d      	beq.n	800098e <ConsoleProcess+0x132>
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000978:	d109      	bne.n	800098e <ConsoleProcess+0x132>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <ConsoleProcess+0x168>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d905      	bls.n	800098e <ConsoleProcess+0x132>
				{
					ConsoleIoSendString("Command not found.");
 8000982:	4816      	ldr	r0, [pc, #88]	; (80009dc <ConsoleProcess+0x180>)
 8000984:	f000 fbac 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
					ConsoleIoSendString(STR_ENDLINE);
 8000988:	4813      	ldr	r0, [pc, #76]	; (80009d8 <ConsoleProcess+0x17c>)
 800098a:	f000 fba9 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <ConsoleProcess+0x168>)
 8000990:	6819      	ldr	r1, [r3, #0]
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	461a      	mov	r2, r3
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <ConsoleProcess+0x16c>)
 800099a:	f7ff fed3 	bl	8000744 <_ZL18ConsoleResetBufferPcmm>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <ConsoleProcess+0x168>)
 80009a2:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <ConsoleProcess+0x168>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bf14      	ite	ne
 80009ac:	2301      	movne	r3, #1
 80009ae:	2300      	moveq	r3, #0
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <ConsoleProcess+0x170>)
 80009b4:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 80009b6:	480a      	ldr	r0, [pc, #40]	; (80009e0 <ConsoleProcess+0x184>)
 80009b8:	f000 fb92 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
		}
	}
}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000018c 	.word	0x2000018c
 80009c8:	2000008c 	.word	0x2000008c
 80009cc:	20000190 	.word	0x20000190
 80009d0:	0800665c 	.word	0x0800665c
 80009d4:	08006664 	.word	0x08006664
 80009d8:	08006654 	.word	0x08006654
 80009dc:	0800666c 	.word	0x0800666c
 80009e0:	08006658 	.word	0x08006658

080009e4 <_ZL17ConsoleParamFindNPKchPm>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	460b      	mov	r3, r1
 80009ee:	607a      	str	r2, [r7, #4]
 80009f0:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80009fa:	2300      	movs	r3, #0
 80009fc:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80009fe:	7afb      	ldrb	r3, [r7, #11]
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d00f      	beq.n	8000a26 <_ZL17ConsoleParamFindNPKchPm+0x42>
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	2bff      	cmp	r3, #255	; 0xff
 8000a0a:	d80c      	bhi.n	8000a26 <_ZL17ConsoleParamFindNPKchPm+0x42>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b20      	cmp	r3, #32
 8000a16:	d102      	bne.n	8000a1e <_ZL17ConsoleParamFindNPKchPm+0x3a>
		{
			parameterIndex++;
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3301      	adds	r3, #1
 8000a22:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000a24:	e7eb      	b.n	80009fe <_ZL17ConsoleParamFindNPKchPm+0x1a>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a2c:	d102      	bne.n	8000a34 <_ZL17ConsoleParamFindNPKchPm+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000a2e:	2310      	movs	r3, #16
 8000a30:	75fb      	strb	r3, [r7, #23]
 8000a32:	e002      	b.n	8000a3a <_ZL17ConsoleParamFindNPKchPm+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	69fa      	ldr	r2, [r7, #28]
 8000a38:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3724      	adds	r7, #36	; 0x24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	460b      	mov	r3, r1
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000a5a:	f107 021c 	add.w	r2, r7, #28
 8000a5e:	7afb      	ldrb	r3, [r7, #11]
 8000a60:	4619      	mov	r1, r3
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f7ff ffbe 	bl	80009e4 <_ZL17ConsoleParamFindNPKchPm>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	4413      	add	r3, r2
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000a82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a86:	2b0a      	cmp	r3, #10
 8000a88:	d01d      	beq.n	8000ac6 <ConsoleReceiveParamInt16+0x7e>
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000a8a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a8e:	2b0d      	cmp	r3, #13
 8000a90:	d019      	beq.n	8000ac6 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000a92:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a96:	2b20      	cmp	r3, #32
 8000a98:	d015      	beq.n	8000ac6 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	2b07      	cmp	r3, #7
 8000a9e:	d812      	bhi.n	8000ac6 <ConsoleReceiveParamInt16+0x7e>
	{
		str[i] = charVal;					// copy the relevant part
 8000aa0:	f107 0214 	add.w	r2, r7, #20
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	4413      	add	r3, r2
 8000aa8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000aac:	701a      	strb	r2, [r3, #0]
		i++;
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000ab4:	69fa      	ldr	r2, [r7, #28]
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	4413      	add	r3, r2
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	4413      	add	r3, r2
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000ac4:	e7dd      	b.n	8000a82 <ConsoleReceiveParamInt16+0x3a>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	2b08      	cmp	r3, #8
 8000aca:	d102      	bne.n	8000ad2 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000acc:	2310      	movs	r3, #16
 8000ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d10e      	bne.n	8000af8 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 8000ada:	f107 0214 	add.w	r2, r7, #20
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	4413      	add	r3, r2
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4618      	mov	r0, r3
 8000aec:	f005 fcc0 	bl	8006470 <atoi>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <_ZL9smallItoaiPci>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000b10:	2300      	movs	r3, #0
 8000b12:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da07      	bge.n	8000b2e <_ZL9smallItoaiPci+0x2a>
		isNegative = true;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	425b      	negs	r3, r3
 8000b26:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d008      	beq.n	8000b50 <_ZL9smallItoaiPci+0x4c>
		tmpIn = (int)tmpIn/radix;
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b46:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b4e:	e7f0      	b.n	8000b32 <_ZL9smallItoaiPci+0x2e>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	4413      	add	r3, r2
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b6c:	6879      	ldr	r1, [r7, #4]
 8000b6e:	fb01 f202 	mul.w	r2, r1, r2
 8000b72:	1a9b      	subs	r3, r3, r2
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	440b      	add	r3, r1
 8000b7c:	3230      	adds	r2, #48	; 0x30
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b8a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	1e5a      	subs	r2, r3, #1
 8000b90:	617a      	str	r2, [r7, #20]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d000      	beq.n	8000ba2 <_ZL9smallItoaiPci+0x9e>
	do {
 8000ba0:	e7e0      	b.n	8000b64 <_ZL9smallItoaiPci+0x60>

	if (isNegative) {
 8000ba2:	7ffb      	ldrb	r3, [r7, #31]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <_ZL9smallItoaiPci+0xaa>
		*(outBuffer) = '-';
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	222d      	movs	r2, #45	; 0x2d
 8000bac:	701a      	strb	r2, [r3, #0]
	}
}
 8000bae:	bf00      	nop
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc8:	f107 0108 	add.w	r1, r7, #8
 8000bcc:	220a      	movs	r2, #10
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff98 	bl	8000b04 <_ZL9smallItoaiPci>
	ConsoleIoSendString(out);
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fa81 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>

	return COMMAND_SUCCESS;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZL21ConsoleCommandCommentPKc>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <_ZL18ConsoleCommandHelpPKc>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d21f      	bcs.n	8000c5e <_ZL18ConsoleCommandHelpPKc+0x5e>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000c1e:	4912      	ldr	r1, [pc, #72]	; (8000c68 <_ZL18ConsoleCommandHelpPKc+0x68>)
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	4613      	mov	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	4413      	add	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	440b      	add	r3, r1
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fa56 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <_ZL18ConsoleCommandHelpPKc+0x6c>)
 8000c36:	f000 fa53 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	3308      	adds	r3, #8
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <_ZL18ConsoleCommandHelpPKc+0x68>)
 8000c48:	4413      	add	r3, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fa48 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <_ZL18ConsoleCommandHelpPKc+0x70>)
 8000c52:	f000 fa45 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e7da      	b.n	8000c14 <_ZL18ConsoleCommandHelpPKc+0x14>
	}
	return result;
 8000c5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	08006838 	.word	0x08006838
 8000c6c:	08006704 	.word	0x08006704
 8000c70:	08006708 	.word	0x08006708

08000c74 <_ZL20ConsoleCommandLedRedPKc>:
	}
	return result;
}

static eCommandResult_T ConsoleCommandLedRed(const char buffer[])
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 65535;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c86:	60da      	str	r2, [r3, #12]
	systemState.LEDGreen = 0;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
	systemState.LEDBlue = 0;
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
	return result;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200001e4 	.word	0x200001e4

08000ca8 <_ZL22ConsoleCommandLedGreenPKc>:

static eCommandResult_T ConsoleCommandLedGreen(const char buffer[])
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 0;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
	systemState.LEDGreen = 65535;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc0:	611a      	str	r2, [r3, #16]
	systemState.LEDBlue = 0;
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
	return result;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	200001e4 	.word	0x200001e4

08000cdc <_ZL21ConsoleCommandLedBluePKc>:

static eCommandResult_T ConsoleCommandLedBlue(const char buffer[])
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 0;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
	systemState.LEDGreen = 0;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
	systemState.LEDBlue = 65535;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfa:	615a      	str	r2, [r3, #20]
	return result;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	200001e4 	.word	0x200001e4

08000d10 <_ZL25ConsoleCommandGetSetpointPKc>:

static eCommandResult_T ConsoleCommandGetSetpoint(const char buffer[])
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString("setpoint = ");
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <_ZL25ConsoleCommandGetSetpointPKc+0x30>)
 8000d1a:	f000 f9e1 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
	ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <_ZL25ConsoleCommandGetSetpointPKc+0x34>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff48 	bl	8000bba <ConsoleSendParamInt16>
	ConsoleIoSendString(STR_ENDLINE);
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <_ZL25ConsoleCommandGetSetpointPKc+0x38>)
 8000d2c:	f000 f9d8 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>

	eCommandResult_T result = COMMAND_SUCCESS;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	08006738 	.word	0x08006738
 8000d44:	200001e4 	.word	0x200001e4
 8000d48:	08006708 	.word	0x08006708

08000d4c <_ZL25ConsoleCommandSetSetpointPKc>:

static eCommandResult_T ConsoleCommandSetSetpoint(const char buffer[])
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff fe73 	bl	8000a48 <ConsoleReceiveParamInt16>
 8000d62:	4603      	mov	r3, r0
 8000d64:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d110      	bne.n	8000d8e <_ZL25ConsoleCommandSetSetpointPKc+0x42>
		{
			systemState.setpoint = (uint32_t)parameterInt;
 8000d6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <_ZL25ConsoleCommandSetSetpointPKc+0x4c>)
 8000d74:	601a      	str	r2, [r3, #0]
			ConsoleIoSendString("Setpoint updated to ");
 8000d76:	4809      	ldr	r0, [pc, #36]	; (8000d9c <_ZL25ConsoleCommandSetSetpointPKc+0x50>)
 8000d78:	f000 f9b2 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <_ZL25ConsoleCommandSetSetpointPKc+0x4c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff19 	bl	8000bba <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <_ZL25ConsoleCommandSetSetpointPKc+0x54>)
 8000d8a:	f000 f9a9 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200001e4 	.word	0x200001e4
 8000d9c:	08006744 	.word	0x08006744
 8000da0:	08006708 	.word	0x08006708

08000da4 <_ZL22ConsoleCommandSetAnglePKc>:


static eCommandResult_T ConsoleCommandSetAngle(const char buffer[])
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	461a      	mov	r2, r3
 8000db2:	2101      	movs	r1, #1
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fe47 	bl	8000a48 <ConsoleReceiveParamInt16>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d114      	bne.n	8000dee <_ZL22ConsoleCommandSetAnglePKc+0x4a>
		{
			systemState.setAngle = (float)parameterInt;
 8000dc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <_ZL22ConsoleCommandSetAnglePKc+0x54>)
 8000dd2:	edc3 7a01 	vstr	s15, [r3, #4]
			ConsoleIoSendString("Set Angle updated to ");
 8000dd6:	4809      	ldr	r0, [pc, #36]	; (8000dfc <_ZL22ConsoleCommandSetAnglePKc+0x58>)
 8000dd8:	f000 f982 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <_ZL22ConsoleCommandSetAnglePKc+0x54>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fee9 	bl	8000bba <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <_ZL22ConsoleCommandSetAnglePKc+0x5c>)
 8000dea:	f000 f979 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200001e4 	.word	0x200001e4
 8000dfc:	0800675c 	.word	0x0800675c
 8000e00:	08006708 	.word	0x08006708

08000e04 <_ZL27ConsoleCommandGetCurrentPosPKc>:
static eCommandResult_T ConsoleCommandGetCurrentPos(const char buffer[])
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString("Current position = ");
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <_ZL27ConsoleCommandGetCurrentPosPKc+0x30>)
 8000e0e:	f000 f967 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
	ConsoleSendParamInt16((uint16_t)systemState.currentPos);
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <_ZL27ConsoleCommandGetCurrentPosPKc+0x34>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fece 	bl	8000bba <ConsoleSendParamInt16>
	ConsoleIoSendString(STR_ENDLINE);
 8000e1e:	4807      	ldr	r0, [pc, #28]	; (8000e3c <_ZL27ConsoleCommandGetCurrentPosPKc+0x38>)
 8000e20:	f000 f95e 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>

	eCommandResult_T result = COMMAND_SUCCESS;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
	return result;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08006774 	.word	0x08006774
 8000e38:	200001e4 	.word	0x200001e4
 8000e3c:	08006708 	.word	0x08006708

08000e40 <_ZL21ConsoleCommandSetModePKc>:

static eCommandResult_T ConsoleCommandSetMode(const char buffer[])
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	2101      	movs	r1, #1
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fdf9 	bl	8000a48 <ConsoleReceiveParamInt16>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d110      	bne.n	8000e82 <_ZL21ConsoleCommandSetModePKc+0x42>
		{
			systemState.mode = (uint32_t)parameterInt;
 8000e60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <_ZL21ConsoleCommandSetModePKc+0x4c>)
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38
			ConsoleIoSendString("Mode updated to ");
 8000e6a:	4809      	ldr	r0, [pc, #36]	; (8000e90 <_ZL21ConsoleCommandSetModePKc+0x50>)
 8000e6c:	f000 f938 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.mode);
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <_ZL21ConsoleCommandSetModePKc+0x4c>)
 8000e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fe9f 	bl	8000bba <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <_ZL21ConsoleCommandSetModePKc+0x54>)
 8000e7e:	f000 f92f 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200001e4 	.word	0x200001e4
 8000e90:	08006788 	.word	0x08006788
 8000e94:	08006708 	.word	0x08006708

08000e98 <_ZL19ConsoleCommandSetKpPKc>:

static eCommandResult_T ConsoleCommandSetKp(const char buffer[])
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fdcd 	bl	8000a48 <ConsoleReceiveParamInt16>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d11f      	bne.n	8000ef8 <_ZL19ConsoleCommandSetKpPKc+0x60>
		{
			PID.kp = ((uint32_t)parameterInt / 100);
 8000eb8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <_ZL19ConsoleCommandSetKpPKc+0x6c>)
 8000ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ec4:	095b      	lsrs	r3, r3, #5
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <_ZL19ConsoleCommandSetKpPKc+0x70>)
 8000ed0:	edc3 7a05 	vstr	s15, [r3, #20]
			ConsoleIoSendString("Kp updated to ");
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <_ZL19ConsoleCommandSetKpPKc+0x74>)
 8000ed6:	f000 f903 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.kp);
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <_ZL19ConsoleCommandSetKpPKc+0x70>)
 8000edc:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ee4:	ee17 3a90 	vmov	r3, s15
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fe64 	bl	8000bba <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000ef2:	4807      	ldr	r0, [pc, #28]	; (8000f10 <_ZL19ConsoleCommandSetKpPKc+0x78>)
 8000ef4:	f000 f8f4 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	51eb851f 	.word	0x51eb851f
 8000f08:	2000022c 	.word	0x2000022c
 8000f0c:	0800679c 	.word	0x0800679c
 8000f10:	08006708 	.word	0x08006708

08000f14 <_ZL19ConsoleCommandSetKiPKc>:

static eCommandResult_T ConsoleCommandSetKi(const char buffer[])
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	461a      	mov	r2, r3
 8000f22:	2101      	movs	r1, #1
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fd8f 	bl	8000a48 <ConsoleReceiveParamInt16>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d11f      	bne.n	8000f74 <_ZL19ConsoleCommandSetKiPKc+0x60>
		{
			PID.ki = ((uint32_t)parameterInt / 100);
 8000f34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <_ZL19ConsoleCommandSetKiPKc+0x6c>)
 8000f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8000f40:	095b      	lsrs	r3, r3, #5
 8000f42:	ee07 3a90 	vmov	s15, r3
 8000f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <_ZL19ConsoleCommandSetKiPKc+0x70>)
 8000f4c:	edc3 7a06 	vstr	s15, [r3, #24]
			ConsoleIoSendString("Ki updated to ");
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <_ZL19ConsoleCommandSetKiPKc+0x74>)
 8000f52:	f000 f8c5 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.ki);
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <_ZL19ConsoleCommandSetKiPKc+0x70>)
 8000f58:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f60:	ee17 3a90 	vmov	r3, s15
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fe26 	bl	8000bba <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <_ZL19ConsoleCommandSetKiPKc+0x78>)
 8000f70:	f000 f8b6 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	51eb851f 	.word	0x51eb851f
 8000f84:	2000022c 	.word	0x2000022c
 8000f88:	080067ac 	.word	0x080067ac
 8000f8c:	08006708 	.word	0x08006708

08000f90 <_ZL19ConsoleCommandSetKdPKc>:

static eCommandResult_T ConsoleCommandSetKd(const char buffer[])
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff fd51 	bl	8000a48 <ConsoleReceiveParamInt16>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d11f      	bne.n	8000ff0 <_ZL19ConsoleCommandSetKdPKc+0x60>
		{
			PID.kd = ((uint32_t)parameterInt/100);
 8000fb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_ZL19ConsoleCommandSetKdPKc+0x6c>)
 8000fb8:	fba3 2302 	umull	r2, r3, r3, r2
 8000fbc:	095b      	lsrs	r3, r3, #5
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <_ZL19ConsoleCommandSetKdPKc+0x70>)
 8000fc8:	edc3 7a07 	vstr	s15, [r3, #28]
			ConsoleIoSendString("Kd updated to ");
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <_ZL19ConsoleCommandSetKdPKc+0x74>)
 8000fce:	f000 f887 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.kd);
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <_ZL19ConsoleCommandSetKdPKc+0x70>)
 8000fd4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fdc:	ee17 3a90 	vmov	r3, s15
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fde8 	bl	8000bba <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <_ZL19ConsoleCommandSetKdPKc+0x78>)
 8000fec:	f000 f878 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	51eb851f 	.word	0x51eb851f
 8001000:	2000022c 	.word	0x2000022c
 8001004:	080067bc 	.word	0x080067bc
 8001008:	08006708 	.word	0x08006708

0800100c <_ZL17ConsoleCommandVerPKc>:


static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <_ZL17ConsoleCommandVerPKc+0x24>)
 800101a:	f000 f861 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(STR_ENDLINE);
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <_ZL17ConsoleCommandVerPKc+0x28>)
 8001020:	f000 f85e 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
	return result;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	080067cc 	.word	0x080067cc
 8001034:	08006708 	.word	0x08006708

08001038 <_Z23ConsoleCommandsGetTablev>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 800103c:	4b02      	ldr	r3, [pc, #8]	; (8001048 <_Z23ConsoleCommandsGetTablev+0x10>)
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	08006838 	.word	0x08006838

0800104c <_Z13ConsoleIoInitv>:
#include <global.h>

UART_HandleTypeDef huart1;

eConsoleError ConsoleIoInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	    huart1.Instance = USART1;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <_Z13ConsoleIoInitv+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <_Z13ConsoleIoInitv+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_Z13ConsoleIoInitv+0x58>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_Z13ConsoleIoInitv+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <_Z13ConsoleIoInitv+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <_Z13ConsoleIoInitv+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <_Z13ConsoleIoInitv+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <_Z13ConsoleIoInitv+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <_Z13ConsoleIoInitv+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart1) != HAL_OK)
 8001082:	4808      	ldr	r0, [pc, #32]	; (80010a4 <_Z13ConsoleIoInitv+0x58>)
 8001084:	f004 fd90 	bl	8005ba8 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	bf14      	ite	ne
 800108e:	2301      	movne	r3, #1
 8001090:	2300      	moveq	r3, #0
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <_Z13ConsoleIoInitv+0x50>
		{
		  Error_Handler();
 8001098:	f000 fd4e 	bl	8001b38 <Error_Handler>
		}


	return CONSOLE_SUCCESS;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000194 	.word	0x20000194
 80010a8:	40011000 	.word	0x40011000

080010ac <_Z16ConsoleIoReceivePhmPm>:
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]


	HAL_UART_Receive(&huart1, (uint8_t *)buffer, bufferLength, 100);
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	68f9      	ldr	r1, [r7, #12]
 80010c0:	4806      	ldr	r0, [pc, #24]	; (80010dc <_Z16ConsoleIoReceivePhmPm+0x30>)
 80010c2:	f004 fe50 	bl	8005d66 <HAL_UART_Receive>
	*readLength = strlen((const char*)buffer);
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff f890 	bl	80001ec <strlen>
 80010cc:	4602      	mov	r2, r0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]

	return CONSOLE_SUCCESS;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000194 	.word	0x20000194

080010e0 <_Z19ConsoleIoSendStringPKc>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer) , 10);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff f87f 	bl	80001ec <strlen>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	230a      	movs	r3, #10
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <_Z19ConsoleIoSendStringPKc+0x28>)
 80010f8:	f004 fda3 	bl	8005c42 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000194 	.word	0x20000194

0800110c <_ZN7encoder4initEv>:
#include <main.h>
#include <global.h>
#include <stdint.h>

void encoder::init()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	//SPI
	hspi1.Instance = SPI1;
 8001112:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 8001114:	4a34      	ldr	r2, [pc, #208]	; (80011e8 <_ZN7encoder4initEv+0xdc>)
 8001116:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001118:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 800111a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800111e:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001120:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 8001128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800112c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 8001136:	2201      	movs	r2, #1
 8001138:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 800113c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001140:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 8001144:	2200      	movs	r2, #0
 8001146:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 8001156:	2200      	movs	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 800115c:	220a      	movs	r2, #10
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001160:	4820      	ldr	r0, [pc, #128]	; (80011e4 <_ZN7encoder4initEv+0xd8>)
 8001162:	f003 f8df 	bl	8004324 <HAL_SPI_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	bf14      	ite	ne
 800116c:	2301      	movne	r3, #1
 800116e:	2300      	moveq	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <_ZN7encoder4initEv+0x6e>
	{
	  Error_Handler();
 8001176:	f000 f905 	bl	8001384 <_ZN7encoder13Error_HandlerEv>
	}

	//CS pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2110      	movs	r1, #16
 800117e:	481b      	ldr	r0, [pc, #108]	; (80011ec <_ZN7encoder4initEv+0xe0>)
 8001180:	f002 fbf6 	bl	8003970 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <_ZN7encoder4initEv+0xe4>)
 8001186:	2210      	movs	r2, #16
 8001188:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <_ZN7encoder4initEv+0xe4>)
 800118c:	2201      	movs	r2, #1
 800118e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <_ZN7encoder4initEv+0xe4>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <_ZN7encoder4initEv+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	4914      	ldr	r1, [pc, #80]	; (80011f0 <_ZN7encoder4initEv+0xe4>)
 800119e:	4813      	ldr	r0, [pc, #76]	; (80011ec <_ZN7encoder4initEv+0xe0>)
 80011a0:	f002 fa22 	bl	80035e8 <HAL_GPIO_Init>

	//set CS high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2110      	movs	r1, #16
 80011a8:	4810      	ldr	r0, [pc, #64]	; (80011ec <_ZN7encoder4initEv+0xe0>)
 80011aa:	f002 fbe1 	bl	8003970 <HAL_GPIO_WritePin>

	uint16_t readBit = 0x8000;
 80011ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011b2:	80fb      	strh	r3, [r7, #6]
	uint16_t readAngleAddress = 0x3fff;
 80011b4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80011b8:	80bb      	strh	r3, [r7, #4]
	readCommand = (readBit | readAngleAddress);
 80011ba:	88fa      	ldrh	r2, [r7, #6]
 80011bc:	88bb      	ldrh	r3, [r7, #4]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <_ZN7encoder4initEv+0xe8>)
 80011c4:	801a      	strh	r2, [r3, #0]
	dummyCommand = 0x0;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <_ZN7encoder4initEv+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]

	valueMask = 0x3fff;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <_ZN7encoder4initEv+0xf0>)
 80011ce:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80011d2:	801a      	strh	r2, [r3, #0]
	value = 0;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <_ZN7encoder4initEv+0xf4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	801a      	strh	r2, [r3, #0]

}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000280 	.word	0x20000280
 80011e8:	40013000 	.word	0x40013000
 80011ec:	40020000 	.word	0x40020000
 80011f0:	200003b0 	.word	0x200003b0
 80011f4:	200001d8 	.word	0x200001d8
 80011f8:	200001da 	.word	0x200001da
 80011fc:	200001e2 	.word	0x200001e2
 8001200:	200001e0 	.word	0x200001e0

08001204 <_ZN7encoder6getRawEv>:

uint32_t encoder::getRaw()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
	//Setup commands
	uint16_t test = 0xffff;
 800120a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120e:	807b      	strh	r3, [r7, #2]
	uint16_t test2 = 0xAAAA;
 8001210:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8001214:	80fb      	strh	r3, [r7, #6]
	uint16_t readValue = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	80bb      	strh	r3, [r7, #4]
	uint8_t spi_buf[2];

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)0);
 800121a:	2200      	movs	r2, #0
 800121c:	2110      	movs	r1, #16
 800121e:	4822      	ldr	r0, [pc, #136]	; (80012a8 <_ZN7encoder6getRawEv+0xa4>)
 8001220:	f002 fba6 	bl	8003970 <HAL_GPIO_WritePin>
	sendBuffer = &test;
 8001224:	4a21      	ldr	r2, [pc, #132]	; (80012ac <_ZN7encoder6getRawEv+0xa8>)
 8001226:	1cbb      	adds	r3, r7, #2
 8001228:	6013      	str	r3, [r2, #0]
	//HAL_SPI_Transmit(&hspi1, (uint8_t*)sendBuffer, 1, 1);
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)sendBuffer,spi_buf, 1, 100);
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <_ZN7encoder6getRawEv+0xa8>)
 800122c:	6819      	ldr	r1, [r3, #0]
 800122e:	463a      	mov	r2, r7
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	481e      	ldr	r0, [pc, #120]	; (80012b0 <_ZN7encoder6getRawEv+0xac>)
 8001238:	f003 f8fd 	bl	8004436 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 800123c:	2201      	movs	r2, #1
 800123e:	2110      	movs	r1, #16
 8001240:	4819      	ldr	r0, [pc, #100]	; (80012a8 <_ZN7encoder6getRawEv+0xa4>)
 8001242:	f002 fb95 	bl	8003970 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)0);
 8001246:	2200      	movs	r2, #0
 8001248:	2110      	movs	r1, #16
 800124a:	4817      	ldr	r0, [pc, #92]	; (80012a8 <_ZN7encoder6getRawEv+0xa4>)
 800124c:	f002 fb90 	bl	8003970 <HAL_GPIO_WritePin>
	sendBuffer = &test;
 8001250:	4a16      	ldr	r2, [pc, #88]	; (80012ac <_ZN7encoder6getRawEv+0xa8>)
 8001252:	1cbb      	adds	r3, r7, #2
 8001254:	6013      	str	r3, [r2, #0]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)sendBuffer,spi_buf, 1, 100);
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <_ZN7encoder6getRawEv+0xa8>)
 8001258:	6819      	ldr	r1, [r3, #0]
 800125a:	463a      	mov	r2, r7
 800125c:	2364      	movs	r3, #100	; 0x64
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	4813      	ldr	r0, [pc, #76]	; (80012b0 <_ZN7encoder6getRawEv+0xac>)
 8001264:	f003 f8e7 	bl	8004436 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (GPIO_PinState)1);
 8001268:	2201      	movs	r2, #1
 800126a:	2110      	movs	r1, #16
 800126c:	480e      	ldr	r0, [pc, #56]	; (80012a8 <_ZN7encoder6getRawEv+0xa4>)
 800126e:	f002 fb7f 	bl	8003970 <HAL_GPIO_WritePin>


	readValue = spi_buf[0] | (spi_buf[1] << 8);
 8001272:	783b      	ldrb	r3, [r7, #0]
 8001274:	b21a      	sxth	r2, r3
 8001276:	787b      	ldrb	r3, [r7, #1]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b21b      	sxth	r3, r3
 8001280:	80bb      	strh	r3, [r7, #4]
	value = readValue & valueMask;
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <_ZN7encoder6getRawEv+0xb0>)
 8001284:	881a      	ldrh	r2, [r3, #0]
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	4013      	ands	r3, r2
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <_ZN7encoder6getRawEv+0xb4>)
 800128e:	801a      	strh	r2, [r3, #0]
	systemState.currentPos = (uint32_t)value;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <_ZN7encoder6getRawEv+0xb4>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <_ZN7encoder6getRawEv+0xb8>)
 8001298:	609a      	str	r2, [r3, #8]
	return (uint32_t)value;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <_ZN7encoder6getRawEv+0xb4>)
 800129c:	881b      	ldrh	r3, [r3, #0]

}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020000 	.word	0x40020000
 80012ac:	200001dc 	.word	0x200001dc
 80012b0:	20000280 	.word	0x20000280
 80012b4:	200001e2 	.word	0x200001e2
 80012b8:	200001e0 	.word	0x200001e0
 80012bc:	200001e4 	.word	0x200001e4

080012c0 <_ZN7encoder8getAngleEv>:

float encoder::getAngle(){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	int32_t adjustedPosSum = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
	int32_t adjustedPos = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
	uint32_t encoderMax = 16384;
 80012d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012d4:	613b      	str	r3, [r7, #16]
	float encoderScaler = 0.0219;
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <_ZN7encoder8getAngleEv+0xb8>)
 80012d8:	60fb      	str	r3, [r7, #12]
	float angle = 0;
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i<systemState.noSamples; i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <_ZN7encoder8getAngleEv+0xbc>)
 80012e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d927      	bls.n	800133e <_ZN7encoder8getAngleEv+0x7e>
	{
		this->getRaw();
 80012ee:	f7ff ff89 	bl	8001204 <_ZN7encoder6getRawEv>
		if((systemState.currentPos - systemState.zeroRaw) > 0){
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <_ZN7encoder8getAngleEv+0xbc>)
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <_ZN7encoder8getAngleEv+0xbc>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dd08      	ble.n	8001312 <_ZN7encoder8getAngleEv+0x52>
			adjustedPosSum += systemState.currentPos - systemState.zeroRaw;
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <_ZN7encoder8getAngleEv+0xbc>)
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <_ZN7encoder8getAngleEv+0xbc>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	4413      	add	r3, r2
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	e011      	b.n	8001336 <_ZN7encoder8getAngleEv+0x76>
		}
		else if((systemState.currentPos - systemState.zeroRaw) < 0){
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <_ZN7encoder8getAngleEv+0xbc>)
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <_ZN7encoder8getAngleEv+0xbc>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	da0a      	bge.n	8001336 <_ZN7encoder8getAngleEv+0x76>
			adjustedPosSum += (encoderMax - systemState.zeroRaw) + systemState.currentPos;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <_ZN7encoder8getAngleEv+0xbc>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	461a      	mov	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <_ZN7encoder8getAngleEv+0xbc>)
 800132c:	6892      	ldr	r2, [r2, #8]
 800132e:	441a      	add	r2, r3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	4413      	add	r3, r2
 8001334:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i<systemState.noSamples; i++)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	3301      	adds	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	e7d2      	b.n	80012e4 <_ZN7encoder8getAngleEv+0x24>
		}
	}
	adjustedPos = adjustedPosSum / systemState.noSamples;
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN7encoder8getAngleEv+0xbc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	fbb2 f3f3 	udiv	r3, r2, r3
 8001348:	617b      	str	r3, [r7, #20]
	angle = 360 - ((float)adjustedPos * encoderScaler);
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001354:	edd7 7a03 	vldr	s15, [r7, #12]
 8001358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001380 <_ZN7encoder8getAngleEv+0xc0>
 8001360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001364:	edc7 7a02 	vstr	s15, [r7, #8]
	return angle;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	ee07 3a90 	vmov	s15, r3

}
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	3cb367a1 	.word	0x3cb367a1
 800137c:	200001e4 	.word	0x200001e4
 8001380:	43b40000 	.word	0x43b40000

08001384 <_ZN7encoder13Error_HandlerEv>:

void encoder::Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
}
 800138a:	bf00      	nop
  __disable_irq();
  while (1)
 800138c:	e7fe      	b.n	800138c <_ZN7encoder13Error_HandlerEv+0x8>
	...

08001390 <_ZN3led4initEv>:
#include <led.h>
#include <io_mapping.h>
#include <processor.h>
#include <main.h>

void led::init(){
 8001390:	b580      	push	{r7, lr}
 8001392:	b0a8      	sub	sp, #160	; 0xa0
 8001394:	af00      	add	r7, sp, #0
	  TIM_HandleTypeDef htim1;

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2220      	movs	r2, #32
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f005 f87f 	bl	80064cc <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 80013ce:	4b6b      	ldr	r3, [pc, #428]	; (800157c <_ZN3led4initEv+0x1ec>)
 80013d0:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Prescaler = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	2300      	movs	r3, #0
 80013d8:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.Period = 65535;
 80013da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013de:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	66bb      	str	r3, [r7, #104]	; 0x68
	  htim1.Init.RepetitionCounter = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	66fb      	str	r3, [r7, #108]	; 0x6c
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	673b      	str	r3, [r7, #112]	; 0x70
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fa8d 	bl	8004910 <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf14      	ite	ne
 80013fc:	2301      	movne	r3, #1
 80013fe:	2300      	moveq	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <_ZN3led4initEv+0x7a>
	  {
	    Error_Handler();
 8001406:	f000 f8fb 	bl	8001600 <_ZN3led13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001410:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001414:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f003 fee2 	bl	80051e4 <HAL_TIM_ConfigClockSource>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	bf14      	ite	ne
 8001426:	2301      	movne	r3, #1
 8001428:	2300      	moveq	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <_ZN3led4initEv+0xa4>
	  {
	    Error_Handler();
 8001430:	f000 f8e6 	bl	8001600 <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001434:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fbe8 	bl	8004c0e <HAL_TIM_PWM_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf14      	ite	ne
 8001444:	2301      	movne	r3, #1
 8001446:	2300      	moveq	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <_ZN3led4initEv+0xc2>
	  {
	    Error_Handler();
 800144e:	f000 f8d7 	bl	8001600 <_ZN3led13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	643b      	str	r3, [r7, #64]	; 0x40
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800145a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800145e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f004 fabd 	bl	80059e4 <HAL_TIMEx_MasterConfigSynchronization>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <_ZN3led4initEv+0xee>
	  {
	    Error_Handler();
 800147a:	f000 f8c1 	bl	8001600 <_ZN3led13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147e:	2360      	movs	r3, #96	; 0x60
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
	  sConfigOC.Pulse = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001486:	2300      	movs	r3, #0
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800148a:	2300      	movs	r3, #0
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800149a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800149e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014a2:	2200      	movs	r2, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fddb 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf14      	ite	ne
 80014b0:	2301      	movne	r3, #1
 80014b2:	2300      	moveq	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <_ZN3led4initEv+0x12e>
	  {
	    Error_Handler();
 80014ba:	f000 f8a1 	bl	8001600 <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014be:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80014c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014c6:	2204      	movs	r2, #4
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fdc9 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <_ZN3led4initEv+0x152>
	  {
	    Error_Handler();
 80014de:	f000 f88f 	bl	8001600 <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014e2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80014e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ea:	2208      	movs	r2, #8
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 fdb7 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <_ZN3led4initEv+0x176>
	  {
	    Error_Handler();
 8001502:	f000 f87d 	bl	8001600 <_ZN3led13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800151a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151e:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001524:	1d3a      	adds	r2, r7, #4
 8001526:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f004 fad5 	bl	8005adc <HAL_TIMEx_ConfigBreakDeadTime>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf14      	ite	ne
 8001538:	2301      	movne	r3, #1
 800153a:	2300      	moveq	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <_ZN3led4initEv+0x1b6>
	  {
	    Error_Handler();
 8001542:	f000 f85d 	bl	8001600 <_ZN3led13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 8001546:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800154a:	4618      	mov	r0, r3
 800154c:	f000 feba 	bl	80022c4 <HAL_TIM_MspPostInit>

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001550:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fbb2 	bl	8004cc0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800155c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001560:	2104      	movs	r1, #4
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fbac 	bl	8004cc0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001568:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800156c:	2108      	movs	r1, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fba6 	bl	8004cc0 <HAL_TIM_PWM_Start>
}
 8001574:	bf00      	nop
 8001576:	37a0      	adds	r7, #160	; 0xa0
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40010000 	.word	0x40010000

08001580 <_ZN3led6SetRGBEiii>:

void led::SetRGB(int red, int green, int blue){
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
	int32_t max = 65535;
 800158c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001590:	617b      	str	r3, [r7, #20]
	int32_t min = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]

	if(red > max){red = max;};
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	429a      	cmp	r2, r3
 800159c:	dd01      	ble.n	80015a2 <_ZN3led6SetRGBEiii+0x22>
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	60fb      	str	r3, [r7, #12]
	if(green > max){green = max;};
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dd01      	ble.n	80015ae <_ZN3led6SetRGBEiii+0x2e>
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	60bb      	str	r3, [r7, #8]
	if(blue > max){blue = max;};
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dd01      	ble.n	80015ba <_ZN3led6SetRGBEiii+0x3a>
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	607b      	str	r3, [r7, #4]

	if(red < min){red = min;};
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	429a      	cmp	r2, r3
 80015c0:	da01      	bge.n	80015c6 <_ZN3led6SetRGBEiii+0x46>
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	60fb      	str	r3, [r7, #12]
	if(green < min){green = min;};
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	da01      	bge.n	80015d2 <_ZN3led6SetRGBEiii+0x52>
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	60bb      	str	r3, [r7, #8]
	if(blue < min){blue = min;};
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	da01      	bge.n	80015de <_ZN3led6SetRGBEiii+0x5e>
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	607b      	str	r3, [r7, #4]

	TIM1->CCR1 = (int32_t)red;
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <_ZN3led6SetRGBEiii+0x7c>)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = (int32_t)green;
 80015e4:	4a05      	ldr	r2, [pc, #20]	; (80015fc <_ZN3led6SetRGBEiii+0x7c>)
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = (int32_t)blue;
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <_ZN3led6SetRGBEiii+0x7c>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	63d3      	str	r3, [r2, #60]	; 0x3c

}
 80015f0:	bf00      	nop
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40010000 	.word	0x40010000

08001600 <_ZN3led13Error_HandlerEv>:

void led::Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  __disable_irq();
  while (1)
 8001608:	e7fe      	b.n	8001608 <_ZN3led13Error_HandlerEv+0x8>
	...

0800160c <main>:
uint32_t              TxMailbox;

int timer_val = 0;

int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
  //Initialize the various parts of the system (each is encapsulated in its own c++ class with the exception of globals above)
  Machine::init();
 8001612:	f000 ff31 	bl	8002478 <_ZN7Machine4initEv>

  led led1;
  led1.init();
 8001616:	f7ff febb 	bl	8001390 <_ZN3led4initEv>
  led *led1ptr;
  led1ptr = &led1;
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	61fb      	str	r3, [r7, #28]
  //led::init();
  //motor::init();
  //encoder::init();

  motor motor1;
  motor1.init();
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fa8d 	bl	8001b44 <_ZN5motor4initEv>
  motor *motor1ptr;
  motor1ptr = &motor1;
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	61bb      	str	r3, [r7, #24]

  encoder encoder1;
  encoder1.init();
 8001630:	f7ff fd6c 	bl	800110c <_ZN7encoder4initEv>
  encoder *encoder1ptr;
  encoder1ptr = &encoder1;
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	617b      	str	r3, [r7, #20]

  canBus canBus1;
  canBus1.init();
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff5f 	bl	8000500 <_ZN6canBus4initEv>
  canBus1.transmitHeaderConfig();
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ffb7 	bl	80005b8 <_ZN6canBus20transmitHeaderConfigEv>
  canBus1.filterConfig();
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff f801 	bl	8000654 <_ZN6canBus12filterConfigEv>
  canBus1.turnOn();
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff93 	bl	8000580 <_ZN6canBus6turnOnEv>


  systemState.setpoint = 100;
 800165a:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <main+0x1e4>)
 800165c:	2264      	movs	r2, #100	; 0x64
 800165e:	601a      	str	r2, [r3, #0]
  systemState.setAngle = 45;
 8001660:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <main+0x1e4>)
 8001662:	4a64      	ldr	r2, [pc, #400]	; (80017f4 <main+0x1e8>)
 8001664:	605a      	str	r2, [r3, #4]
  systemState.currentPos = 0;
 8001666:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <main+0x1e4>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  systemState.LEDRed = 0;
 800166c:	4b60      	ldr	r3, [pc, #384]	; (80017f0 <main+0x1e4>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  systemState.LEDGreen = 0;
 8001672:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <main+0x1e4>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  systemState.LEDBlue = 0;
 8001678:	4b5d      	ldr	r3, [pc, #372]	; (80017f0 <main+0x1e4>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  systemState.currentSpeed = 0;
 800167e:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <main+0x1e4>)
 8001680:	2200      	movs	r2, #0
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
  systemState.motorOnOff = 0;
 8001684:	4b5a      	ldr	r3, [pc, #360]	; (80017f0 <main+0x1e4>)
 8001686:	2200      	movs	r2, #0
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
  systemState.mode = 0;
 800168a:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <main+0x1e4>)
 800168c:	2200      	movs	r2, #0
 800168e:	639a      	str	r2, [r3, #56]	; 0x38
  systemState.zeroRaw = -1;
 8001690:	4b57      	ldr	r3, [pc, #348]	; (80017f0 <main+0x1e4>)
 8001692:	f04f 32ff 	mov.w	r2, #4294967295
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
  systemState.currentMode = 0;
 8001698:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <main+0x1e4>)
 800169a:	2200      	movs	r2, #0
 800169c:	63da      	str	r2, [r3, #60]	; 0x3c
  systemState.noSamples = 10;
 800169e:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <main+0x1e4>)
 80016a0:	220a      	movs	r2, #10
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40
  systemState.backOffSteps = 10;
 80016a4:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <main+0x1e4>)
 80016a6:	220a      	movs	r2, #10
 80016a8:	645a      	str	r2, [r3, #68]	; 0x44

  PID.lastTime = 0;
 80016aa:	4b53      	ldr	r3, [pc, #332]	; (80017f8 <main+0x1ec>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
  PID.loopTime = 100;
 80016b0:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <main+0x1ec>)
 80016b2:	2264      	movs	r2, #100	; 0x64
 80016b4:	605a      	str	r2, [r3, #4]
  PID.angleErrorSum = 0;
 80016b6:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <main+0x1ec>)
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  PID.angleLastError = 0;
 80016be:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <main+0x1ec>)
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  PID.angleErrorDer = 0;
 80016c6:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <main+0x1ec>)
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  PID.kp = 1;
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <main+0x1ec>)
 80016d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80016d4:	615a      	str	r2, [r3, #20]
  PID.ki = 0.001;
 80016d6:	4b48      	ldr	r3, [pc, #288]	; (80017f8 <main+0x1ec>)
 80016d8:	4a48      	ldr	r2, [pc, #288]	; (80017fc <main+0x1f0>)
 80016da:	619a      	str	r2, [r3, #24]
  PID.kd = 0;
 80016dc:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <main+0x1ec>)
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	61da      	str	r2, [r3, #28]
  PID.minOut = -100;
 80016e4:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <main+0x1ec>)
 80016e6:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
  PID.maxOut = 100;
 80016ec:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <main+0x1ec>)
 80016ee:	2264      	movs	r2, #100	; 0x64
 80016f0:	621a      	str	r2, [r3, #32]
  PID.output = 0;
 80016f2:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <main+0x1ec>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28

  ConsoleInit();
 80016f8:	f7ff f882 	bl	8000800 <ConsoleInit>


  //timer_val = __HAL_TIM_GET_COUNTER(&htim14);
  while (1)
  {
	  switch(systemState.mode){
 80016fc:	4b3c      	ldr	r3, [pc, #240]	; (80017f0 <main+0x1e4>)
 80016fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001700:	2b02      	cmp	r3, #2
 8001702:	d061      	beq.n	80017c8 <main+0x1bc>
 8001704:	2b02      	cmp	r3, #2
 8001706:	d863      	bhi.n	80017d0 <main+0x1c4>
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <main+0x106>
 800170c:	2b01      	cmp	r3, #1
 800170e:	d00f      	beq.n	8001730 <main+0x124>
 8001710:	e05e      	b.n	80017d0 <main+0x1c4>
	  case 0:
		  	  if(systemState.mode == systemState.currentMode){
 8001712:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <main+0x1e4>)
 8001714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001716:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <main+0x1e4>)
 8001718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171a:	429a      	cmp	r2, r3
 800171c:	d05e      	beq.n	80017dc <main+0x1d0>
		  		  //Do nothing already in Off mode
		  	  }
		  	  else{
		  		  motor1.turnOffMotor();
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	4618      	mov	r0, r3
 8001724:	f000 fba8 	bl	8001e78 <_ZN5motor12turnOffMotorEv>
		  		  systemState.currentMode = 0;
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <main+0x1e4>)
 800172a:	2200      	movs	r2, #0
 800172c:	63da      	str	r2, [r3, #60]	; 0x3c
	  	  	  }
		  	  break;
 800172e:	e055      	b.n	80017dc <main+0x1d0>
	  case 1:
		  	  if(systemState.mode != systemState.currentMode){
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <main+0x1e4>)
 8001732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <main+0x1e4>)
 8001736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001738:	429a      	cmp	r2, r3
 800173a:	d014      	beq.n	8001766 <main+0x15a>
		  		  //Motor needs to be turned on
		  		  motor1.turnOnMotor();
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fb55 	bl	8001df0 <_ZN5motor11turnOnMotorEv>
		  		  if(systemState.zeroRaw < 0){
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <main+0x1e4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	2b00      	cmp	r3, #0
 800174c:	da08      	bge.n	8001760 <main+0x154>
		  			  motor1.zeroMotor(&encoder1, &led1);
 800174e:	f107 0210 	add.w	r2, r7, #16
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fc3e 	bl	8001fdc <_ZN5motor9zeroMotorEP7encoderP3led>
		  		  }
		  		  systemState.currentMode = 1;
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <main+0x1e4>)
 8001762:	2201      	movs	r2, #1
 8001764:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  }
		  	  //Code for control loop
		  	  controlLoop(&encoder1);
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f864 	bl	8001838 <_Z11controlLoopP7encoder>
		  	  motor1.setSpeed(PID.output);
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <main+0x1ec>)
 8001772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fba8 	bl	8001ed0 <_ZN5motor8setSpeedEi>
		  	  if(abs(PID.angleLastError) < 2)
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <main+0x1ec>)
 8001782:	edd3 7a03 	vldr	s15, [r3, #12]
 8001786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800178a:	ee17 3a90 	vmov	r3, s15
 800178e:	2b00      	cmp	r3, #0
 8001790:	bfb8      	it	lt
 8001792:	425b      	neglt	r3, r3
 8001794:	2b01      	cmp	r3, #1
 8001796:	dc06      	bgt.n	80017a6 <main+0x19a>
		  	  {
		  		  led1.SetRGB(0,65535,0);
 8001798:	2200      	movs	r2, #0
 800179a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff feee 	bl	8001580 <_ZN3led6SetRGBEiii>
 80017a4:	e005      	b.n	80017b2 <main+0x1a6>
		  	  }
		  	  else
		  	  {
		  		  led1.SetRGB(65535, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017ae:	f7ff fee7 	bl	8001580 <_ZN3led6SetRGBEiii>
		  	  }
		  	  uint8_t testData[2];
		  	  testData[0] = 1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	703b      	strb	r3, [r7, #0]
		  	  testData[1] = 2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	707b      	strb	r3, [r7, #1]
		  	  canBus1.transmit(2, &testData[0]);
 80017ba:	463a      	mov	r2, r7
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2102      	movs	r1, #2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe ff0f 	bl	80005e4 <_ZN6canBus8transmitEmPh>
		  	  break;
 80017c6:	e00a      	b.n	80017de <main+0x1d2>

	  case 2:
		  	  //code for speed mode
		  	  systemState.currentMode = 2;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <main+0x1e4>)
 80017ca:	2202      	movs	r2, #2
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  break;
 80017ce:	e006      	b.n	80017de <main+0x1d2>

	  default:
		  motor1.turnOffMotor();
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fb4f 	bl	8001e78 <_ZN5motor12turnOffMotorEv>
 80017da:	e000      	b.n	80017de <main+0x1d2>
		  	  break;
 80017dc:	bf00      	nop
	  //motor1.setSpeed(0);
	  //HAL_Delay(50000);
	  ///motor1.setSpeed(80);
	  //HAL_Delay(5000);

	  ConsoleProcess(&encoder1);
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f83a 	bl	800085c <ConsoleProcess>

	  encoder::getRaw();
 80017e8:	f7ff fd0c 	bl	8001204 <_ZN7encoder6getRawEv>
	  //ConsoleGet();

  }
 80017ec:	e786      	b.n	80016fc <main+0xf0>
 80017ee:	bf00      	nop
 80017f0:	200001e4 	.word	0x200001e4
 80017f4:	42340000 	.word	0x42340000
 80017f8:	2000022c 	.word	0x2000022c
 80017fc:	3a83126f 	.word	0x3a83126f

08001800 <HAL_TIM_PeriodElapsedCallback>:
}

//motor steping interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	if(htim == &htim14){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d10b      	bne.n	8001828 <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)1);  //STP
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001816:	4807      	ldr	r0, [pc, #28]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001818:	f002 f8aa 	bl	8003970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001822:	4804      	ldr	r0, [pc, #16]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001824:	f002 f8a4 	bl	8003970 <HAL_GPIO_WritePin>
	}

}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000320 	.word	0x20000320
 8001834:	40021000 	.word	0x40021000

08001838 <_Z11controlLoopP7encoder>:

  /* USER CODE END CAN1_RX0_IRQn 1 */
}

int32_t controlLoop(encoder *encoder)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	int32_t waiting = 1;
 8001840:	2301      	movs	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
	int32_t timeNow = (int32_t)__HAL_TIM_GET_COUNTER(&htim13);
 8001844:	4bb1      	ldr	r3, [pc, #708]	; (8001b0c <_Z11controlLoopP7encoder+0x2d4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	617b      	str	r3, [r7, #20]
	int32_t timeSinceLast = (int32_t)(timeNow - PID.lastTime);
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4bb0      	ldr	r3, [pc, #704]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	613b      	str	r3, [r7, #16]

		if(timeSinceLast > PID.loopTime)
 8001856:	4bae      	ldr	r3, [pc, #696]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	429a      	cmp	r2, r3
 800185e:	f080 8150 	bcs.w	8001b02 <_Z11controlLoopP7encoder+0x2ca>
		{
			//Calculate Errors
			float currentAngle = encoder->getAngle();
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fd2c 	bl	80012c0 <_ZN7encoder8getAngleEv>
 8001868:	ed87 0a03 	vstr	s0, [r7, #12]
			float angleError = systemState.setAngle - currentAngle;
 800186c:	4ba9      	ldr	r3, [pc, #676]	; (8001b14 <_Z11controlLoopP7encoder+0x2dc>)
 800186e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001872:	edd7 7a03 	vldr	s15, [r7, #12]
 8001876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187a:	edc7 7a02 	vstr	s15, [r7, #8]
			PID.angleErrorSum += (angleError * (timeSinceLast/1000));
 800187e:	4ba4      	ldr	r3, [pc, #656]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001880:	ed93 7a02 	vldr	s14, [r3, #8]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4aa4      	ldr	r2, [pc, #656]	; (8001b18 <_Z11controlLoopP7encoder+0x2e0>)
 8001888:	fb82 1203 	smull	r1, r2, r2, r3
 800188c:	1192      	asrs	r2, r2, #6
 800188e:	17db      	asrs	r3, r3, #31
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800189a:	edd7 7a02 	vldr	s15, [r7, #8]
 800189e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a6:	4b9a      	ldr	r3, [pc, #616]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 80018a8:	edc3 7a02 	vstr	s15, [r3, #8]
			PID.angleErrorDer = (angleError - PID.angleLastError)/(timeSinceLast/1000);
 80018ac:	4b98      	ldr	r3, [pc, #608]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 80018ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80018b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80018b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4a96      	ldr	r2, [pc, #600]	; (8001b18 <_Z11controlLoopP7encoder+0x2e0>)
 80018be:	fb82 1203 	smull	r1, r2, r2, r3
 80018c2:	1192      	asrs	r2, r2, #6
 80018c4:	17db      	asrs	r3, r3, #31
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d4:	4b8e      	ldr	r3, [pc, #568]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 80018d6:	edc3 7a04 	vstr	s15, [r3, #16]

			//Compute PID output
			float prop = PID.kp * angleError;
 80018da:	4b8d      	ldr	r3, [pc, #564]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 80018dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80018e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80018e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			float integral = PID.ki * PID.angleErrorSum;
 80018ec:	4b88      	ldr	r3, [pc, #544]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 80018ee:	ed93 7a06 	vldr	s14, [r3, #24]
 80018f2:	4b87      	ldr	r3, [pc, #540]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 80018f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	edc7 7a08 	vstr	s15, [r7, #32]
			float derivitive = PID.kd * PID.angleErrorDer;
 8001900:	4b83      	ldr	r3, [pc, #524]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001902:	ed93 7a07 	vldr	s14, [r3, #28]
 8001906:	4b82      	ldr	r3, [pc, #520]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001908:	edd3 7a04 	vldr	s15, [r3, #16]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	edc7 7a07 	vstr	s15, [r7, #28]

			//Limit Outputs if necessary
			if(prop < PID.minOut){prop = PID.minOut;}
 8001914:	4b7e      	ldr	r3, [pc, #504]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001920:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	d507      	bpl.n	800193e <_Z11controlLoopP7encoder+0x106>
 800192e:	4b78      	ldr	r3, [pc, #480]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			if(prop > PID.maxOut){prop = PID.maxOut;}
 800193e:	4b74      	ldr	r3, [pc, #464]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800194e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001956:	dd07      	ble.n	8001968 <_Z11controlLoopP7encoder+0x130>
 8001958:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001964:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			if(integral < PID.minOut){integral = PID.minOut;}
 8001968:	4b69      	ldr	r3, [pc, #420]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001974:	ed97 7a08 	vldr	s14, [r7, #32]
 8001978:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001980:	d507      	bpl.n	8001992 <_Z11controlLoopP7encoder+0x15a>
 8001982:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198e:	edc7 7a08 	vstr	s15, [r7, #32]
			if(integral > PID.maxOut){integral = PID.maxOut;}
 8001992:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199e:	ed97 7a08 	vldr	s14, [r7, #32]
 80019a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	dd07      	ble.n	80019bc <_Z11controlLoopP7encoder+0x184>
 80019ac:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b8:	edc7 7a08 	vstr	s15, [r7, #32]
			if(derivitive < PID.minOut){derivitive = PID.minOut;}
 80019bc:	4b54      	ldr	r3, [pc, #336]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80019cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d507      	bpl.n	80019e6 <_Z11controlLoopP7encoder+0x1ae>
 80019d6:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e2:	edc7 7a07 	vstr	s15, [r7, #28]
			if(derivitive > PID.maxOut){derivitive = PID.maxOut;}
 80019e6:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80019f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	dd07      	ble.n	8001a10 <_Z11controlLoopP7encoder+0x1d8>
 8001a00:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0c:	edc7 7a07 	vstr	s15, [r7, #28]


			//Final output calc
			PID.output = (int32_t)(prop + integral + derivitive);
 8001a10:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a14:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a28:	ee17 2a90 	vmov	r2, s15
 8001a2c:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28

			//update old variables
			PID.angleLastError = angleError;
 8001a30:	4a37      	ldr	r2, [pc, #220]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	60d3      	str	r3, [r2, #12]
			PID.lastTime = timeNow;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	4a35      	ldr	r2, [pc, #212]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001a3a:	6013      	str	r3, [r2, #0]

			ConsoleIoSendString("Set Angle = ");
 8001a3c:	4837      	ldr	r0, [pc, #220]	; (8001b1c <_Z11controlLoopP7encoder+0x2e4>)
 8001a3e:	f7ff fb4f 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.setAngle);
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <_Z11controlLoopP7encoder+0x2dc>)
 8001a44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a4c:	ee17 3a90 	vmov	r3, s15
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f8b0 	bl	8000bba <ConsoleSendParamInt16>
			ConsoleIoSendString(" Current Angle = ");
 8001a5a:	4831      	ldr	r0, [pc, #196]	; (8001b20 <_Z11controlLoopP7encoder+0x2e8>)
 8001a5c:	f7ff fb40 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)currentAngle);
 8001a60:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a68:	ee17 3a90 	vmov	r3, s15
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f8a2 	bl	8000bba <ConsoleSendParamInt16>
			ConsoleIoSendString(" Encoder Raw = ");
 8001a76:	482b      	ldr	r0, [pc, #172]	; (8001b24 <_Z11controlLoopP7encoder+0x2ec>)
 8001a78:	f7ff fb32 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.currentPos);
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <_Z11controlLoopP7encoder+0x2dc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f899 	bl	8000bba <ConsoleSendParamInt16>
			ConsoleIoSendString(" Output = ");
 8001a88:	4827      	ldr	r0, [pc, #156]	; (8001b28 <_Z11controlLoopP7encoder+0x2f0>)
 8001a8a:	f7ff fb29 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)PID.output);
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <_Z11controlLoopP7encoder+0x2d8>)
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff f890 	bl	8000bba <ConsoleSendParamInt16>
			ConsoleIoSendString(" Error = ");
 8001a9a:	4824      	ldr	r0, [pc, #144]	; (8001b2c <_Z11controlLoopP7encoder+0x2f4>)
 8001a9c:	f7ff fb20 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
			if(angleError > 0){ConsoleSendParamInt16((uint16_t)angleError);}
 8001aa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	dd0b      	ble.n	8001ac6 <_Z11controlLoopP7encoder+0x28e>
 8001aae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab6:	ee17 3a90 	vmov	r3, s15
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f87b 	bl	8000bba <ConsoleSendParamInt16>
 8001ac4:	e016      	b.n	8001af4 <_Z11controlLoopP7encoder+0x2bc>
			else if (angleError < 0){
 8001ac6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	d50f      	bpl.n	8001af4 <_Z11controlLoopP7encoder+0x2bc>
				ConsoleIoSendString("-");
 8001ad4:	4816      	ldr	r0, [pc, #88]	; (8001b30 <_Z11controlLoopP7encoder+0x2f8>)
 8001ad6:	f7ff fb03 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>
				ConsoleSendParamInt16((uint16_t)(angleError * -1));
 8001ada:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ade:	eef1 7a67 	vneg.f32	s15, s15
 8001ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae6:	ee17 3a90 	vmov	r3, s15
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f863 	bl	8000bba <ConsoleSendParamInt16>
			}
			ConsoleIoSendString(STR_ENDLINE);
 8001af4:	480f      	ldr	r0, [pc, #60]	; (8001b34 <_Z11controlLoopP7encoder+0x2fc>)
 8001af6:	f7ff faf3 	bl	80010e0 <_Z19ConsoleIoSendStringPKc>

			waiting = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
			return 1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <_Z11controlLoopP7encoder+0x2cc>
		}
		return 0;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200002d8 	.word	0x200002d8
 8001b10:	2000022c 	.word	0x2000022c
 8001b14:	200001e4 	.word	0x200001e4
 8001b18:	10624dd3 	.word	0x10624dd3
 8001b1c:	080067e4 	.word	0x080067e4
 8001b20:	080067f4 	.word	0x080067f4
 8001b24:	08006808 	.word	0x08006808
 8001b28:	08006818 	.word	0x08006818
 8001b2c:	08006824 	.word	0x08006824
 8001b30:	08006830 	.word	0x08006830
 8001b34:	08006834 	.word	0x08006834

08001b38 <Error_Handler>:

void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x8>
	...

08001b44 <_ZN5motor4initEv>:
#include <main.h>
#include <global.h>
#include <cstdlib>

void motor::init()
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]


	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b50:	4b9e      	ldr	r3, [pc, #632]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	4a9d      	ldr	r2, [pc, #628]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5c:	4b9b      	ldr	r3, [pc, #620]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	4b97      	ldr	r3, [pc, #604]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	4a96      	ldr	r2, [pc, #600]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6313      	str	r3, [r2, #48]	; 0x30
 8001b78:	4b94      	ldr	r3, [pc, #592]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	623b      	str	r3, [r7, #32]
 8001b82:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	4b90      	ldr	r3, [pc, #576]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4a8f      	ldr	r2, [pc, #572]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001b8e:	f043 0320 	orr.w	r3, r3, #32
 8001b92:	6313      	str	r3, [r2, #48]	; 0x30
 8001b94:	4b8d      	ldr	r3, [pc, #564]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
 8001ba4:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	4a88      	ldr	r2, [pc, #544]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb0:	4b86      	ldr	r3, [pc, #536]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a81      	ldr	r2, [pc, #516]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
 8001bcc:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	4b7b      	ldr	r3, [pc, #492]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a7a      	ldr	r2, [pc, #488]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	6313      	str	r3, [r2, #48]	; 0x30
 8001be8:	4b78      	ldr	r3, [pc, #480]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b74      	ldr	r3, [pc, #464]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	4a73      	ldr	r2, [pc, #460]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6313      	str	r3, [r2, #48]	; 0x30
 8001c04:	4b71      	ldr	r3, [pc, #452]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	4a6c      	ldr	r2, [pc, #432]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c20:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <_ZN5motor4initEv+0x288>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c32:	4867      	ldr	r0, [pc, #412]	; (8001dd0 <_ZN5motor4initEv+0x28c>)
 8001c34:	f001 fe9c 	bl	8003970 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8001c3e:	4865      	ldr	r0, [pc, #404]	; (8001dd4 <_ZN5motor4initEv+0x290>)
 8001c40:	f001 fe96 	bl	8003970 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8001c4a:	4863      	ldr	r0, [pc, #396]	; (8001dd8 <_ZN5motor4initEv+0x294>)
 8001c4c:	f001 fe90 	bl	8003970 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8001c56:	4861      	ldr	r0, [pc, #388]	; (8001ddc <_ZN5motor4initEv+0x298>)
 8001c58:	f001 fe8a 	bl	8003970 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001c62:	485f      	ldr	r0, [pc, #380]	; (8001de0 <_ZN5motor4initEv+0x29c>)
 8001c64:	f001 fe84 	bl	8003970 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PF12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c68:	4b5e      	ldr	r3, [pc, #376]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001c6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c6e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	4b5c      	ldr	r3, [pc, #368]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	4b5b      	ldr	r3, [pc, #364]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c82:	4958      	ldr	r1, [pc, #352]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001c84:	4852      	ldr	r0, [pc, #328]	; (8001dd0 <_ZN5motor4initEv+0x28c>)
 8001c86:	f001 fcaf 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE10 PE12 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8001c8a:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001c8c:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8001c90:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	4b54      	ldr	r3, [pc, #336]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	4b52      	ldr	r3, [pc, #328]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	4b51      	ldr	r3, [pc, #324]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca4:	494f      	ldr	r1, [pc, #316]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001ca6:	484b      	ldr	r0, [pc, #300]	; (8001dd4 <_ZN5motor4initEv+0x290>)
 8001ca8:	f001 fc9e 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB12 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8001cac:	4b4d      	ldr	r3, [pc, #308]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001cae:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8001cb2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb4:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	4b48      	ldr	r3, [pc, #288]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	4947      	ldr	r1, [pc, #284]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001cc8:	4843      	ldr	r0, [pc, #268]	; (8001dd8 <_ZN5motor4initEv+0x294>)
 8001cca:	f001 fc8d 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cce:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001cd0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cd4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001cd8:	2202      	movs	r2, #2
 8001cda:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001cea:	2209      	movs	r2, #9
 8001cec:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	493d      	ldr	r1, [pc, #244]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001cf0:	4839      	ldr	r0, [pc, #228]	; (8001dd8 <_ZN5motor4initEv+0x294>)
 8001cf2:	f001 fc79 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD10 PD12 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001cf8:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 8001cfc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d10:	4934      	ldr	r1, [pc, #208]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d12:	4832      	ldr	r0, [pc, #200]	; (8001ddc <_ZN5motor4initEv+0x298>)
 8001d14:	f001 fc68 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2c:	492d      	ldr	r1, [pc, #180]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d2e:	482b      	ldr	r0, [pc, #172]	; (8001ddc <_ZN5motor4initEv+0x298>)
 8001d30:	f001 fc5a 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG13 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d34:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d36:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001d3a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);\
 8001d4e:	4925      	ldr	r1, [pc, #148]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d50:	4823      	ldr	r0, [pc, #140]	; (8001de0 <_ZN5motor4initEv+0x29c>)
 8001d52:	f001 fc49 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d5c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d6a:	491e      	ldr	r1, [pc, #120]	; (8001de4 <_ZN5motor4initEv+0x2a0>)
 8001d6c:	481b      	ldr	r0, [pc, #108]	; (8001ddc <_ZN5motor4initEv+0x298>)
 8001d6e:	f001 fc3b 	bl	80035e8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2006      	movs	r0, #6
 8001d78:	f001 fbff 	bl	800357a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d7c:	2006      	movs	r0, #6
 8001d7e:	f001 fc18 	bl	80035b2 <HAL_NVIC_EnableIRQ>


	htim14.Instance = TIM14;
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <_ZN5motor4initEv+0x2a4>)
 8001d84:	4a19      	ldr	r2, [pc, #100]	; (8001dec <_ZN5motor4initEv+0x2a8>)
 8001d86:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 16000 -1;
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <_ZN5motor4initEv+0x2a4>)
 8001d8a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001d8e:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_ZN5motor4initEv+0x2a4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 100 - 1;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <_ZN5motor4initEv+0x2a4>)
 8001d98:	2263      	movs	r2, #99	; 0x63
 8001d9a:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <_ZN5motor4initEv+0x2a4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_ZN5motor4initEv+0x2a4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001da8:	480f      	ldr	r0, [pc, #60]	; (8001de8 <_ZN5motor4initEv+0x2a4>)
 8001daa:	f002 fdb1 	bl	8004910 <HAL_TIM_Base_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf14      	ite	ne
 8001db4:	2301      	movne	r3, #1
 8001db6:	2300      	moveq	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <_ZN5motor4initEv+0x27e>
	{
	  Error_Handler();
 8001dbe:	f000 f967 	bl	8002090 <_ZN5motor13Error_HandlerEv>
	}
	//HAL_TIM_Base_Start_IT(&htim14);
	//this->setSpeed(0);

}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	; 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40021400 	.word	0x40021400
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40021800 	.word	0x40021800
 8001de4:	200003b0 	.word	0x200003b0
 8001de8:	20000320 	.word	0x20000320
 8001dec:	40002000 	.word	0x40002000

08001df0 <_ZN5motor11turnOnMotorEv>:

void motor::turnOnMotor(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

	//Set enable pin to 0 for turn on outputs of fets
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, (GPIO_PinState)0);  //EN
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dfe:	481b      	ldr	r0, [pc, #108]	; (8001e6c <_ZN5motor11turnOnMotorEv+0x7c>)
 8001e00:	f001 fdb6 	bl	8003970 <HAL_GPIO_WritePin>
	//Set reset pin (0 = outputs off, 1 = outputs on)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (GPIO_PinState)1);  //RST
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e0a:	4819      	ldr	r0, [pc, #100]	; (8001e70 <_ZN5motor11turnOnMotorEv+0x80>)
 8001e0c:	f001 fdb0 	bl	8003970 <HAL_GPIO_WritePin>
	//Assert sleepmode logic high is on, logic low is off
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, (GPIO_PinState)1);  //SLP
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e16:	4817      	ldr	r0, [pc, #92]	; (8001e74 <_ZN5motor11turnOnMotorEv+0x84>)
 8001e18:	f001 fdaa 	bl	8003970 <HAL_GPIO_WritePin>
	//Set the microsteping pins based on stepMode
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, (GPIO_PinState)0);  //MS1
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e22:	4812      	ldr	r0, [pc, #72]	; (8001e6c <_ZN5motor11turnOnMotorEv+0x7c>)
 8001e24:	f001 fda4 	bl	8003970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (GPIO_PinState)0);  //MS2
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e2e:	4810      	ldr	r0, [pc, #64]	; (8001e70 <_ZN5motor11turnOnMotorEv+0x80>)
 8001e30:	f001 fd9e 	bl	8003970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, (GPIO_PinState)0);  //MS2
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e3a:	480c      	ldr	r0, [pc, #48]	; (8001e6c <_ZN5motor11turnOnMotorEv+0x7c>)
 8001e3c:	f001 fd98 	bl	8003970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (GPIO_PinState)0);  //MS3
 8001e40:	2200      	movs	r2, #0
 8001e42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e46:	480a      	ldr	r0, [pc, #40]	; (8001e70 <_ZN5motor11turnOnMotorEv+0x80>)
 8001e48:	f001 fd92 	bl	8003970 <HAL_GPIO_WritePin>
	//Assert direction
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, (GPIO_PinState)1);  //DIR
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e52:	4808      	ldr	r0, [pc, #32]	; (8001e74 <_ZN5motor11turnOnMotorEv+0x84>)
 8001e54:	f001 fd8c 	bl	8003970 <HAL_GPIO_WritePin>
	//Assert logic low on STEP pin
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <_ZN5motor11turnOnMotorEv+0x84>)
 8001e60:	f001 fd86 	bl	8003970 <HAL_GPIO_WritePin>

	//Turn on timer and set motor speed to 0

}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40021000 	.word	0x40021000

08001e78 <_ZN5motor12turnOffMotorEv>:

void motor::turnOffMotor(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

	//Set enable pin to 1 for turn off outputs of fets
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, (GPIO_PinState)1);  //EN
 8001e80:	2201      	movs	r2, #1
 8001e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e86:	480f      	ldr	r0, [pc, #60]	; (8001ec4 <_ZN5motor12turnOffMotorEv+0x4c>)
 8001e88:	f001 fd72 	bl	8003970 <HAL_GPIO_WritePin>
	//Set reset pin (1 = outputs off, 0 = outputs on)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (GPIO_PinState)1);  //RST
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <_ZN5motor12turnOffMotorEv+0x50>)
 8001e94:	f001 fd6c 	bl	8003970 <HAL_GPIO_WritePin>
	//Assert sleepmode is off (1)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, (GPIO_PinState)1);  //SLP
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e9e:	480b      	ldr	r0, [pc, #44]	; (8001ecc <_ZN5motor12turnOffMotorEv+0x54>)
 8001ea0:	f001 fd66 	bl	8003970 <HAL_GPIO_WritePin>
	//Assert direction
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, (GPIO_PinState)1);  //DIR
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eaa:	4808      	ldr	r0, [pc, #32]	; (8001ecc <_ZN5motor12turnOffMotorEv+0x54>)
 8001eac:	f001 fd60 	bl	8003970 <HAL_GPIO_WritePin>
	//Assert logic low on STEP pin
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <_ZN5motor12turnOffMotorEv+0x54>)
 8001eb8:	f001 fd5a 	bl	8003970 <HAL_GPIO_WritePin>

}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <_ZN5motor8setSpeedEi>:
		currentStep++;
	}
}

void motor::setSpeed(int speedVal)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]


	//Determine if value needs changing
	if(systemState.currentSpeed == speedVal)
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <_ZN5motor8setSpeedEi+0xb0>)
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d048      	beq.n	8001f76 <_ZN5motor8setSpeedEi+0xa6>
	{
		//do nothing
	}
	else
	{
		HAL_TIM_Base_Stop(&htim14);
 8001ee4:	4827      	ldr	r0, [pc, #156]	; (8001f84 <_ZN5motor8setSpeedEi+0xb4>)
 8001ee6:	f002 fdcb 	bl	8004a80 <HAL_TIM_Base_Stop>
		if(speedVal < -100){speedVal = -100;}
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001ef0:	da02      	bge.n	8001ef8 <_ZN5motor8setSpeedEi+0x28>
 8001ef2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001ef6:	603b      	str	r3, [r7, #0]
		if(speedVal > 100){speedVal = 100;}
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	dd01      	ble.n	8001f02 <_ZN5motor8setSpeedEi+0x32>
 8001efe:	2364      	movs	r3, #100	; 0x64
 8001f00:	603b      	str	r3, [r7, #0]

		if(speedVal == 0){
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <_ZN5motor8setSpeedEi+0x4c>
			//turn off interrupt/stop timer
			HAL_TIM_Base_Stop(&htim14);
 8001f08:	481e      	ldr	r0, [pc, #120]	; (8001f84 <_ZN5motor8setSpeedEi+0xb4>)
 8001f0a:	f002 fdb9 	bl	8004a80 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop_IT(&htim14);
 8001f0e:	481d      	ldr	r0, [pc, #116]	; (8001f84 <_ZN5motor8setSpeedEi+0xb4>)
 8001f10:	f002 fe4e 	bl	8004bb0 <HAL_TIM_Base_Stop_IT>
			systemState.motorOnOff = 0;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <_ZN5motor8setSpeedEi+0xb0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_Base_Start_IT(&htim14);
			systemState.currentSpeed = speedVal;

		}
	}
}
 8001f1a:	e02c      	b.n	8001f76 <_ZN5motor8setSpeedEi+0xa6>
			if(speedVal < 0)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da04      	bge.n	8001f2c <_ZN5motor8setSpeedEi+0x5c>
				this->setDirection(0);
 8001f22:	2100      	movs	r1, #0
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f82f 	bl	8001f88 <_ZN5motor12setDirectionEi>
 8001f2a:	e003      	b.n	8001f34 <_ZN5motor8setSpeedEi+0x64>
				this->setDirection(1);
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f82a 	bl	8001f88 <_ZN5motor12setDirectionEi>
			int prescaler = 1000/(abs(speedVal));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bfb8      	it	lt
 8001f3a:	425b      	neglt	r3, r3
 8001f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f40:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f44:	60fb      	str	r3, [r7, #12]
			htim14.Init.Period = prescaler - 1;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <_ZN5motor8setSpeedEi+0xb4>)
 8001f4e:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f50:	480c      	ldr	r0, [pc, #48]	; (8001f84 <_ZN5motor8setSpeedEi+0xb4>)
 8001f52:	f002 fcdd 	bl	8004910 <HAL_TIM_Base_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <_ZN5motor8setSpeedEi+0x9a>
				  Error_Handler();
 8001f66:	f000 f893 	bl	8002090 <_ZN5motor13Error_HandlerEv>
			HAL_TIM_Base_Start_IT(&htim14);
 8001f6a:	4806      	ldr	r0, [pc, #24]	; (8001f84 <_ZN5motor8setSpeedEi+0xb4>)
 8001f6c:	f002 fdb0 	bl	8004ad0 <HAL_TIM_Base_Start_IT>
			systemState.currentSpeed = speedVal;
 8001f70:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <_ZN5motor8setSpeedEi+0xb0>)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200001e4 	.word	0x200001e4
 8001f84:	20000320 	.word	0x20000320

08001f88 <_ZN5motor12setDirectionEi>:

void motor::setDirection(int direction){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, (GPIO_PinState)direction);  //DIR
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <_ZN5motor12setDirectionEi+0x24>)
 8001f9e:	f001 fce7 	bl	8003970 <HAL_GPIO_WritePin>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000

08001fb0 <_ZN5motor4stepEv>:

void motor::step()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)1);  //STP
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fbe:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <_ZN5motor4stepEv+0x28>)
 8001fc0:	f001 fcd6 	bl	8003970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, (GPIO_PinState)0);  //STP
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <_ZN5motor4stepEv+0x28>)
 8001fcc:	f001 fcd0 	bl	8003970 <HAL_GPIO_WritePin>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000

08001fdc <_ZN5motor9zeroMotorEP7encoderP3led>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (GPIO_PinState)MS2);  //MS2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (GPIO_PinState)MS3);  //MS3
}

void motor::zeroMotor(encoder *ptr, led *ledptr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
	//set direction
	this->setDirection(0);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7ff ffcc 	bl	8001f88 <_ZN5motor12setDirectionEi>
	//step untill limit switch is triggered

	ledptr->SetRGB(65535, 0, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ff8:	f7ff fac2 	bl	8001580 <_ZN3led6SetRGBEiii>
	while((HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_14)))
 8001ffc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002000:	4821      	ldr	r0, [pc, #132]	; (8002088 <_ZN5motor9zeroMotorEP7encoderP3led+0xac>)
 8002002:	f001 fc9d 	bl	8003940 <HAL_GPIO_ReadPin>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <_ZN5motor9zeroMotorEP7encoderP3led+0x48>
	{
		this->step();
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f7ff ffca 	bl	8001fb0 <_ZN5motor4stepEv>
		HAL_Delay(10);
 800201c:	200a      	movs	r0, #10
 800201e:	f000 fc53 	bl	80028c8 <HAL_Delay>
	while((HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_14)))
 8002022:	e7eb      	b.n	8001ffc <_ZN5motor9zeroMotorEP7encoderP3led+0x20>
	}
	HAL_Delay(5);
 8002024:	2005      	movs	r0, #5
 8002026:	f000 fc4f 	bl	80028c8 <HAL_Delay>
	systemState.zeroRaw = (float)ptr->getRaw();
 800202a:	f7ff f8eb 	bl	8001204 <_ZN7encoder6getRawEv>
 800202e:	ee07 0a90 	vmov	s15, r0
 8002032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800203a:	ee17 2a90 	vmov	r2, s15
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <_ZN5motor9zeroMotorEP7encoderP3led+0xb0>)
 8002040:	631a      	str	r2, [r3, #48]	; 0x30

	//back off from zero point
	this->setDirection(1);
 8002042:	2101      	movs	r1, #1
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7ff ff9f 	bl	8001f88 <_ZN5motor12setDirectionEi>
	for(int i = 0; i<systemState.backOffSteps; i++)
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <_ZN5motor9zeroMotorEP7encoderP3led+0xb0>)
 8002050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	429a      	cmp	r2, r3
 8002056:	d909      	bls.n	800206c <_ZN5motor9zeroMotorEP7encoderP3led+0x90>
	{
		this->step();
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f7ff ffa9 	bl	8001fb0 <_ZN5motor4stepEv>
		HAL_Delay(100);
 800205e:	2064      	movs	r0, #100	; 0x64
 8002060:	f000 fc32 	bl	80028c8 <HAL_Delay>
	for(int i = 0; i<systemState.backOffSteps; i++)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3301      	adds	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e7f0      	b.n	800204e <_ZN5motor9zeroMotorEP7encoderP3led+0x72>
	}
	ledptr->SetRGB(0, 35535, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	f648 21cf 	movw	r1, #35535	; 0x8acf
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff fa84 	bl	8001580 <_ZN3led6SetRGBEiii>
	HAL_Delay(100);
 8002078:	2064      	movs	r0, #100	; 0x64
 800207a:	f000 fc25 	bl	80028c8 <HAL_Delay>

}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40020c00 	.word	0x40020c00
 800208c:	200001e4 	.word	0x200001e4

08002090 <_ZN5motor13Error_HandlerEv>:


}

void motor::Error_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002094:	b672      	cpsid	i
}
 8002096:	bf00      	nop
  __disable_irq();
  while (1)
 8002098:	e7fe      	b.n	8002098 <_ZN5motor13Error_HandlerEv+0x8>
	...

0800209c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_MspInit+0x4c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <HAL_MspInit+0x4c>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_MspInit+0x4c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_MspInit+0x4c>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_MspInit+0x4c>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_MspInit+0x4c>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800

080020ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <HAL_CAN_MspInit+0x94>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d134      	bne.n	8002178 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_CAN_MspInit+0x98>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <HAL_CAN_MspInit+0x98>)
 8002118:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_CAN_MspInit+0x98>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_CAN_MspInit+0x98>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a14      	ldr	r2, [pc, #80]	; (8002184 <HAL_CAN_MspInit+0x98>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_CAN_MspInit+0x98>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002146:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800214a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002158:	2309      	movs	r3, #9
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	4809      	ldr	r0, [pc, #36]	; (8002188 <HAL_CAN_MspInit+0x9c>)
 8002164:	f001 fa40 	bl	80035e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	2014      	movs	r0, #20
 800216e:	f001 fa04 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002172:	2014      	movs	r0, #20
 8002174:	f001 fa1d 	bl	80035b2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40006400 	.word	0x40006400
 8002184:	40023800 	.word	0x40023800
 8002188:	40020000 	.word	0x40020000

0800218c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a19      	ldr	r2, [pc, #100]	; (8002210 <HAL_SPI_MspInit+0x84>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d12b      	bne.n	8002206 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a17      	ldr	r2, [pc, #92]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a10      	ldr	r2, [pc, #64]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021e6:	23e0      	movs	r3, #224	; 0xe0
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021f6:	2305      	movs	r3, #5
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <HAL_SPI_MspInit+0x8c>)
 8002202:	f001 f9f1 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	; 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40013000 	.word	0x40013000
 8002214:	40023800 	.word	0x40023800
 8002218:	40020000 	.word	0x40020000

0800221c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a22      	ldr	r2, [pc, #136]	; (80022b4 <HAL_TIM_Base_MspInit+0x98>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10e      	bne.n	800224c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800224a:	e02e      	b.n	80022aa <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <HAL_TIM_Base_MspInit+0xa0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10e      	bne.n	8002274 <HAL_TIM_Base_MspInit+0x58>
      __HAL_RCC_TIM13_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_TIM_Base_MspInit+0x9c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
}
 8002272:	e01a      	b.n	80022aa <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM14)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a11      	ldr	r2, [pc, #68]	; (80022c0 <HAL_TIM_Base_MspInit+0xa4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d115      	bne.n	80022aa <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	202d      	movs	r0, #45	; 0x2d
 80022a0:	f001 f96b 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80022a4:	202d      	movs	r0, #45	; 0x2d
 80022a6:	f001 f984 	bl	80035b2 <HAL_NVIC_EnableIRQ>
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40010000 	.word	0x40010000
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40001c00 	.word	0x40001c00
 80022c0:	40002000 	.word	0x40002000

080022c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a12      	ldr	r2, [pc, #72]	; (800232c <HAL_TIM_MspPostInit+0x68>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d11e      	bne.n	8002324 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_TIM_MspPostInit+0x6c>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_TIM_MspPostInit+0x6c>)
 80022f0:	f043 0310 	orr.w	r3, r3, #16
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_TIM_MspPostInit+0x6c>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8002302:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8002306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002314:	2301      	movs	r3, #1
 8002316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	4619      	mov	r1, r3
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <HAL_TIM_MspPostInit+0x70>)
 8002320:	f001 f962 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002324:	bf00      	nop
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40010000 	.word	0x40010000
 8002330:	40023800 	.word	0x40023800
 8002334:	40021000 	.word	0x40021000

08002338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_UART_MspInit+0x84>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d12c      	bne.n	80023b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_UART_MspInit+0x88>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_UART_MspInit+0x88>)
 8002364:	f043 0310 	orr.w	r3, r3, #16
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_UART_MspInit+0x88>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_UART_MspInit+0x88>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a10      	ldr	r2, [pc, #64]	; (80023c0 <HAL_UART_MspInit+0x88>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <HAL_UART_MspInit+0x88>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002392:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023a4:	2307      	movs	r3, #7
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4619      	mov	r1, r3
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <HAL_UART_MspInit+0x8c>)
 80023b0:	f001 f91a 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023b4:	bf00      	nop
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40011000 	.word	0x40011000
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020000 	.word	0x40020000

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <NMI_Handler+0x4>

080023ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <HardFault_Handler+0x4>

080023d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <MemManage_Handler+0x4>

080023da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <BusFault_Handler+0x4>

080023e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <UsageFault_Handler+0x4>

080023e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002414:	f000 fa38 	bl	8002888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}

0800241c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI0_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(Button_Pin);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <CAN1_RX0_IRQHandler>:

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
void CAN1_RX0_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <CAN1_RX0_IRQHandler+0x10>)
 8002432:	f000 fd8e 	bl	8002f52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000258 	.word	0x20000258

08002440 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002446:	f002 fd03 	bl	8004e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000320 	.word	0x20000320

08002454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <SystemInit+0x20>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <SystemInit+0x20>)
 8002460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <_ZN7Machine4initEv>:
#include <processor.h>
#include <global.h>


void Machine::init()
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	HAL_Init();
 800247c:	f000 f9b2 	bl	80027e4 <HAL_Init>
	Machine::Config_Clock();
 8002480:	f000 f806 	bl	8002490 <_ZN7Machine12Config_ClockEv>
	Machine::MX_TIM1_Init();
 8002484:	f000 f89e 	bl	80025c4 <_ZN7Machine12MX_TIM1_InitEv>
	Machine::MX_TIM13_Init();
 8002488:	f000 f870 	bl	800256c <_ZN7Machine13MX_TIM13_InitEv>
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <_ZN7Machine12Config_ClockEv>:

void Machine::Config_Clock(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b094      	sub	sp, #80	; 0x50
 8002494:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002496:	f107 0320 	add.w	r3, r7, #32
 800249a:	2230      	movs	r2, #48	; 0x30
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 f814 	bl	80064cc <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <_ZN7Machine12Config_ClockEv+0xd4>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	4a29      	ldr	r2, [pc, #164]	; (8002564 <_ZN7Machine12Config_ClockEv+0xd4>)
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c2:	6413      	str	r3, [r2, #64]	; 0x40
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <_ZN7Machine12Config_ClockEv+0xd4>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80024d0:	2300      	movs	r3, #0
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <_ZN7Machine12Config_ClockEv+0xd8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024dc:	4a22      	ldr	r2, [pc, #136]	; (8002568 <_ZN7Machine12Config_ClockEv+0xd8>)
 80024de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b20      	ldr	r3, [pc, #128]	; (8002568 <_ZN7Machine12Config_ClockEv+0xd8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024f0:	2302      	movs	r3, #2
 80024f2:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024f4:	2301      	movs	r3, #1
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024f8:	2310      	movs	r3, #16
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002500:	f107 0320 	add.w	r3, r7, #32
 8002504:	4618      	mov	r0, r3
 8002506:	f001 fa4d 	bl	80039a4 <HAL_RCC_OscConfig>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <_ZN7Machine12Config_ClockEv+0x8e>
	  {
	    Error_Handler();
 800251a:	f000 f933 	bl	8002784 <_ZN7Machine13Error_HandlerEv>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800251e:	230f      	movs	r3, #15
 8002520:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002532:	f107 030c 	add.w	r3, r7, #12
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f001 fcab 	bl	8003e94 <HAL_RCC_ClockConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <_ZN7Machine12Config_ClockEv+0xc2>
	  {
	    Error_Handler();
 800254e:	f000 f919 	bl	8002784 <_ZN7Machine13Error_HandlerEv>
	  }
	  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	2000      	movs	r0, #0
 8002558:	f001 fd82 	bl	8004060 <HAL_RCC_MCOConfig>
}
 800255c:	bf00      	nop
 800255e:	3750      	adds	r7, #80	; 0x50
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40023800 	.word	0x40023800
 8002568:	40007000 	.word	0x40007000

0800256c <_ZN7Machine13MX_TIM13_InitEv>:

void Machine::MX_TIM13_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8002572:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <_ZN7Machine13MX_TIM13_InitEv+0x54>)
 8002574:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1600-1;
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8002578:	f240 623f 	movw	r2, #1599	; 0x63f
 800257c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8002584:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8002586:	f242 720f 	movw	r2, #9999	; 0x270f
 800258a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002598:	4808      	ldr	r0, [pc, #32]	; (80025bc <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 800259a:	f002 f9b9 	bl	8004910 <HAL_TIM_Base_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf14      	ite	ne
 80025a4:	2301      	movne	r3, #1
 80025a6:	2300      	moveq	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <_ZN7Machine13MX_TIM13_InitEv+0x46>
  {
    Error_Handler();
 80025ae:	f000 f8e9 	bl	8002784 <_ZN7Machine13Error_HandlerEv>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  HAL_TIM_Base_Start(&htim13);
 80025b2:	4802      	ldr	r0, [pc, #8]	; (80025bc <_ZN7Machine13MX_TIM13_InitEv+0x50>)
 80025b4:	f002 f9fc 	bl	80049b0 <HAL_TIM_Base_Start>
  /* USER CODE END TIM13_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	200002d8 	.word	0x200002d8
 80025c0:	40001c00 	.word	0x40001c00

080025c4 <_ZN7Machine12MX_TIM1_InitEv>:

void Machine::MX_TIM1_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b096      	sub	sp, #88	; 0x58
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	611a      	str	r2, [r3, #16]
 80025f2:	615a      	str	r2, [r3, #20]
 80025f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2220      	movs	r2, #32
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f003 ff65 	bl	80064cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002602:	4b5e      	ldr	r3, [pc, #376]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002604:	4a5e      	ldr	r2, [pc, #376]	; (8002780 <_ZN7Machine12MX_TIM1_InitEv+0x1bc>)
 8002606:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002608:	4b5c      	ldr	r3, [pc, #368]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 800260a:	2200      	movs	r2, #0
 800260c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260e:	4b5b      	ldr	r3, [pc, #364]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002614:	4b59      	ldr	r3, [pc, #356]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800261a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261c:	4b57      	ldr	r3, [pc, #348]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002622:	4b56      	ldr	r3, [pc, #344]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002624:	2200      	movs	r2, #0
 8002626:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002628:	4b54      	ldr	r3, [pc, #336]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800262e:	4853      	ldr	r0, [pc, #332]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002630:	f002 f96e 	bl	8004910 <HAL_TIM_Base_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf14      	ite	ne
 800263a:	2301      	movne	r3, #1
 800263c:	2300      	moveq	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <_ZN7Machine12MX_TIM1_InitEv+0x84>
  {
    Error_Handler();
 8002644:	f000 f89e 	bl	8002784 <_ZN7Machine13Error_HandlerEv>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800264e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002652:	4619      	mov	r1, r3
 8002654:	4849      	ldr	r0, [pc, #292]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002656:	f002 fdc5 	bl	80051e4 <HAL_TIM_ConfigClockSource>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <_ZN7Machine12MX_TIM1_InitEv+0xaa>
  {
    Error_Handler();
 800266a:	f000 f88b 	bl	8002784 <_ZN7Machine13Error_HandlerEv>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800266e:	4843      	ldr	r0, [pc, #268]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002670:	f002 facd 	bl	8004c0e <HAL_TIM_PWM_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <_ZN7Machine12MX_TIM1_InitEv+0xc4>
  {
    Error_Handler();
 8002684:	f000 f87e 	bl	8002784 <_ZN7Machine13Error_HandlerEv>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002690:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002694:	4619      	mov	r1, r3
 8002696:	4839      	ldr	r0, [pc, #228]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002698:	f003 f9a4 	bl	80059e4 <HAL_TIMEx_MasterConfigSynchronization>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <_ZN7Machine12MX_TIM1_InitEv+0xec>
  {
    Error_Handler();
 80026ac:	f000 f86a 	bl	8002784 <_ZN7Machine13Error_HandlerEv>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026b0:	2360      	movs	r3, #96	; 0x60
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026bc:	2300      	movs	r3, #0
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d0:	2200      	movs	r2, #0
 80026d2:	4619      	mov	r1, r3
 80026d4:	4829      	ldr	r0, [pc, #164]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 80026d6:	f002 fcc3 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <_ZN7Machine12MX_TIM1_InitEv+0x12a>
  {
    Error_Handler();
 80026ea:	f000 f84b 	bl	8002784 <_ZN7Machine13Error_HandlerEv>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f2:	2204      	movs	r2, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4821      	ldr	r0, [pc, #132]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 80026f8:	f002 fcb2 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bf14      	ite	ne
 8002702:	2301      	movne	r3, #1
 8002704:	2300      	moveq	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <_ZN7Machine12MX_TIM1_InitEv+0x14c>
  {
    Error_Handler();
 800270c:	f000 f83a 	bl	8002784 <_ZN7Machine13Error_HandlerEv>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002714:	2208      	movs	r2, #8
 8002716:	4619      	mov	r1, r3
 8002718:	4818      	ldr	r0, [pc, #96]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 800271a:	f002 fca1 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <_ZN7Machine12MX_TIM1_InitEv+0x16e>
  {
    Error_Handler();
 800272e:	f000 f829 	bl	8002784 <_ZN7Machine13Error_HandlerEv>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800274a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	4619      	mov	r1, r3
 8002754:	4809      	ldr	r0, [pc, #36]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002756:	f003 f9c1 	bl	8005adc <HAL_TIMEx_ConfigBreakDeadTime>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf14      	ite	ne
 8002760:	2301      	movne	r3, #1
 8002762:	2300      	moveq	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <_ZN7Machine12MX_TIM1_InitEv+0x1aa>
  {
    Error_Handler();
 800276a:	f000 f80b 	bl	8002784 <_ZN7Machine13Error_HandlerEv>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800276e:	4803      	ldr	r0, [pc, #12]	; (800277c <_ZN7Machine12MX_TIM1_InitEv+0x1b8>)
 8002770:	f7ff fda8 	bl	80022c4 <HAL_TIM_MspPostInit>

}
 8002774:	bf00      	nop
 8002776:	3758      	adds	r7, #88	; 0x58
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000368 	.word	0x20000368
 8002780:	40010000 	.word	0x40010000

08002784 <_ZN7Machine13Error_HandlerEv>:



void Machine::Error_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002788:	b672      	cpsid	i
}
 800278a:	bf00      	nop
  __disable_irq();
  while (1)
 800278c:	e7fe      	b.n	800278c <_ZN7Machine13Error_HandlerEv+0x8>
	...

08002790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002794:	480d      	ldr	r0, [pc, #52]	; (80027cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002796:	490e      	ldr	r1, [pc, #56]	; (80027d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002798:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027ac:	4c0b      	ldr	r4, [pc, #44]	; (80027dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027ba:	f7ff fe4b 	bl	8002454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027be:	f003 fe61 	bl	8006484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027c2:	f7fe ff23 	bl	800160c <main>
  bx  lr    
 80027c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80027c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80027cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80027d4:	08006d9c 	.word	0x08006d9c
  ldr r2, =_sbss
 80027d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80027dc:	200003ec 	.word	0x200003ec

080027e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e0:	e7fe      	b.n	80027e0 <ADC_IRQHandler>
	...

080027e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_Init+0x40>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <HAL_Init+0x40>)
 80027ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <HAL_Init+0x40>)
 80027fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a07      	ldr	r2, [pc, #28]	; (8002824 <HAL_Init+0x40>)
 8002806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800280c:	2003      	movs	r0, #3
 800280e:	f000 fea9 	bl	8003564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002812:	200f      	movs	r0, #15
 8002814:	f000 f808 	bl	8002828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002818:	f7ff fc40 	bl	800209c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023c00 	.word	0x40023c00

08002828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_InitTick+0x54>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_InitTick+0x58>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800283e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fec1 	bl	80035ce <HAL_SYSTICK_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e00e      	b.n	8002874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b0f      	cmp	r3, #15
 800285a:	d80a      	bhi.n	8002872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800285c:	2200      	movs	r2, #0
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	f000 fe89 	bl	800357a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002868:	4a06      	ldr	r2, [pc, #24]	; (8002884 <HAL_InitTick+0x5c>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000000 	.word	0x20000000
 8002880:	20000008 	.word	0x20000008
 8002884:	20000004 	.word	0x20000004

08002888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_IncTick+0x20>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_IncTick+0x24>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4413      	add	r3, r2
 8002898:	4a04      	ldr	r2, [pc, #16]	; (80028ac <HAL_IncTick+0x24>)
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000008 	.word	0x20000008
 80028ac:	200003e8 	.word	0x200003e8

080028b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return uwTick;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_GetTick+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	200003e8 	.word	0x200003e8

080028c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff ffee 	bl	80028b0 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d005      	beq.n	80028ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_Delay+0x44>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ee:	bf00      	nop
 80028f0:	f7ff ffde 	bl	80028b0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d8f7      	bhi.n	80028f0 <HAL_Delay+0x28>
  {
  }
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000008 	.word	0x20000008

08002910 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0ed      	b.n	8002afe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff fbdc 	bl	80020ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002944:	f7ff ffb4 	bl	80028b0 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800294a:	e012      	b.n	8002972 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800294c:	f7ff ffb0 	bl	80028b0 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b0a      	cmp	r3, #10
 8002958:	d90b      	bls.n	8002972 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2205      	movs	r2, #5
 800296a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0c5      	b.n	8002afe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0e5      	beq.n	800294c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0202 	bic.w	r2, r2, #2
 800298e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002990:	f7ff ff8e 	bl	80028b0 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002996:	e012      	b.n	80029be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002998:	f7ff ff8a 	bl	80028b0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b0a      	cmp	r3, #10
 80029a4:	d90b      	bls.n	80029be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2205      	movs	r2, #5
 80029b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e09f      	b.n	8002afe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e5      	bne.n	8002998 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7e1b      	ldrb	r3, [r3, #24]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d108      	bne.n	80029e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e007      	b.n	80029f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7e5b      	ldrb	r3, [r3, #25]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d108      	bne.n	8002a10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e007      	b.n	8002a20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7e9b      	ldrb	r3, [r3, #26]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d108      	bne.n	8002a3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e007      	b.n	8002a4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0220 	bic.w	r2, r2, #32
 8002a48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	7edb      	ldrb	r3, [r3, #27]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d108      	bne.n	8002a64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0210 	bic.w	r2, r2, #16
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e007      	b.n	8002a74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0210 	orr.w	r2, r2, #16
 8002a72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7f1b      	ldrb	r3, [r3, #28]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d108      	bne.n	8002a8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0208 	orr.w	r2, r2, #8
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e007      	b.n	8002a9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0208 	bic.w	r2, r2, #8
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7f5b      	ldrb	r3, [r3, #29]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d108      	bne.n	8002ab8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0204 	orr.w	r2, r2, #4
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e007      	b.n	8002ac8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0204 	bic.w	r2, r2, #4
 8002ac6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	ea42 0103 	orr.w	r1, r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d003      	beq.n	8002b2e <HAL_CAN_ConfigFilter+0x26>
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	f040 80be 	bne.w	8002caa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002b30:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	2201      	movs	r2, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	401a      	ands	r2, r3
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d123      	bne.n	8002bd8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bb2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3248      	adds	r2, #72	; 0x48
 8002bb8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bcc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	3348      	adds	r3, #72	; 0x48
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d122      	bne.n	8002c26 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3248      	adds	r2, #72	; 0x48
 8002c06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c1c:	6979      	ldr	r1, [r7, #20]
 8002c1e:	3348      	adds	r3, #72	; 0x48
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	401a      	ands	r2, r3
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002c40:	e007      	b.n	8002c52 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	401a      	ands	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c6c:	e007      	b.n	8002c7e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c9c:	f023 0201 	bic.w	r2, r3, #1
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e006      	b.n	8002cb8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40006400 	.word	0x40006400

08002cc8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d12e      	bne.n	8002d3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7ff fddc 	bl	80028b0 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cfa:	e012      	b.n	8002d22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cfc:	f7ff fdd8 	bl	80028b0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b0a      	cmp	r3, #10
 8002d08:	d90b      	bls.n	8002d22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2205      	movs	r2, #5
 8002d1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e012      	b.n	8002d48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e006      	b.n	8002d48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
  }
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d64:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d6e:	7ffb      	ldrb	r3, [r7, #31]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d003      	beq.n	8002d7c <HAL_CAN_AddTxMessage+0x2c>
 8002d74:	7ffb      	ldrb	r3, [r7, #31]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	f040 80b8 	bne.w	8002eec <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80a0 	beq.w	8002edc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	0e1b      	lsrs	r3, r3, #24
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d907      	bls.n	8002dbc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e09e      	b.n	8002efa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	6809      	ldr	r1, [r1, #0]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	3318      	adds	r3, #24
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	440b      	add	r3, r1
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e00f      	b.n	8002e0a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002df4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002dfe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	3318      	adds	r3, #24
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	440b      	add	r3, r1
 8002e08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3318      	adds	r3, #24
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	440b      	add	r3, r1
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	7d1b      	ldrb	r3, [r3, #20]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d111      	bne.n	8002e4a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3318      	adds	r3, #24
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	6811      	ldr	r1, [r2, #0]
 8002e3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3318      	adds	r3, #24
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	440b      	add	r3, r1
 8002e46:	3304      	adds	r3, #4
 8002e48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3307      	adds	r3, #7
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	061a      	lsls	r2, r3, #24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3306      	adds	r3, #6
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	041b      	lsls	r3, r3, #16
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3305      	adds	r3, #5
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	4313      	orrs	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	3204      	adds	r2, #4
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	6811      	ldr	r1, [r2, #0]
 8002e72:	ea43 0200 	orr.w	r2, r3, r0
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002e80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3303      	adds	r3, #3
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	061a      	lsls	r2, r3, #24
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3301      	adds	r3, #1
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	7812      	ldrb	r2, [r2, #0]
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	6811      	ldr	r1, [r2, #0]
 8002ea8:	ea43 0200 	orr.w	r2, r3, r0
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	440b      	add	r3, r1
 8002eb2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002eb6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4413      	add	r3, r2
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	6811      	ldr	r1, [r2, #0]
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	3318      	adds	r3, #24
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	440b      	add	r3, r1
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e00e      	b.n	8002efa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e006      	b.n	8002efa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f16:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d002      	beq.n	8002f24 <HAL_CAN_ActivateNotification+0x1e>
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d109      	bne.n	8002f38 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6959      	ldr	r1, [r3, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e006      	b.n	8002f46 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b08a      	sub	sp, #40	; 0x28
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d07c      	beq.n	8003092 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d023      	beq.n	8002fea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f983 	bl	80032c0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002fba:	e016      	b.n	8002fea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fce:	e00c      	b.n	8002fea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe2:	e002      	b.n	8002fea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f989 	bl	80032fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d024      	beq.n	800303e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ffc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f963 	bl	80032d4 <HAL_CAN_TxMailbox1CompleteCallback>
 800300e:	e016      	b.n	800303e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003016:	2b00      	cmp	r3, #0
 8003018:	d004      	beq.n	8003024 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	e00c      	b.n	800303e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302a:	2b00      	cmp	r3, #0
 800302c:	d004      	beq.n	8003038 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
 8003036:	e002      	b.n	800303e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f969 	bl	8003310 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d024      	beq.n	8003092 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003050:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f943 	bl	80032e8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003062:	e016      	b.n	8003092 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	e00c      	b.n	8003092 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	e002      	b.n	8003092 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f949 	bl	8003324 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00c      	beq.n	80030b6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2210      	movs	r2, #16
 80030b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2208      	movs	r2, #8
 80030d0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f93a 	bl	800334c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f921 	bl	8003338 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00c      	beq.n	800311a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003110:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2210      	movs	r2, #16
 8003118:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00b      	beq.n	800313c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2208      	movs	r2, #8
 8003134:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f91c 	bl	8003374 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f903 	bl	8003360 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2210      	movs	r2, #16
 8003174:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f906 	bl	8003388 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2208      	movs	r2, #8
 8003196:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f8ff 	bl	800339c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d07b      	beq.n	80032a0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d072      	beq.n	8003298 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	f043 0304 	orr.w	r3, r3, #4
 8003204:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320c:	2b00      	cmp	r3, #0
 800320e:	d043      	beq.n	8003298 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003216:	2b00      	cmp	r3, #0
 8003218:	d03e      	beq.n	8003298 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003220:	2b60      	cmp	r3, #96	; 0x60
 8003222:	d02b      	beq.n	800327c <HAL_CAN_IRQHandler+0x32a>
 8003224:	2b60      	cmp	r3, #96	; 0x60
 8003226:	d82e      	bhi.n	8003286 <HAL_CAN_IRQHandler+0x334>
 8003228:	2b50      	cmp	r3, #80	; 0x50
 800322a:	d022      	beq.n	8003272 <HAL_CAN_IRQHandler+0x320>
 800322c:	2b50      	cmp	r3, #80	; 0x50
 800322e:	d82a      	bhi.n	8003286 <HAL_CAN_IRQHandler+0x334>
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d019      	beq.n	8003268 <HAL_CAN_IRQHandler+0x316>
 8003234:	2b40      	cmp	r3, #64	; 0x40
 8003236:	d826      	bhi.n	8003286 <HAL_CAN_IRQHandler+0x334>
 8003238:	2b30      	cmp	r3, #48	; 0x30
 800323a:	d010      	beq.n	800325e <HAL_CAN_IRQHandler+0x30c>
 800323c:	2b30      	cmp	r3, #48	; 0x30
 800323e:	d822      	bhi.n	8003286 <HAL_CAN_IRQHandler+0x334>
 8003240:	2b10      	cmp	r3, #16
 8003242:	d002      	beq.n	800324a <HAL_CAN_IRQHandler+0x2f8>
 8003244:	2b20      	cmp	r3, #32
 8003246:	d005      	beq.n	8003254 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003248:	e01d      	b.n	8003286 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	f043 0308 	orr.w	r3, r3, #8
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003252:	e019      	b.n	8003288 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	f043 0310 	orr.w	r3, r3, #16
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800325c:	e014      	b.n	8003288 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	f043 0320 	orr.w	r3, r3, #32
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003266:	e00f      	b.n	8003288 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003270:	e00a      	b.n	8003288 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800327a:	e005      	b.n	8003288 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003284:	e000      	b.n	8003288 <HAL_CAN_IRQHandler+0x336>
            break;
 8003286:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003296:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2204      	movs	r2, #4
 800329e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f87c 	bl	80033b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80032b8:	bf00      	nop
 80032ba:	3728      	adds	r7, #40	; 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <__NVIC_SetPriorityGrouping+0x44>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e0:	4013      	ands	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f6:	4a04      	ldr	r2, [pc, #16]	; (8003408 <__NVIC_SetPriorityGrouping+0x44>)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	60d3      	str	r3, [r2, #12]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <__NVIC_GetPriorityGrouping+0x18>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	f003 0307 	and.w	r3, r3, #7
}
 800341a:	4618      	mov	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	2b00      	cmp	r3, #0
 8003438:	db0b      	blt.n	8003452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	f003 021f 	and.w	r2, r3, #31
 8003440:	4907      	ldr	r1, [pc, #28]	; (8003460 <__NVIC_EnableIRQ+0x38>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2001      	movs	r0, #1
 800344a:	fa00 f202 	lsl.w	r2, r0, r2
 800344e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000e100 	.word	0xe000e100

08003464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	490c      	ldr	r1, [pc, #48]	; (80034b0 <__NVIC_SetPriority+0x4c>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800348c:	e00a      	b.n	80034a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4908      	ldr	r1, [pc, #32]	; (80034b4 <__NVIC_SetPriority+0x50>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3b04      	subs	r3, #4
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	440b      	add	r3, r1
 80034a2:	761a      	strb	r2, [r3, #24]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f1c3 0307 	rsb	r3, r3, #7
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	bf28      	it	cs
 80034d6:	2304      	movcs	r3, #4
 80034d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3304      	adds	r3, #4
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d902      	bls.n	80034e8 <NVIC_EncodePriority+0x30>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3b03      	subs	r3, #3
 80034e6:	e000      	b.n	80034ea <NVIC_EncodePriority+0x32>
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003500:	f04f 31ff 	mov.w	r1, #4294967295
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43d9      	mvns	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	4313      	orrs	r3, r2
         );
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003530:	d301      	bcc.n	8003536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003532:	2301      	movs	r3, #1
 8003534:	e00f      	b.n	8003556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <SysTick_Config+0x40>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3b01      	subs	r3, #1
 800353c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353e:	210f      	movs	r1, #15
 8003540:	f04f 30ff 	mov.w	r0, #4294967295
 8003544:	f7ff ff8e 	bl	8003464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <SysTick_Config+0x40>)
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354e:	4b04      	ldr	r3, [pc, #16]	; (8003560 <SysTick_Config+0x40>)
 8003550:	2207      	movs	r2, #7
 8003552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	e000e010 	.word	0xe000e010

08003564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff29 	bl	80033c4 <__NVIC_SetPriorityGrouping>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800358c:	f7ff ff3e 	bl	800340c <__NVIC_GetPriorityGrouping>
 8003590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f7ff ff8e 	bl	80034b8 <NVIC_EncodePriority>
 800359c:	4602      	mov	r2, r0
 800359e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff5d 	bl	8003464 <__NVIC_SetPriority>
}
 80035aa:	bf00      	nop
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff31 	bl	8003428 <__NVIC_EnableIRQ>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ffa2 	bl	8003520 <SysTick_Config>
 80035dc:	4603      	mov	r3, r0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	; 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	e177      	b.n	80038f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003604:	2201      	movs	r2, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	429a      	cmp	r2, r3
 800361e:	f040 8166 	bne.w	80038ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d005      	beq.n	800363a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003636:	2b02      	cmp	r3, #2
 8003638:	d130      	bne.n	800369c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	2203      	movs	r2, #3
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003670:	2201      	movs	r2, #1
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 0201 	and.w	r2, r3, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d017      	beq.n	80036d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d123      	bne.n	800372c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	08da      	lsrs	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3208      	adds	r2, #8
 80036ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	220f      	movs	r2, #15
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	08da      	lsrs	r2, r3, #3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3208      	adds	r2, #8
 8003726:	69b9      	ldr	r1, [r7, #24]
 8003728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2203      	movs	r2, #3
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0203 	and.w	r2, r3, #3
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80c0 	beq.w	80038ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b66      	ldr	r3, [pc, #408]	; (800390c <HAL_GPIO_Init+0x324>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	4a65      	ldr	r2, [pc, #404]	; (800390c <HAL_GPIO_Init+0x324>)
 8003778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800377c:	6453      	str	r3, [r2, #68]	; 0x44
 800377e:	4b63      	ldr	r3, [pc, #396]	; (800390c <HAL_GPIO_Init+0x324>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800378a:	4a61      	ldr	r2, [pc, #388]	; (8003910 <HAL_GPIO_Init+0x328>)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	3302      	adds	r3, #2
 8003792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	220f      	movs	r2, #15
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a58      	ldr	r2, [pc, #352]	; (8003914 <HAL_GPIO_Init+0x32c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d037      	beq.n	8003826 <HAL_GPIO_Init+0x23e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a57      	ldr	r2, [pc, #348]	; (8003918 <HAL_GPIO_Init+0x330>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d031      	beq.n	8003822 <HAL_GPIO_Init+0x23a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a56      	ldr	r2, [pc, #344]	; (800391c <HAL_GPIO_Init+0x334>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d02b      	beq.n	800381e <HAL_GPIO_Init+0x236>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a55      	ldr	r2, [pc, #340]	; (8003920 <HAL_GPIO_Init+0x338>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d025      	beq.n	800381a <HAL_GPIO_Init+0x232>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a54      	ldr	r2, [pc, #336]	; (8003924 <HAL_GPIO_Init+0x33c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01f      	beq.n	8003816 <HAL_GPIO_Init+0x22e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a53      	ldr	r2, [pc, #332]	; (8003928 <HAL_GPIO_Init+0x340>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d019      	beq.n	8003812 <HAL_GPIO_Init+0x22a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a52      	ldr	r2, [pc, #328]	; (800392c <HAL_GPIO_Init+0x344>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_GPIO_Init+0x226>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a51      	ldr	r2, [pc, #324]	; (8003930 <HAL_GPIO_Init+0x348>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00d      	beq.n	800380a <HAL_GPIO_Init+0x222>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a50      	ldr	r2, [pc, #320]	; (8003934 <HAL_GPIO_Init+0x34c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d007      	beq.n	8003806 <HAL_GPIO_Init+0x21e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4f      	ldr	r2, [pc, #316]	; (8003938 <HAL_GPIO_Init+0x350>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_GPIO_Init+0x21a>
 80037fe:	2309      	movs	r3, #9
 8003800:	e012      	b.n	8003828 <HAL_GPIO_Init+0x240>
 8003802:	230a      	movs	r3, #10
 8003804:	e010      	b.n	8003828 <HAL_GPIO_Init+0x240>
 8003806:	2308      	movs	r3, #8
 8003808:	e00e      	b.n	8003828 <HAL_GPIO_Init+0x240>
 800380a:	2307      	movs	r3, #7
 800380c:	e00c      	b.n	8003828 <HAL_GPIO_Init+0x240>
 800380e:	2306      	movs	r3, #6
 8003810:	e00a      	b.n	8003828 <HAL_GPIO_Init+0x240>
 8003812:	2305      	movs	r3, #5
 8003814:	e008      	b.n	8003828 <HAL_GPIO_Init+0x240>
 8003816:	2304      	movs	r3, #4
 8003818:	e006      	b.n	8003828 <HAL_GPIO_Init+0x240>
 800381a:	2303      	movs	r3, #3
 800381c:	e004      	b.n	8003828 <HAL_GPIO_Init+0x240>
 800381e:	2302      	movs	r3, #2
 8003820:	e002      	b.n	8003828 <HAL_GPIO_Init+0x240>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_GPIO_Init+0x240>
 8003826:	2300      	movs	r3, #0
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	f002 0203 	and.w	r2, r2, #3
 800382e:	0092      	lsls	r2, r2, #2
 8003830:	4093      	lsls	r3, r2
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003838:	4935      	ldr	r1, [pc, #212]	; (8003910 <HAL_GPIO_Init+0x328>)
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	3302      	adds	r3, #2
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003846:	4b3d      	ldr	r3, [pc, #244]	; (800393c <HAL_GPIO_Init+0x354>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800386a:	4a34      	ldr	r2, [pc, #208]	; (800393c <HAL_GPIO_Init+0x354>)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003870:	4b32      	ldr	r3, [pc, #200]	; (800393c <HAL_GPIO_Init+0x354>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003894:	4a29      	ldr	r2, [pc, #164]	; (800393c <HAL_GPIO_Init+0x354>)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800389a:	4b28      	ldr	r3, [pc, #160]	; (800393c <HAL_GPIO_Init+0x354>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038be:	4a1f      	ldr	r2, [pc, #124]	; (800393c <HAL_GPIO_Init+0x354>)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038c4:	4b1d      	ldr	r3, [pc, #116]	; (800393c <HAL_GPIO_Init+0x354>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038e8:	4a14      	ldr	r2, [pc, #80]	; (800393c <HAL_GPIO_Init+0x354>)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3301      	adds	r3, #1
 80038f2:	61fb      	str	r3, [r7, #28]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b0f      	cmp	r3, #15
 80038f8:	f67f ae84 	bls.w	8003604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3724      	adds	r7, #36	; 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800
 8003910:	40013800 	.word	0x40013800
 8003914:	40020000 	.word	0x40020000
 8003918:	40020400 	.word	0x40020400
 800391c:	40020800 	.word	0x40020800
 8003920:	40020c00 	.word	0x40020c00
 8003924:	40021000 	.word	0x40021000
 8003928:	40021400 	.word	0x40021400
 800392c:	40021800 	.word	0x40021800
 8003930:	40021c00 	.word	0x40021c00
 8003934:	40022000 	.word	0x40022000
 8003938:	40022400 	.word	0x40022400
 800393c:	40013c00 	.word	0x40013c00

08003940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	e001      	b.n	8003962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003962:	7bfb      	ldrb	r3, [r7, #15]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
 800397c:	4613      	mov	r3, r2
 800397e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003980:	787b      	ldrb	r3, [r7, #1]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800398c:	e003      	b.n	8003996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	041a      	lsls	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	619a      	str	r2, [r3, #24]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e267      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d075      	beq.n	8003aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039c2:	4b88      	ldr	r3, [pc, #544]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d00c      	beq.n	80039e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ce:	4b85      	ldr	r3, [pc, #532]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d112      	bne.n	8003a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039da:	4b82      	ldr	r3, [pc, #520]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e6:	d10b      	bne.n	8003a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e8:	4b7e      	ldr	r3, [pc, #504]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d05b      	beq.n	8003aac <HAL_RCC_OscConfig+0x108>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d157      	bne.n	8003aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e242      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a08:	d106      	bne.n	8003a18 <HAL_RCC_OscConfig+0x74>
 8003a0a:	4b76      	ldr	r3, [pc, #472]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a75      	ldr	r2, [pc, #468]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e01d      	b.n	8003a54 <HAL_RCC_OscConfig+0xb0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x98>
 8003a22:	4b70      	ldr	r3, [pc, #448]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a6f      	ldr	r2, [pc, #444]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b6d      	ldr	r3, [pc, #436]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6c      	ldr	r2, [pc, #432]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e00b      	b.n	8003a54 <HAL_RCC_OscConfig+0xb0>
 8003a3c:	4b69      	ldr	r3, [pc, #420]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a68      	ldr	r2, [pc, #416]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4b66      	ldr	r3, [pc, #408]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a65      	ldr	r2, [pc, #404]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d013      	beq.n	8003a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fe ff28 	bl	80028b0 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fe ff24 	bl	80028b0 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e207      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	4b5b      	ldr	r3, [pc, #364]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0xc0>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe ff14 	bl	80028b0 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fe ff10 	bl	80028b0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e1f3      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	4b51      	ldr	r3, [pc, #324]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0xe8>
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d063      	beq.n	8003b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aba:	4b4a      	ldr	r3, [pc, #296]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac6:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d11c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad2:	4b44      	ldr	r3, [pc, #272]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d116      	bne.n	8003b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ade:	4b41      	ldr	r3, [pc, #260]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_RCC_OscConfig+0x152>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e1c7      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af6:	4b3b      	ldr	r3, [pc, #236]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4937      	ldr	r1, [pc, #220]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0a:	e03a      	b.n	8003b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d020      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b14:	4b34      	ldr	r3, [pc, #208]	; (8003be8 <HAL_RCC_OscConfig+0x244>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fec9 	bl	80028b0 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b22:	f7fe fec5 	bl	80028b0 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e1a8      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b40:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4925      	ldr	r1, [pc, #148]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]
 8003b54:	e015      	b.n	8003b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_RCC_OscConfig+0x244>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fea8 	bl	80028b0 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b64:	f7fe fea4 	bl	80028b0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e187      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d036      	beq.n	8003bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <HAL_RCC_OscConfig+0x248>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fe fe88 	bl	80028b0 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba4:	f7fe fe84 	bl	80028b0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e167      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x200>
 8003bc2:	e01b      	b.n	8003bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_RCC_OscConfig+0x248>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bca:	f7fe fe71 	bl	80028b0 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd0:	e00e      	b.n	8003bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd2:	f7fe fe6d 	bl	80028b0 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d907      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e150      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
 8003be4:	40023800 	.word	0x40023800
 8003be8:	42470000 	.word	0x42470000
 8003bec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf0:	4b88      	ldr	r3, [pc, #544]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ea      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8097 	beq.w	8003d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0e:	4b81      	ldr	r3, [pc, #516]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	4b7d      	ldr	r3, [pc, #500]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	4a7c      	ldr	r2, [pc, #496]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c28:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2a:	4b7a      	ldr	r3, [pc, #488]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c36:	2301      	movs	r3, #1
 8003c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3a:	4b77      	ldr	r3, [pc, #476]	; (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d118      	bne.n	8003c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c46:	4b74      	ldr	r3, [pc, #464]	; (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a73      	ldr	r2, [pc, #460]	; (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c52:	f7fe fe2d 	bl	80028b0 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5a:	f7fe fe29 	bl	80028b0 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e10c      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x2ea>
 8003c80:	4b64      	ldr	r3, [pc, #400]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	4a63      	ldr	r2, [pc, #396]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8c:	e01c      	b.n	8003cc8 <HAL_RCC_OscConfig+0x324>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x30c>
 8003c96:	4b5f      	ldr	r3, [pc, #380]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	4a5e      	ldr	r2, [pc, #376]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	f043 0304 	orr.w	r3, r3, #4
 8003ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	4a5b      	ldr	r2, [pc, #364]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6713      	str	r3, [r2, #112]	; 0x70
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCC_OscConfig+0x324>
 8003cb0:	4b58      	ldr	r3, [pc, #352]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	4a57      	ldr	r2, [pc, #348]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	6713      	str	r3, [r2, #112]	; 0x70
 8003cbc:	4b55      	ldr	r3, [pc, #340]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	4a54      	ldr	r2, [pc, #336]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	f023 0304 	bic.w	r3, r3, #4
 8003cc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d015      	beq.n	8003cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fe fdee 	bl	80028b0 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd8:	f7fe fdea 	bl	80028b0 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e0cb      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cee:	4b49      	ldr	r3, [pc, #292]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0ee      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x334>
 8003cfa:	e014      	b.n	8003d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfc:	f7fe fdd8 	bl	80028b0 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d04:	f7fe fdd4 	bl	80028b0 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e0b5      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ee      	bne.n	8003d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2c:	4b39      	ldr	r3, [pc, #228]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	4a38      	ldr	r2, [pc, #224]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80a1 	beq.w	8003e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d42:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d05c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d141      	bne.n	8003dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d56:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <HAL_RCC_OscConfig+0x478>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fda8 	bl	80028b0 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fe fda4 	bl	80028b0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e087      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	019b      	lsls	r3, r3, #6
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	491b      	ldr	r1, [pc, #108]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dac:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_RCC_OscConfig+0x478>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fe fd7d 	bl	80028b0 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fe fd79 	bl	80028b0 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e05c      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x416>
 8003dd8:	e054      	b.n	8003e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_RCC_OscConfig+0x478>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fe fd66 	bl	80028b0 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fe fd62 	bl	80028b0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e045      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x444>
 8003e06:	e03d      	b.n	8003e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e038      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x4ec>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d028      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d121      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d11a      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e50:	4013      	ands	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d111      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800

08003e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0cc      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b68      	ldr	r3, [pc, #416]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d90c      	bls.n	8003ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b65      	ldr	r3, [pc, #404]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b63      	ldr	r3, [pc, #396]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0b8      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee8:	4b59      	ldr	r3, [pc, #356]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a58      	ldr	r2, [pc, #352]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f00:	4b53      	ldr	r3, [pc, #332]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a52      	ldr	r2, [pc, #328]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0c:	4b50      	ldr	r3, [pc, #320]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	494d      	ldr	r1, [pc, #308]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d044      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d119      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e07f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d003      	beq.n	8003f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f52:	4b3f      	ldr	r3, [pc, #252]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e06f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f62:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e067      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f72:	4b37      	ldr	r3, [pc, #220]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 0203 	bic.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4934      	ldr	r1, [pc, #208]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f84:	f7fe fc94 	bl	80028b0 <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8c:	f7fe fc90 	bl	80028b0 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e04f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 020c 	and.w	r2, r3, #12
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d1eb      	bne.n	8003f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d20c      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fca:	4b20      	ldr	r3, [pc, #128]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e032      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4916      	ldr	r1, [pc, #88]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	490e      	ldr	r1, [pc, #56]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800401a:	f000 f889 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 800401e:	4602      	mov	r2, r0
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	490a      	ldr	r1, [pc, #40]	; (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	5ccb      	ldrb	r3, [r1, r3]
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fbf4 	bl	8002828 <HAL_InitTick>

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023c00 	.word	0x40023c00
 8004050:	40023800 	.word	0x40023800
 8004054:	08006c70 	.word	0x08006c70
 8004058:	20000000 	.word	0x20000000
 800405c:	20000004 	.word	0x20000004

08004060 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08c      	sub	sp, #48	; 0x30
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d129      	bne.n	80040c6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <HAL_RCC_MCOConfig+0xc4>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	4a2a      	ldr	r2, [pc, #168]	; (8004124 <HAL_RCC_MCOConfig+0xc4>)
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	6313      	str	r3, [r2, #48]	; 0x30
 8004082:	4b28      	ldr	r3, [pc, #160]	; (8004124 <HAL_RCC_MCOConfig+0xc4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	61bb      	str	r3, [r7, #24]
 800408c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800408e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004094:	2302      	movs	r3, #2
 8004096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004098:	2303      	movs	r3, #3
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80040a4:	f107 031c 	add.w	r3, r7, #28
 80040a8:	4619      	mov	r1, r3
 80040aa:	481f      	ldr	r0, [pc, #124]	; (8004128 <HAL_RCC_MCOConfig+0xc8>)
 80040ac:	f7ff fa9c 	bl	80035e8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80040b0:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <HAL_RCC_MCOConfig+0xc4>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	430b      	orrs	r3, r1
 80040be:	4919      	ldr	r1, [pc, #100]	; (8004124 <HAL_RCC_MCOConfig+0xc4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80040c4:	e029      	b.n	800411a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	4b16      	ldr	r3, [pc, #88]	; (8004124 <HAL_RCC_MCOConfig+0xc4>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	4a15      	ldr	r2, [pc, #84]	; (8004124 <HAL_RCC_MCOConfig+0xc4>)
 80040d0:	f043 0304 	orr.w	r3, r3, #4
 80040d4:	6313      	str	r3, [r2, #48]	; 0x30
 80040d6:	4b13      	ldr	r3, [pc, #76]	; (8004124 <HAL_RCC_MCOConfig+0xc4>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80040e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e8:	2302      	movs	r3, #2
 80040ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ec:	2303      	movs	r3, #3
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80040f4:	2300      	movs	r3, #0
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80040f8:	f107 031c 	add.w	r3, r7, #28
 80040fc:	4619      	mov	r1, r3
 80040fe:	480b      	ldr	r0, [pc, #44]	; (800412c <HAL_RCC_MCOConfig+0xcc>)
 8004100:	f7ff fa72 	bl	80035e8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004104:	4b07      	ldr	r3, [pc, #28]	; (8004124 <HAL_RCC_MCOConfig+0xc4>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	00d9      	lsls	r1, r3, #3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	430b      	orrs	r3, r1
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <HAL_RCC_MCOConfig+0xc4>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
}
 800411a:	bf00      	nop
 800411c:	3730      	adds	r7, #48	; 0x30
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	40020000 	.word	0x40020000
 800412c:	40020800 	.word	0x40020800

08004130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004134:	b090      	sub	sp, #64	; 0x40
 8004136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
 800413c:	2300      	movs	r3, #0
 800413e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004140:	2300      	movs	r3, #0
 8004142:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004148:	4b59      	ldr	r3, [pc, #356]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b08      	cmp	r3, #8
 8004152:	d00d      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x40>
 8004154:	2b08      	cmp	r3, #8
 8004156:	f200 80a1 	bhi.w	800429c <HAL_RCC_GetSysClockFreq+0x16c>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x34>
 800415e:	2b04      	cmp	r3, #4
 8004160:	d003      	beq.n	800416a <HAL_RCC_GetSysClockFreq+0x3a>
 8004162:	e09b      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004164:	4b53      	ldr	r3, [pc, #332]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004168:	e09b      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800416a:	4b53      	ldr	r3, [pc, #332]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800416c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800416e:	e098      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004170:	4b4f      	ldr	r3, [pc, #316]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004178:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800417a:	4b4d      	ldr	r3, [pc, #308]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d028      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004186:	4b4a      	ldr	r3, [pc, #296]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	099b      	lsrs	r3, r3, #6
 800418c:	2200      	movs	r2, #0
 800418e:	623b      	str	r3, [r7, #32]
 8004190:	627a      	str	r2, [r7, #36]	; 0x24
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004198:	2100      	movs	r1, #0
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800419c:	fb03 f201 	mul.w	r2, r3, r1
 80041a0:	2300      	movs	r3, #0
 80041a2:	fb00 f303 	mul.w	r3, r0, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	4a43      	ldr	r2, [pc, #268]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041aa:	fba0 1202 	umull	r1, r2, r0, r2
 80041ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b0:	460a      	mov	r2, r1
 80041b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80041b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b6:	4413      	add	r3, r2
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041bc:	2200      	movs	r2, #0
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	61fa      	str	r2, [r7, #28]
 80041c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041ca:	f7fc f817 	bl	80001fc <__aeabi_uldivmod>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4613      	mov	r3, r2
 80041d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d6:	e053      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d8:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	099b      	lsrs	r3, r3, #6
 80041de:	2200      	movs	r2, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	617a      	str	r2, [r7, #20]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041ea:	f04f 0b00 	mov.w	fp, #0
 80041ee:	4652      	mov	r2, sl
 80041f0:	465b      	mov	r3, fp
 80041f2:	f04f 0000 	mov.w	r0, #0
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	0159      	lsls	r1, r3, #5
 80041fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004200:	0150      	lsls	r0, r2, #5
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	ebb2 080a 	subs.w	r8, r2, sl
 800420a:	eb63 090b 	sbc.w	r9, r3, fp
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800421a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800421e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004222:	ebb2 0408 	subs.w	r4, r2, r8
 8004226:	eb63 0509 	sbc.w	r5, r3, r9
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	00eb      	lsls	r3, r5, #3
 8004234:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004238:	00e2      	lsls	r2, r4, #3
 800423a:	4614      	mov	r4, r2
 800423c:	461d      	mov	r5, r3
 800423e:	eb14 030a 	adds.w	r3, r4, sl
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	eb45 030b 	adc.w	r3, r5, fp
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004256:	4629      	mov	r1, r5
 8004258:	028b      	lsls	r3, r1, #10
 800425a:	4621      	mov	r1, r4
 800425c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004260:	4621      	mov	r1, r4
 8004262:	028a      	lsls	r2, r1, #10
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426a:	2200      	movs	r2, #0
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	60fa      	str	r2, [r7, #12]
 8004270:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004274:	f7fb ffc2 	bl	80001fc <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4613      	mov	r3, r2
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	3301      	adds	r3, #1
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004290:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800429a:	e002      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800429e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3740      	adds	r7, #64	; 0x40
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800
 80042b4:	00f42400 	.word	0x00f42400
 80042b8:	017d7840 	.word	0x017d7840

080042bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c0:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c2:	681b      	ldr	r3, [r3, #0]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000000 	.word	0x20000000

080042d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042d8:	f7ff fff0 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0a9b      	lsrs	r3, r3, #10
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4903      	ldr	r1, [pc, #12]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	08006c80 	.word	0x08006c80

080042fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004300:	f7ff ffdc 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	0b5b      	lsrs	r3, r3, #13
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4903      	ldr	r1, [pc, #12]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40023800 	.word	0x40023800
 8004320:	08006c80 	.word	0x08006c80

08004324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e07b      	b.n	800442e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	d108      	bne.n	8004350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004346:	d009      	beq.n	800435c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	61da      	str	r2, [r3, #28]
 800434e:	e005      	b.n	800435c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd ff08 	bl	800218c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004392:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	ea42 0103 	orr.w	r1, r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	f003 0104 	and.w	r1, r3, #4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	f003 0210 	and.w	r2, r3, #16
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800441c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b08c      	sub	sp, #48	; 0x30
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004444:	2301      	movs	r3, #1
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_SPI_TransmitReceive+0x26>
 8004458:	2302      	movs	r3, #2
 800445a:	e18a      	b.n	8004772 <HAL_SPI_TransmitReceive+0x33c>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004464:	f7fe fa24 	bl	80028b0 <HAL_GetTick>
 8004468:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800447a:	887b      	ldrh	r3, [r7, #2]
 800447c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800447e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004482:	2b01      	cmp	r3, #1
 8004484:	d00f      	beq.n	80044a6 <HAL_SPI_TransmitReceive+0x70>
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800448c:	d107      	bne.n	800449e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d103      	bne.n	800449e <HAL_SPI_TransmitReceive+0x68>
 8004496:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800449a:	2b04      	cmp	r3, #4
 800449c:	d003      	beq.n	80044a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800449e:	2302      	movs	r3, #2
 80044a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044a4:	e15b      	b.n	800475e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_SPI_TransmitReceive+0x82>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_SPI_TransmitReceive+0x82>
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044be:	e14e      	b.n	800475e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d003      	beq.n	80044d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2205      	movs	r2, #5
 80044d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	887a      	ldrh	r2, [r7, #2]
 80044e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	887a      	ldrh	r2, [r7, #2]
 80044ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	887a      	ldrh	r2, [r7, #2]
 80044f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	887a      	ldrh	r2, [r7, #2]
 80044fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004514:	2b40      	cmp	r3, #64	; 0x40
 8004516:	d007      	beq.n	8004528 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004526:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004530:	d178      	bne.n	8004624 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_SPI_TransmitReceive+0x10a>
 800453a:	8b7b      	ldrh	r3, [r7, #26]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d166      	bne.n	800460e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	881a      	ldrh	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004564:	e053      	b.n	800460e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b02      	cmp	r3, #2
 8004572:	d11b      	bne.n	80045ac <HAL_SPI_TransmitReceive+0x176>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x176>
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d113      	bne.n	80045ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	881a      	ldrh	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d119      	bne.n	80045ee <HAL_SPI_TransmitReceive+0x1b8>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d014      	beq.n	80045ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	b292      	uxth	r2, r2
 80045d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	1c9a      	adds	r2, r3, #2
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045ea:	2301      	movs	r3, #1
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045ee:	f7fe f95f 	bl	80028b0 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d807      	bhi.n	800460e <HAL_SPI_TransmitReceive+0x1d8>
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d003      	beq.n	800460e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800460c:	e0a7      	b.n	800475e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1a6      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x130>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1a1      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x130>
 8004622:	e07c      	b.n	800471e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_SPI_TransmitReceive+0x1fc>
 800462c:	8b7b      	ldrh	r3, [r7, #26]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d16b      	bne.n	800470a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004658:	e057      	b.n	800470a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d11c      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x26c>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d017      	beq.n	80046a2 <HAL_SPI_TransmitReceive+0x26c>
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d114      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	7812      	ldrb	r2, [r2, #0]
 8004684:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d119      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x2ae>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d014      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046e0:	2301      	movs	r3, #1
 80046e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046e4:	f7fe f8e4 	bl	80028b0 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d803      	bhi.n	80046fc <HAL_SPI_TransmitReceive+0x2c6>
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d102      	bne.n	8004702 <HAL_SPI_TransmitReceive+0x2cc>
 80046fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004708:	e029      	b.n	800475e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1a2      	bne.n	800465a <HAL_SPI_TransmitReceive+0x224>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d19d      	bne.n	800465a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800471e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004720:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f8b2 	bl	800488c <SPI_EndRxTxTransaction>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d006      	beq.n	800473c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800473a:	e010      	b.n	800475e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	e000      	b.n	800475e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800475c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800476e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004772:	4618      	mov	r0, r3
 8004774:	3730      	adds	r7, #48	; 0x30
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800478c:	f7fe f890 	bl	80028b0 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	4413      	add	r3, r2
 800479a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800479c:	f7fe f888 	bl	80028b0 <HAL_GetTick>
 80047a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047a2:	4b39      	ldr	r3, [pc, #228]	; (8004888 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	015b      	lsls	r3, r3, #5
 80047a8:	0d1b      	lsrs	r3, r3, #20
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047b2:	e054      	b.n	800485e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d050      	beq.n	800485e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047bc:	f7fe f878 	bl	80028b0 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d902      	bls.n	80047d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d13d      	bne.n	800484e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ea:	d111      	bne.n	8004810 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f4:	d004      	beq.n	8004800 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fe:	d107      	bne.n	8004810 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004818:	d10f      	bne.n	800483a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e017      	b.n	800487e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3b01      	subs	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	429a      	cmp	r2, r3
 800487a:	d19b      	bne.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000000 	.word	0x20000000

0800488c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004898:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <SPI_EndRxTxTransaction+0x7c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1b      	ldr	r2, [pc, #108]	; (800490c <SPI_EndRxTxTransaction+0x80>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	0d5b      	lsrs	r3, r3, #21
 80048a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048a8:	fb02 f303 	mul.w	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b6:	d112      	bne.n	80048de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2200      	movs	r2, #0
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff ff5a 	bl	800477c <SPI_WaitFlagStateUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d016      	beq.n	80048fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f043 0220 	orr.w	r2, r3, #32
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e00f      	b.n	80048fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f4:	2b80      	cmp	r3, #128	; 0x80
 80048f6:	d0f2      	beq.n	80048de <SPI_EndRxTxTransaction+0x52>
 80048f8:	e000      	b.n	80048fc <SPI_EndRxTxTransaction+0x70>
        break;
 80048fa:	bf00      	nop
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000000 	.word	0x20000000
 800490c:	165e9f81 	.word	0x165e9f81

08004910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e041      	b.n	80049a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fd fc70 	bl	800221c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f000 fd38 	bl	80053c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d001      	beq.n	80049c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e046      	b.n	8004a56 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a23      	ldr	r2, [pc, #140]	; (8004a64 <HAL_TIM_Base_Start+0xb4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d022      	beq.n	8004a20 <HAL_TIM_Base_Start+0x70>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d01d      	beq.n	8004a20 <HAL_TIM_Base_Start+0x70>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <HAL_TIM_Base_Start+0xb8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d018      	beq.n	8004a20 <HAL_TIM_Base_Start+0x70>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <HAL_TIM_Base_Start+0xbc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d013      	beq.n	8004a20 <HAL_TIM_Base_Start+0x70>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <HAL_TIM_Base_Start+0xc0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00e      	beq.n	8004a20 <HAL_TIM_Base_Start+0x70>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1b      	ldr	r2, [pc, #108]	; (8004a74 <HAL_TIM_Base_Start+0xc4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d009      	beq.n	8004a20 <HAL_TIM_Base_Start+0x70>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a19      	ldr	r2, [pc, #100]	; (8004a78 <HAL_TIM_Base_Start+0xc8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <HAL_TIM_Base_Start+0x70>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <HAL_TIM_Base_Start+0xcc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d111      	bne.n	8004a44 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b06      	cmp	r3, #6
 8004a30:	d010      	beq.n	8004a54 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0201 	orr.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a42:	e007      	b.n	8004a54 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40010400 	.word	0x40010400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40001800 	.word	0x40001800

08004a80 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10f      	bne.n	8004ab8 <HAL_TIM_Base_Stop+0x38>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6a1a      	ldr	r2, [r3, #32]
 8004a9e:	f240 4344 	movw	r3, #1092	; 0x444
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d107      	bne.n	8004ab8 <HAL_TIM_Base_Stop+0x38>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d001      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e04e      	b.n	8004b86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a23      	ldr	r2, [pc, #140]	; (8004b94 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d022      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b12:	d01d      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d018      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1e      	ldr	r2, [pc, #120]	; (8004b9c <HAL_TIM_Base_Start_IT+0xcc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d013      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1c      	ldr	r2, [pc, #112]	; (8004ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00e      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1b      	ldr	r2, [pc, #108]	; (8004ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d009      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a19      	ldr	r2, [pc, #100]	; (8004ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a18      	ldr	r2, [pc, #96]	; (8004bac <HAL_TIM_Base_Start_IT+0xdc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d111      	bne.n	8004b74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b06      	cmp	r3, #6
 8004b60:	d010      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0201 	orr.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b72:	e007      	b.n	8004b84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40000c00 	.word	0x40000c00
 8004ba4:	40010400 	.word	0x40010400
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40001800 	.word	0x40001800

08004bb0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6a1a      	ldr	r2, [r3, #32]
 8004bce:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10f      	bne.n	8004bf8 <HAL_TIM_Base_Stop_IT+0x48>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6a1a      	ldr	r2, [r3, #32]
 8004bde:	f240 4344 	movw	r3, #1092	; 0x444
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_Base_Stop_IT+0x48>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e041      	b.n	8004ca4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f839 	bl	8004cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f000 fbb9 	bl	80053c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <HAL_TIM_PWM_Start+0x24>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	bf14      	ite	ne
 8004cdc:	2301      	movne	r3, #1
 8004cde:	2300      	moveq	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e022      	b.n	8004d2a <HAL_TIM_PWM_Start+0x6a>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d109      	bne.n	8004cfe <HAL_TIM_PWM_Start+0x3e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	e015      	b.n	8004d2a <HAL_TIM_PWM_Start+0x6a>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d109      	bne.n	8004d18 <HAL_TIM_PWM_Start+0x58>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	e008      	b.n	8004d2a <HAL_TIM_PWM_Start+0x6a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	bf14      	ite	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	2300      	moveq	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e07c      	b.n	8004e2c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <HAL_TIM_PWM_Start+0x82>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d40:	e013      	b.n	8004d6a <HAL_TIM_PWM_Start+0xaa>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d104      	bne.n	8004d52 <HAL_TIM_PWM_Start+0x92>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d50:	e00b      	b.n	8004d6a <HAL_TIM_PWM_Start+0xaa>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d104      	bne.n	8004d62 <HAL_TIM_PWM_Start+0xa2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d60:	e003      	b.n	8004d6a <HAL_TIM_PWM_Start+0xaa>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2202      	movs	r2, #2
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	6839      	ldr	r1, [r7, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fe10 	bl	8005998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2d      	ldr	r2, [pc, #180]	; (8004e34 <HAL_TIM_PWM_Start+0x174>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_TIM_PWM_Start+0xcc>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a2c      	ldr	r2, [pc, #176]	; (8004e38 <HAL_TIM_PWM_Start+0x178>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIM_PWM_Start+0xd0>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <HAL_TIM_PWM_Start+0xd2>
 8004d90:	2300      	movs	r3, #0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a22      	ldr	r2, [pc, #136]	; (8004e34 <HAL_TIM_PWM_Start+0x174>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d022      	beq.n	8004df6 <HAL_TIM_PWM_Start+0x136>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db8:	d01d      	beq.n	8004df6 <HAL_TIM_PWM_Start+0x136>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <HAL_TIM_PWM_Start+0x17c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d018      	beq.n	8004df6 <HAL_TIM_PWM_Start+0x136>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <HAL_TIM_PWM_Start+0x180>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <HAL_TIM_PWM_Start+0x136>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1c      	ldr	r2, [pc, #112]	; (8004e44 <HAL_TIM_PWM_Start+0x184>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00e      	beq.n	8004df6 <HAL_TIM_PWM_Start+0x136>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <HAL_TIM_PWM_Start+0x178>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d009      	beq.n	8004df6 <HAL_TIM_PWM_Start+0x136>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <HAL_TIM_PWM_Start+0x188>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <HAL_TIM_PWM_Start+0x136>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a16      	ldr	r2, [pc, #88]	; (8004e4c <HAL_TIM_PWM_Start+0x18c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d111      	bne.n	8004e1a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b06      	cmp	r3, #6
 8004e06:	d010      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e18:	e007      	b.n	8004e2a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40010000 	.word	0x40010000
 8004e38:	40010400 	.word	0x40010400
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40001800 	.word	0x40001800

08004e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d122      	bne.n	8004eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d11b      	bne.n	8004eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0202 	mvn.w	r2, #2
 8004e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fa77 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 8004e98:	e005      	b.n	8004ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa69 	bl	8005372 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fa7a 	bl	800539a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d122      	bne.n	8004f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d11b      	bne.n	8004f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0204 	mvn.w	r2, #4
 8004ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fa4d 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 8004eec:	e005      	b.n	8004efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fa3f 	bl	8005372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fa50 	bl	800539a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d122      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d11b      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0208 	mvn.w	r2, #8
 8004f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2204      	movs	r2, #4
 8004f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fa23 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 8004f40:	e005      	b.n	8004f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fa15 	bl	8005372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fa26 	bl	800539a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d122      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d11b      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0210 	mvn.w	r2, #16
 8004f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f9f9 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 8004f94:	e005      	b.n	8004fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f9eb 	bl	8005372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f9fc 	bl	800539a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d10e      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d107      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0201 	mvn.w	r2, #1
 8004fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fc fc16 	bl	8001800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fde:	2b80      	cmp	r3, #128	; 0x80
 8004fe0:	d10e      	bne.n	8005000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fec:	2b80      	cmp	r3, #128	; 0x80
 8004fee:	d107      	bne.n	8005000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fdca 	bl	8005b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500a:	2b40      	cmp	r3, #64	; 0x40
 800500c:	d10e      	bne.n	800502c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d107      	bne.n	800502c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f9c1 	bl	80053ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b20      	cmp	r3, #32
 8005038:	d10e      	bne.n	8005058 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b20      	cmp	r3, #32
 8005046:	d107      	bne.n	8005058 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0220 	mvn.w	r2, #32
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fd94 	bl	8005b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005058:	bf00      	nop
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800507a:	2302      	movs	r3, #2
 800507c:	e0ae      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b0c      	cmp	r3, #12
 800508a:	f200 809f 	bhi.w	80051cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800508e:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	080050c9 	.word	0x080050c9
 8005098:	080051cd 	.word	0x080051cd
 800509c:	080051cd 	.word	0x080051cd
 80050a0:	080051cd 	.word	0x080051cd
 80050a4:	08005109 	.word	0x08005109
 80050a8:	080051cd 	.word	0x080051cd
 80050ac:	080051cd 	.word	0x080051cd
 80050b0:	080051cd 	.word	0x080051cd
 80050b4:	0800514b 	.word	0x0800514b
 80050b8:	080051cd 	.word	0x080051cd
 80050bc:	080051cd 	.word	0x080051cd
 80050c0:	080051cd 	.word	0x080051cd
 80050c4:	0800518b 	.word	0x0800518b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fa18 	bl	8005504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0208 	orr.w	r2, r2, #8
 80050e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0204 	bic.w	r2, r2, #4
 80050f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6999      	ldr	r1, [r3, #24]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	619a      	str	r2, [r3, #24]
      break;
 8005106:	e064      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fa68 	bl	80055e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6999      	ldr	r1, [r3, #24]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	021a      	lsls	r2, r3, #8
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	619a      	str	r2, [r3, #24]
      break;
 8005148:	e043      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fabd 	bl	80056d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0208 	orr.w	r2, r2, #8
 8005164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0204 	bic.w	r2, r2, #4
 8005174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69d9      	ldr	r1, [r3, #28]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	61da      	str	r2, [r3, #28]
      break;
 8005188:	e023      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fb11 	bl	80057b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69d9      	ldr	r1, [r3, #28]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	021a      	lsls	r2, r3, #8
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	61da      	str	r2, [r3, #28]
      break;
 80051ca:	e002      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	75fb      	strb	r3, [r7, #23]
      break;
 80051d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIM_ConfigClockSource+0x1c>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e0b4      	b.n	800536a <HAL_TIM_ConfigClockSource+0x186>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800521e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005238:	d03e      	beq.n	80052b8 <HAL_TIM_ConfigClockSource+0xd4>
 800523a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523e:	f200 8087 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005246:	f000 8086 	beq.w	8005356 <HAL_TIM_ConfigClockSource+0x172>
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524e:	d87f      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005250:	2b70      	cmp	r3, #112	; 0x70
 8005252:	d01a      	beq.n	800528a <HAL_TIM_ConfigClockSource+0xa6>
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d87b      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005258:	2b60      	cmp	r3, #96	; 0x60
 800525a:	d050      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x11a>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d877      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005260:	2b50      	cmp	r3, #80	; 0x50
 8005262:	d03c      	beq.n	80052de <HAL_TIM_ConfigClockSource+0xfa>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d873      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d058      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x13a>
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d86f      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d064      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15a>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d86b      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d060      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15a>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d867      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d05c      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15a>
 8005284:	2b10      	cmp	r3, #16
 8005286:	d05a      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15a>
 8005288:	e062      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6899      	ldr	r1, [r3, #8]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f000 fb5d 	bl	8005958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	609a      	str	r2, [r3, #8]
      break;
 80052b6:	e04f      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6899      	ldr	r1, [r3, #8]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f000 fb46 	bl	8005958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052da:	609a      	str	r2, [r3, #8]
      break;
 80052dc:	e03c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f000 faba 	bl	8005864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2150      	movs	r1, #80	; 0x50
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fb13 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 80052fc:	e02c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6859      	ldr	r1, [r3, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	461a      	mov	r2, r3
 800530c:	f000 fad9 	bl	80058c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2160      	movs	r1, #96	; 0x60
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fb03 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 800531c:	e01c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	461a      	mov	r2, r3
 800532c:	f000 fa9a 	bl	8005864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2140      	movs	r1, #64	; 0x40
 8005336:	4618      	mov	r0, r3
 8005338:	f000 faf3 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 800533c:	e00c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4619      	mov	r1, r3
 8005348:	4610      	mov	r0, r2
 800534a:	f000 faea 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 800534e:	e003      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
      break;
 8005354:	e000      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a40      	ldr	r2, [pc, #256]	; (80054d8 <TIM_Base_SetConfig+0x114>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d013      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e2:	d00f      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a3d      	ldr	r2, [pc, #244]	; (80054dc <TIM_Base_SetConfig+0x118>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00b      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a3c      	ldr	r2, [pc, #240]	; (80054e0 <TIM_Base_SetConfig+0x11c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3b      	ldr	r2, [pc, #236]	; (80054e4 <TIM_Base_SetConfig+0x120>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a3a      	ldr	r2, [pc, #232]	; (80054e8 <TIM_Base_SetConfig+0x124>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d108      	bne.n	8005416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a2f      	ldr	r2, [pc, #188]	; (80054d8 <TIM_Base_SetConfig+0x114>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d02b      	beq.n	8005476 <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005424:	d027      	beq.n	8005476 <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2c      	ldr	r2, [pc, #176]	; (80054dc <TIM_Base_SetConfig+0x118>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d023      	beq.n	8005476 <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2b      	ldr	r2, [pc, #172]	; (80054e0 <TIM_Base_SetConfig+0x11c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01f      	beq.n	8005476 <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a2a      	ldr	r2, [pc, #168]	; (80054e4 <TIM_Base_SetConfig+0x120>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d01b      	beq.n	8005476 <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a29      	ldr	r2, [pc, #164]	; (80054e8 <TIM_Base_SetConfig+0x124>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d017      	beq.n	8005476 <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a28      	ldr	r2, [pc, #160]	; (80054ec <TIM_Base_SetConfig+0x128>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a27      	ldr	r2, [pc, #156]	; (80054f0 <TIM_Base_SetConfig+0x12c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00f      	beq.n	8005476 <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a26      	ldr	r2, [pc, #152]	; (80054f4 <TIM_Base_SetConfig+0x130>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00b      	beq.n	8005476 <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a25      	ldr	r2, [pc, #148]	; (80054f8 <TIM_Base_SetConfig+0x134>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d007      	beq.n	8005476 <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a24      	ldr	r2, [pc, #144]	; (80054fc <TIM_Base_SetConfig+0x138>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d003      	beq.n	8005476 <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a23      	ldr	r2, [pc, #140]	; (8005500 <TIM_Base_SetConfig+0x13c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d108      	bne.n	8005488 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <TIM_Base_SetConfig+0x114>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_Base_SetConfig+0xf8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a0c      	ldr	r2, [pc, #48]	; (80054e8 <TIM_Base_SetConfig+0x124>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d103      	bne.n	80054c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	615a      	str	r2, [r3, #20]
}
 80054ca:	bf00      	nop
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40000400 	.word	0x40000400
 80054e0:	40000800 	.word	0x40000800
 80054e4:	40000c00 	.word	0x40000c00
 80054e8:	40010400 	.word	0x40010400
 80054ec:	40014000 	.word	0x40014000
 80054f0:	40014400 	.word	0x40014400
 80054f4:	40014800 	.word	0x40014800
 80054f8:	40001800 	.word	0x40001800
 80054fc:	40001c00 	.word	0x40001c00
 8005500:	40002000 	.word	0x40002000

08005504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f023 0201 	bic.w	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 0302 	bic.w	r3, r3, #2
 800554c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a20      	ldr	r2, [pc, #128]	; (80055dc <TIM_OC1_SetConfig+0xd8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_OC1_SetConfig+0x64>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a1f      	ldr	r2, [pc, #124]	; (80055e0 <TIM_OC1_SetConfig+0xdc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d10c      	bne.n	8005582 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 0308 	bic.w	r3, r3, #8
 800556e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f023 0304 	bic.w	r3, r3, #4
 8005580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a15      	ldr	r2, [pc, #84]	; (80055dc <TIM_OC1_SetConfig+0xd8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_OC1_SetConfig+0x8e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a14      	ldr	r2, [pc, #80]	; (80055e0 <TIM_OC1_SetConfig+0xdc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d111      	bne.n	80055b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	621a      	str	r2, [r3, #32]
}
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40010400 	.word	0x40010400

080055e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f023 0210 	bic.w	r2, r3, #16
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f023 0320 	bic.w	r3, r3, #32
 800562e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a22      	ldr	r2, [pc, #136]	; (80056c8 <TIM_OC2_SetConfig+0xe4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_OC2_SetConfig+0x68>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a21      	ldr	r2, [pc, #132]	; (80056cc <TIM_OC2_SetConfig+0xe8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d10d      	bne.n	8005668 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005666:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a17      	ldr	r2, [pc, #92]	; (80056c8 <TIM_OC2_SetConfig+0xe4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_OC2_SetConfig+0x94>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a16      	ldr	r2, [pc, #88]	; (80056cc <TIM_OC2_SetConfig+0xe8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d113      	bne.n	80056a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800567e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40010400 	.word	0x40010400

080056d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a21      	ldr	r2, [pc, #132]	; (80057b0 <TIM_OC3_SetConfig+0xe0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d003      	beq.n	8005736 <TIM_OC3_SetConfig+0x66>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a20      	ldr	r2, [pc, #128]	; (80057b4 <TIM_OC3_SetConfig+0xe4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d10d      	bne.n	8005752 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800573c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <TIM_OC3_SetConfig+0xe0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_OC3_SetConfig+0x92>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <TIM_OC3_SetConfig+0xe4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d113      	bne.n	800578a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	621a      	str	r2, [r3, #32]
}
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40010400 	.word	0x40010400

080057b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	031b      	lsls	r3, r3, #12
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a12      	ldr	r2, [pc, #72]	; (800585c <TIM_OC4_SetConfig+0xa4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_OC4_SetConfig+0x68>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a11      	ldr	r2, [pc, #68]	; (8005860 <TIM_OC4_SetConfig+0xa8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d109      	bne.n	8005834 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	019b      	lsls	r3, r3, #6
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40010000 	.word	0x40010000
 8005860:	40010400 	.word	0x40010400

08005864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0201 	bic.w	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800588e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 030a 	bic.w	r3, r3, #10
 80058a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	621a      	str	r2, [r3, #32]
}
 80058b6:	bf00      	nop
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b087      	sub	sp, #28
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f023 0210 	bic.w	r2, r3, #16
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	031b      	lsls	r3, r3, #12
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	621a      	str	r2, [r3, #32]
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005922:	b480      	push	{r7}
 8005924:	b085      	sub	sp, #20
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	f043 0307 	orr.w	r3, r3, #7
 8005944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	609a      	str	r2, [r3, #8]
}
 800594c:	bf00      	nop
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	021a      	lsls	r2, r3, #8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	431a      	orrs	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4313      	orrs	r3, r2
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	609a      	str	r2, [r3, #8]
}
 800598c:	bf00      	nop
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	2201      	movs	r2, #1
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a1a      	ldr	r2, [r3, #32]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	43db      	mvns	r3, r3
 80059ba:	401a      	ands	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
 80059d0:	431a      	orrs	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e05a      	b.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a21      	ldr	r2, [pc, #132]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d022      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a48:	d01d      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d018      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1b      	ldr	r2, [pc, #108]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00e      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d009      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d10c      	bne.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40010000 	.word	0x40010000
 8005ac4:	40000400 	.word	0x40000400
 8005ac8:	40000800 	.word	0x40000800
 8005acc:	40000c00 	.word	0x40000c00
 8005ad0:	40010400 	.word	0x40010400
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40001800 	.word	0x40001800

08005adc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e03d      	b.n	8005b74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e03f      	b.n	8005c3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fc fbb2 	bl	8002338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2224      	movs	r2, #36	; 0x24
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f9cb 	bl	8005f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b08a      	sub	sp, #40	; 0x28
 8005c46:	af02      	add	r7, sp, #8
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d17c      	bne.n	8005d5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_UART_Transmit+0x2c>
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e075      	b.n	8005d5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_UART_Transmit+0x3e>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e06e      	b.n	8005d5e <HAL_UART_Transmit+0x11c>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2221      	movs	r2, #33	; 0x21
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c96:	f7fc fe0b 	bl	80028b0 <HAL_GetTick>
 8005c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb0:	d108      	bne.n	8005cc4 <HAL_UART_Transmit+0x82>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	e003      	b.n	8005ccc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005cd4:	e02a      	b.n	8005d2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2180      	movs	r1, #128	; 0x80
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f8e2 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e036      	b.n	8005d5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	3302      	adds	r3, #2
 8005d0a:	61bb      	str	r3, [r7, #24]
 8005d0c:	e007      	b.n	8005d1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	781a      	ldrb	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1cf      	bne.n	8005cd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2140      	movs	r1, #64	; 0x40
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f8b2 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e006      	b.n	8005d5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e000      	b.n	8005d5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d5c:	2302      	movs	r3, #2
  }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b08a      	sub	sp, #40	; 0x28
 8005d6a:	af02      	add	r7, sp, #8
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	f040 808c 	bne.w	8005ea0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_UART_Receive+0x2e>
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e084      	b.n	8005ea2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Receive+0x40>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e07d      	b.n	8005ea2 <HAL_UART_Receive+0x13c>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2222      	movs	r2, #34	; 0x22
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dc2:	f7fc fd75 	bl	80028b0 <HAL_GetTick>
 8005dc6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	88fa      	ldrh	r2, [r7, #6]
 8005dcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	88fa      	ldrh	r2, [r7, #6]
 8005dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ddc:	d108      	bne.n	8005df0 <HAL_UART_Receive+0x8a>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	e003      	b.n	8005df8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005e00:	e043      	b.n	8005e8a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f84c 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e042      	b.n	8005ea2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10c      	bne.n	8005e3c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	3302      	adds	r3, #2
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	e01f      	b.n	8005e7c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e44:	d007      	beq.n	8005e56 <HAL_UART_Receive+0xf0>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <HAL_UART_Receive+0xfe>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	e008      	b.n	8005e76 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1b6      	bne.n	8005e02 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e000      	b.n	8005ea2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005ea0:	2302      	movs	r3, #2
  }
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b090      	sub	sp, #64	; 0x40
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	603b      	str	r3, [r7, #0]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eba:	e050      	b.n	8005f5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d04c      	beq.n	8005f5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0x30>
 8005eca:	f7fc fcf1 	bl	80028b0 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d241      	bcs.n	8005f5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005efa:	637a      	str	r2, [r7, #52]	; 0x34
 8005efc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e5      	bne.n	8005eda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3314      	adds	r3, #20
 8005f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3314      	adds	r3, #20
 8005f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f2e:	623a      	str	r2, [r7, #32]
 8005f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	69f9      	ldr	r1, [r7, #28]
 8005f34:	6a3a      	ldr	r2, [r7, #32]
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e5      	bne.n	8005f0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e00f      	b.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4013      	ands	r3, r2
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	bf0c      	ite	eq
 8005f6e:	2301      	moveq	r3, #1
 8005f70:	2300      	movne	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d09f      	beq.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3740      	adds	r7, #64	; 0x40
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f8c:	b0c0      	sub	sp, #256	; 0x100
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa4:	68d9      	ldr	r1, [r3, #12]
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	ea40 0301 	orr.w	r3, r0, r1
 8005fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fe0:	f021 010c 	bic.w	r1, r1, #12
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fee:	430b      	orrs	r3, r1
 8005ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006002:	6999      	ldr	r1, [r3, #24]
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	ea40 0301 	orr.w	r3, r0, r1
 800600e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b8f      	ldr	r3, [pc, #572]	; (8006254 <UART_SetConfig+0x2cc>)
 8006018:	429a      	cmp	r2, r3
 800601a:	d005      	beq.n	8006028 <UART_SetConfig+0xa0>
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b8d      	ldr	r3, [pc, #564]	; (8006258 <UART_SetConfig+0x2d0>)
 8006024:	429a      	cmp	r2, r3
 8006026:	d104      	bne.n	8006032 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006028:	f7fe f968 	bl	80042fc <HAL_RCC_GetPCLK2Freq>
 800602c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006030:	e003      	b.n	800603a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006032:	f7fe f94f 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8006036:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006044:	f040 810c 	bne.w	8006260 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800604c:	2200      	movs	r2, #0
 800604e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006052:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006056:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800605a:	4622      	mov	r2, r4
 800605c:	462b      	mov	r3, r5
 800605e:	1891      	adds	r1, r2, r2
 8006060:	65b9      	str	r1, [r7, #88]	; 0x58
 8006062:	415b      	adcs	r3, r3
 8006064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006066:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800606a:	4621      	mov	r1, r4
 800606c:	eb12 0801 	adds.w	r8, r2, r1
 8006070:	4629      	mov	r1, r5
 8006072:	eb43 0901 	adc.w	r9, r3, r1
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800608a:	4690      	mov	r8, r2
 800608c:	4699      	mov	r9, r3
 800608e:	4623      	mov	r3, r4
 8006090:	eb18 0303 	adds.w	r3, r8, r3
 8006094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006098:	462b      	mov	r3, r5
 800609a:	eb49 0303 	adc.w	r3, r9, r3
 800609e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060b6:	460b      	mov	r3, r1
 80060b8:	18db      	adds	r3, r3, r3
 80060ba:	653b      	str	r3, [r7, #80]	; 0x50
 80060bc:	4613      	mov	r3, r2
 80060be:	eb42 0303 	adc.w	r3, r2, r3
 80060c2:	657b      	str	r3, [r7, #84]	; 0x54
 80060c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060cc:	f7fa f896 	bl	80001fc <__aeabi_uldivmod>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4b61      	ldr	r3, [pc, #388]	; (800625c <UART_SetConfig+0x2d4>)
 80060d6:	fba3 2302 	umull	r2, r3, r3, r2
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	011c      	lsls	r4, r3, #4
 80060de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060f0:	4642      	mov	r2, r8
 80060f2:	464b      	mov	r3, r9
 80060f4:	1891      	adds	r1, r2, r2
 80060f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80060f8:	415b      	adcs	r3, r3
 80060fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006100:	4641      	mov	r1, r8
 8006102:	eb12 0a01 	adds.w	sl, r2, r1
 8006106:	4649      	mov	r1, r9
 8006108:	eb43 0b01 	adc.w	fp, r3, r1
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006118:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800611c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006120:	4692      	mov	sl, r2
 8006122:	469b      	mov	fp, r3
 8006124:	4643      	mov	r3, r8
 8006126:	eb1a 0303 	adds.w	r3, sl, r3
 800612a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800612e:	464b      	mov	r3, r9
 8006130:	eb4b 0303 	adc.w	r3, fp, r3
 8006134:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006144:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006148:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800614c:	460b      	mov	r3, r1
 800614e:	18db      	adds	r3, r3, r3
 8006150:	643b      	str	r3, [r7, #64]	; 0x40
 8006152:	4613      	mov	r3, r2
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	647b      	str	r3, [r7, #68]	; 0x44
 800615a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800615e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006162:	f7fa f84b 	bl	80001fc <__aeabi_uldivmod>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4611      	mov	r1, r2
 800616c:	4b3b      	ldr	r3, [pc, #236]	; (800625c <UART_SetConfig+0x2d4>)
 800616e:	fba3 2301 	umull	r2, r3, r3, r1
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	2264      	movs	r2, #100	; 0x64
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	1acb      	subs	r3, r1, r3
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006182:	4b36      	ldr	r3, [pc, #216]	; (800625c <UART_SetConfig+0x2d4>)
 8006184:	fba3 2302 	umull	r2, r3, r3, r2
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006190:	441c      	add	r4, r3
 8006192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006196:	2200      	movs	r2, #0
 8006198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800619c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061a4:	4642      	mov	r2, r8
 80061a6:	464b      	mov	r3, r9
 80061a8:	1891      	adds	r1, r2, r2
 80061aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80061ac:	415b      	adcs	r3, r3
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061b4:	4641      	mov	r1, r8
 80061b6:	1851      	adds	r1, r2, r1
 80061b8:	6339      	str	r1, [r7, #48]	; 0x30
 80061ba:	4649      	mov	r1, r9
 80061bc:	414b      	adcs	r3, r1
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061cc:	4659      	mov	r1, fp
 80061ce:	00cb      	lsls	r3, r1, #3
 80061d0:	4651      	mov	r1, sl
 80061d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061d6:	4651      	mov	r1, sl
 80061d8:	00ca      	lsls	r2, r1, #3
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	4642      	mov	r2, r8
 80061e2:	189b      	adds	r3, r3, r2
 80061e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061e8:	464b      	mov	r3, r9
 80061ea:	460a      	mov	r2, r1
 80061ec:	eb42 0303 	adc.w	r3, r2, r3
 80061f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006200:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006204:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006208:	460b      	mov	r3, r1
 800620a:	18db      	adds	r3, r3, r3
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
 800620e:	4613      	mov	r3, r2
 8006210:	eb42 0303 	adc.w	r3, r2, r3
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800621a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800621e:	f7f9 ffed 	bl	80001fc <__aeabi_uldivmod>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4b0d      	ldr	r3, [pc, #52]	; (800625c <UART_SetConfig+0x2d4>)
 8006228:	fba3 1302 	umull	r1, r3, r3, r2
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	2164      	movs	r1, #100	; 0x64
 8006230:	fb01 f303 	mul.w	r3, r1, r3
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	3332      	adds	r3, #50	; 0x32
 800623a:	4a08      	ldr	r2, [pc, #32]	; (800625c <UART_SetConfig+0x2d4>)
 800623c:	fba2 2303 	umull	r2, r3, r2, r3
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	f003 0207 	and.w	r2, r3, #7
 8006246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4422      	add	r2, r4
 800624e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006250:	e105      	b.n	800645e <UART_SetConfig+0x4d6>
 8006252:	bf00      	nop
 8006254:	40011000 	.word	0x40011000
 8006258:	40011400 	.word	0x40011400
 800625c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006264:	2200      	movs	r2, #0
 8006266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800626a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800626e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006272:	4642      	mov	r2, r8
 8006274:	464b      	mov	r3, r9
 8006276:	1891      	adds	r1, r2, r2
 8006278:	6239      	str	r1, [r7, #32]
 800627a:	415b      	adcs	r3, r3
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
 800627e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006282:	4641      	mov	r1, r8
 8006284:	1854      	adds	r4, r2, r1
 8006286:	4649      	mov	r1, r9
 8006288:	eb43 0501 	adc.w	r5, r3, r1
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	00eb      	lsls	r3, r5, #3
 8006296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800629a:	00e2      	lsls	r2, r4, #3
 800629c:	4614      	mov	r4, r2
 800629e:	461d      	mov	r5, r3
 80062a0:	4643      	mov	r3, r8
 80062a2:	18e3      	adds	r3, r4, r3
 80062a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062a8:	464b      	mov	r3, r9
 80062aa:	eb45 0303 	adc.w	r3, r5, r3
 80062ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062ce:	4629      	mov	r1, r5
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	4621      	mov	r1, r4
 80062d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062d8:	4621      	mov	r1, r4
 80062da:	008a      	lsls	r2, r1, #2
 80062dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062e0:	f7f9 ff8c 	bl	80001fc <__aeabi_uldivmod>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4b60      	ldr	r3, [pc, #384]	; (800646c <UART_SetConfig+0x4e4>)
 80062ea:	fba3 2302 	umull	r2, r3, r3, r2
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	011c      	lsls	r4, r3, #4
 80062f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006300:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006304:	4642      	mov	r2, r8
 8006306:	464b      	mov	r3, r9
 8006308:	1891      	adds	r1, r2, r2
 800630a:	61b9      	str	r1, [r7, #24]
 800630c:	415b      	adcs	r3, r3
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006314:	4641      	mov	r1, r8
 8006316:	1851      	adds	r1, r2, r1
 8006318:	6139      	str	r1, [r7, #16]
 800631a:	4649      	mov	r1, r9
 800631c:	414b      	adcs	r3, r1
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800632c:	4659      	mov	r1, fp
 800632e:	00cb      	lsls	r3, r1, #3
 8006330:	4651      	mov	r1, sl
 8006332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006336:	4651      	mov	r1, sl
 8006338:	00ca      	lsls	r2, r1, #3
 800633a:	4610      	mov	r0, r2
 800633c:	4619      	mov	r1, r3
 800633e:	4603      	mov	r3, r0
 8006340:	4642      	mov	r2, r8
 8006342:	189b      	adds	r3, r3, r2
 8006344:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006348:	464b      	mov	r3, r9
 800634a:	460a      	mov	r2, r1
 800634c:	eb42 0303 	adc.w	r3, r2, r3
 8006350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	67bb      	str	r3, [r7, #120]	; 0x78
 800635e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800636c:	4649      	mov	r1, r9
 800636e:	008b      	lsls	r3, r1, #2
 8006370:	4641      	mov	r1, r8
 8006372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006376:	4641      	mov	r1, r8
 8006378:	008a      	lsls	r2, r1, #2
 800637a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800637e:	f7f9 ff3d 	bl	80001fc <__aeabi_uldivmod>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4b39      	ldr	r3, [pc, #228]	; (800646c <UART_SetConfig+0x4e4>)
 8006388:	fba3 1302 	umull	r1, r3, r3, r2
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	2164      	movs	r1, #100	; 0x64
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	3332      	adds	r3, #50	; 0x32
 800639a:	4a34      	ldr	r2, [pc, #208]	; (800646c <UART_SetConfig+0x4e4>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063a6:	441c      	add	r4, r3
 80063a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ac:	2200      	movs	r2, #0
 80063ae:	673b      	str	r3, [r7, #112]	; 0x70
 80063b0:	677a      	str	r2, [r7, #116]	; 0x74
 80063b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063b6:	4642      	mov	r2, r8
 80063b8:	464b      	mov	r3, r9
 80063ba:	1891      	adds	r1, r2, r2
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	415b      	adcs	r3, r3
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063c6:	4641      	mov	r1, r8
 80063c8:	1851      	adds	r1, r2, r1
 80063ca:	6039      	str	r1, [r7, #0]
 80063cc:	4649      	mov	r1, r9
 80063ce:	414b      	adcs	r3, r1
 80063d0:	607b      	str	r3, [r7, #4]
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063de:	4659      	mov	r1, fp
 80063e0:	00cb      	lsls	r3, r1, #3
 80063e2:	4651      	mov	r1, sl
 80063e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063e8:	4651      	mov	r1, sl
 80063ea:	00ca      	lsls	r2, r1, #3
 80063ec:	4610      	mov	r0, r2
 80063ee:	4619      	mov	r1, r3
 80063f0:	4603      	mov	r3, r0
 80063f2:	4642      	mov	r2, r8
 80063f4:	189b      	adds	r3, r3, r2
 80063f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f8:	464b      	mov	r3, r9
 80063fa:	460a      	mov	r2, r1
 80063fc:	eb42 0303 	adc.w	r3, r2, r3
 8006400:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	663b      	str	r3, [r7, #96]	; 0x60
 800640c:	667a      	str	r2, [r7, #100]	; 0x64
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800641a:	4649      	mov	r1, r9
 800641c:	008b      	lsls	r3, r1, #2
 800641e:	4641      	mov	r1, r8
 8006420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006424:	4641      	mov	r1, r8
 8006426:	008a      	lsls	r2, r1, #2
 8006428:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800642c:	f7f9 fee6 	bl	80001fc <__aeabi_uldivmod>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4b0d      	ldr	r3, [pc, #52]	; (800646c <UART_SetConfig+0x4e4>)
 8006436:	fba3 1302 	umull	r1, r3, r3, r2
 800643a:	095b      	lsrs	r3, r3, #5
 800643c:	2164      	movs	r1, #100	; 0x64
 800643e:	fb01 f303 	mul.w	r3, r1, r3
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	3332      	adds	r3, #50	; 0x32
 8006448:	4a08      	ldr	r2, [pc, #32]	; (800646c <UART_SetConfig+0x4e4>)
 800644a:	fba2 2303 	umull	r2, r3, r2, r3
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	f003 020f 	and.w	r2, r3, #15
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4422      	add	r2, r4
 800645c:	609a      	str	r2, [r3, #8]
}
 800645e:	bf00      	nop
 8006460:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006464:	46bd      	mov	sp, r7
 8006466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800646a:	bf00      	nop
 800646c:	51eb851f 	.word	0x51eb851f

08006470 <atoi>:
 8006470:	220a      	movs	r2, #10
 8006472:	2100      	movs	r1, #0
 8006474:	f000 b8b4 	b.w	80065e0 <strtol>

08006478 <__errno>:
 8006478:	4b01      	ldr	r3, [pc, #4]	; (8006480 <__errno+0x8>)
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	2000000c 	.word	0x2000000c

08006484 <__libc_init_array>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	4d0d      	ldr	r5, [pc, #52]	; (80064bc <__libc_init_array+0x38>)
 8006488:	4c0d      	ldr	r4, [pc, #52]	; (80064c0 <__libc_init_array+0x3c>)
 800648a:	1b64      	subs	r4, r4, r5
 800648c:	10a4      	asrs	r4, r4, #2
 800648e:	2600      	movs	r6, #0
 8006490:	42a6      	cmp	r6, r4
 8006492:	d109      	bne.n	80064a8 <__libc_init_array+0x24>
 8006494:	4d0b      	ldr	r5, [pc, #44]	; (80064c4 <__libc_init_array+0x40>)
 8006496:	4c0c      	ldr	r4, [pc, #48]	; (80064c8 <__libc_init_array+0x44>)
 8006498:	f000 f8ac 	bl	80065f4 <_init>
 800649c:	1b64      	subs	r4, r4, r5
 800649e:	10a4      	asrs	r4, r4, #2
 80064a0:	2600      	movs	r6, #0
 80064a2:	42a6      	cmp	r6, r4
 80064a4:	d105      	bne.n	80064b2 <__libc_init_array+0x2e>
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ac:	4798      	blx	r3
 80064ae:	3601      	adds	r6, #1
 80064b0:	e7ee      	b.n	8006490 <__libc_init_array+0xc>
 80064b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b6:	4798      	blx	r3
 80064b8:	3601      	adds	r6, #1
 80064ba:	e7f2      	b.n	80064a2 <__libc_init_array+0x1e>
 80064bc:	08006d94 	.word	0x08006d94
 80064c0:	08006d94 	.word	0x08006d94
 80064c4:	08006d94 	.word	0x08006d94
 80064c8:	08006d98 	.word	0x08006d98

080064cc <memset>:
 80064cc:	4402      	add	r2, r0
 80064ce:	4603      	mov	r3, r0
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d100      	bne.n	80064d6 <memset+0xa>
 80064d4:	4770      	bx	lr
 80064d6:	f803 1b01 	strb.w	r1, [r3], #1
 80064da:	e7f9      	b.n	80064d0 <memset+0x4>

080064dc <_strtol_l.constprop.0>:
 80064dc:	2b01      	cmp	r3, #1
 80064de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e2:	d001      	beq.n	80064e8 <_strtol_l.constprop.0+0xc>
 80064e4:	2b24      	cmp	r3, #36	; 0x24
 80064e6:	d906      	bls.n	80064f6 <_strtol_l.constprop.0+0x1a>
 80064e8:	f7ff ffc6 	bl	8006478 <__errno>
 80064ec:	2316      	movs	r3, #22
 80064ee:	6003      	str	r3, [r0, #0]
 80064f0:	2000      	movs	r0, #0
 80064f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80065dc <_strtol_l.constprop.0+0x100>
 80064fa:	460d      	mov	r5, r1
 80064fc:	462e      	mov	r6, r5
 80064fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006502:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006506:	f017 0708 	ands.w	r7, r7, #8
 800650a:	d1f7      	bne.n	80064fc <_strtol_l.constprop.0+0x20>
 800650c:	2c2d      	cmp	r4, #45	; 0x2d
 800650e:	d132      	bne.n	8006576 <_strtol_l.constprop.0+0x9a>
 8006510:	782c      	ldrb	r4, [r5, #0]
 8006512:	2701      	movs	r7, #1
 8006514:	1cb5      	adds	r5, r6, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d05b      	beq.n	80065d2 <_strtol_l.constprop.0+0xf6>
 800651a:	2b10      	cmp	r3, #16
 800651c:	d109      	bne.n	8006532 <_strtol_l.constprop.0+0x56>
 800651e:	2c30      	cmp	r4, #48	; 0x30
 8006520:	d107      	bne.n	8006532 <_strtol_l.constprop.0+0x56>
 8006522:	782c      	ldrb	r4, [r5, #0]
 8006524:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006528:	2c58      	cmp	r4, #88	; 0x58
 800652a:	d14d      	bne.n	80065c8 <_strtol_l.constprop.0+0xec>
 800652c:	786c      	ldrb	r4, [r5, #1]
 800652e:	2310      	movs	r3, #16
 8006530:	3502      	adds	r5, #2
 8006532:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006536:	f108 38ff 	add.w	r8, r8, #4294967295
 800653a:	f04f 0c00 	mov.w	ip, #0
 800653e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006542:	4666      	mov	r6, ip
 8006544:	fb03 8a19 	mls	sl, r3, r9, r8
 8006548:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800654c:	f1be 0f09 	cmp.w	lr, #9
 8006550:	d816      	bhi.n	8006580 <_strtol_l.constprop.0+0xa4>
 8006552:	4674      	mov	r4, lr
 8006554:	42a3      	cmp	r3, r4
 8006556:	dd24      	ble.n	80065a2 <_strtol_l.constprop.0+0xc6>
 8006558:	f1bc 0f00 	cmp.w	ip, #0
 800655c:	db1e      	blt.n	800659c <_strtol_l.constprop.0+0xc0>
 800655e:	45b1      	cmp	r9, r6
 8006560:	d31c      	bcc.n	800659c <_strtol_l.constprop.0+0xc0>
 8006562:	d101      	bne.n	8006568 <_strtol_l.constprop.0+0x8c>
 8006564:	45a2      	cmp	sl, r4
 8006566:	db19      	blt.n	800659c <_strtol_l.constprop.0+0xc0>
 8006568:	fb06 4603 	mla	r6, r6, r3, r4
 800656c:	f04f 0c01 	mov.w	ip, #1
 8006570:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006574:	e7e8      	b.n	8006548 <_strtol_l.constprop.0+0x6c>
 8006576:	2c2b      	cmp	r4, #43	; 0x2b
 8006578:	bf04      	itt	eq
 800657a:	782c      	ldrbeq	r4, [r5, #0]
 800657c:	1cb5      	addeq	r5, r6, #2
 800657e:	e7ca      	b.n	8006516 <_strtol_l.constprop.0+0x3a>
 8006580:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006584:	f1be 0f19 	cmp.w	lr, #25
 8006588:	d801      	bhi.n	800658e <_strtol_l.constprop.0+0xb2>
 800658a:	3c37      	subs	r4, #55	; 0x37
 800658c:	e7e2      	b.n	8006554 <_strtol_l.constprop.0+0x78>
 800658e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006592:	f1be 0f19 	cmp.w	lr, #25
 8006596:	d804      	bhi.n	80065a2 <_strtol_l.constprop.0+0xc6>
 8006598:	3c57      	subs	r4, #87	; 0x57
 800659a:	e7db      	b.n	8006554 <_strtol_l.constprop.0+0x78>
 800659c:	f04f 3cff 	mov.w	ip, #4294967295
 80065a0:	e7e6      	b.n	8006570 <_strtol_l.constprop.0+0x94>
 80065a2:	f1bc 0f00 	cmp.w	ip, #0
 80065a6:	da05      	bge.n	80065b4 <_strtol_l.constprop.0+0xd8>
 80065a8:	2322      	movs	r3, #34	; 0x22
 80065aa:	6003      	str	r3, [r0, #0]
 80065ac:	4646      	mov	r6, r8
 80065ae:	b942      	cbnz	r2, 80065c2 <_strtol_l.constprop.0+0xe6>
 80065b0:	4630      	mov	r0, r6
 80065b2:	e79e      	b.n	80064f2 <_strtol_l.constprop.0+0x16>
 80065b4:	b107      	cbz	r7, 80065b8 <_strtol_l.constprop.0+0xdc>
 80065b6:	4276      	negs	r6, r6
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	d0f9      	beq.n	80065b0 <_strtol_l.constprop.0+0xd4>
 80065bc:	f1bc 0f00 	cmp.w	ip, #0
 80065c0:	d000      	beq.n	80065c4 <_strtol_l.constprop.0+0xe8>
 80065c2:	1e69      	subs	r1, r5, #1
 80065c4:	6011      	str	r1, [r2, #0]
 80065c6:	e7f3      	b.n	80065b0 <_strtol_l.constprop.0+0xd4>
 80065c8:	2430      	movs	r4, #48	; 0x30
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1b1      	bne.n	8006532 <_strtol_l.constprop.0+0x56>
 80065ce:	2308      	movs	r3, #8
 80065d0:	e7af      	b.n	8006532 <_strtol_l.constprop.0+0x56>
 80065d2:	2c30      	cmp	r4, #48	; 0x30
 80065d4:	d0a5      	beq.n	8006522 <_strtol_l.constprop.0+0x46>
 80065d6:	230a      	movs	r3, #10
 80065d8:	e7ab      	b.n	8006532 <_strtol_l.constprop.0+0x56>
 80065da:	bf00      	nop
 80065dc:	08006c89 	.word	0x08006c89

080065e0 <strtol>:
 80065e0:	4613      	mov	r3, r2
 80065e2:	460a      	mov	r2, r1
 80065e4:	4601      	mov	r1, r0
 80065e6:	4802      	ldr	r0, [pc, #8]	; (80065f0 <strtol+0x10>)
 80065e8:	6800      	ldr	r0, [r0, #0]
 80065ea:	f7ff bf77 	b.w	80064dc <_strtol_l.constprop.0>
 80065ee:	bf00      	nop
 80065f0:	2000000c 	.word	0x2000000c

080065f4 <_init>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr

08006600 <_fini>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr
