
Servo_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000407c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  08004228  08004228  00014228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004794  08004794  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800479c  0800479c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000017c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011083  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000278b  00000000  00000000  00031123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  000338b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e40  00000000  00000000  000347f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002737d  00000000  00000000  00035638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000128bf  00000000  00000000  0005c9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0455  00000000  00000000  0006f274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014f6c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fe4  00000000  00000000  0014f71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004210 	.word	0x08004210

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08004210 	.word	0x08004210

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <_ZL19ConsoleCommandMatchPKcS0_>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4413      	add	r3, r2
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	440b      	add	r3, r1
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	429a      	cmp	r2, r3
 8000524:	d104      	bne.n	8000530 <_ZL19ConsoleCommandMatchPKcS0_+0x30>
	{
		result = 1u;
 8000526:	2301      	movs	r3, #1
 8000528:	60bb      	str	r3, [r7, #8]
		i++;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d12a      	bne.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
	while ( ( 1u == result ) &&
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2b09      	cmp	r3, #9
 800053a:	d827      	bhi.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000544:	2b20      	cmp	r3, #32
 8000546:	d021      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000550:	2b0a      	cmp	r3, #10
 8000552:	d01b      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b0d      	cmp	r3, #13
 800055e:	d015      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00f      	beq.n	800058c <_ZL19ConsoleCommandMatchPKcS0_+0x8c>
		)
	{
		if ( buffer[i] != name[i] )
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	4413      	add	r3, r2
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	440b      	add	r3, r1
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	d001      	beq.n	8000584 <_ZL19ConsoleCommandMatchPKcS0_+0x84>
		{
			result = 0u;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 800058a:	e7d1      	b.n	8000530 <_ZL19ConsoleCommandMatchPKcS0_+0x30>
	}

	return result;
 800058c:	68bb      	ldr	r3, [r7, #8]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <_ZL18ConsoleResetBufferPcmm>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800059a:	b480      	push	{r7}
 800059c:	b087      	sub	sp, #28
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d20e      	bcs.n	80005d8 <_ZL18ConsoleResetBufferPcmm+0x3e>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	441a      	add	r2, r3
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	440b      	add	r3, r1
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	701a      	strb	r2, [r3, #0]
		i++;
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3301      	adds	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 80005d6:	e7ec      	b.n	80005b2 <_ZL18ConsoleResetBufferPcmm+0x18>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2bff      	cmp	r3, #255	; 0xff
 80005dc:	d808      	bhi.n	80005f0 <_ZL18ConsoleResetBufferPcmm+0x56>
	{
		receiveBuffer[i] =  NULL_CHAR;
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	4413      	add	r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e7f3      	b.n	80005d8 <_ZL18ConsoleResetBufferPcmm+0x3e>
	}
	return remaining;
 80005f0:	693b      	ldr	r3, [r7, #16]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_ZL21ConsoleCommandEndlinePKcm>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
			&& ( i < filledLength ) )
 800061a:	2b0d      	cmp	r3, #13
 800061c:	d00d      	beq.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b0a      	cmp	r3, #10
 8000628:	d007      	beq.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
			&& ( i < filledLength ) )
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	429a      	cmp	r2, r3
 8000630:	d203      	bcs.n	800063a <_ZL21ConsoleCommandEndlinePKcm+0x3c>
	{
		i++;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000638:	e7eb      	b.n	8000612 <_ZL21ConsoleCommandEndlinePKcm+0x14>
	}
	if ( i < filledLength )
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d201      	bcs.n	8000646 <_ZL21ConsoleCommandEndlinePKcm+0x48>
	{
		result = i;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000646:	68bb      	ldr	r3, [r7, #8]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 800065a:	f000 fc2b 	bl	8000eb4 <_Z13ConsoleIoInitv>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");	
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <ConsoleInit+0x48>)
 8000660:	f000 fc72 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(STR_ENDLINE);
 8000664:	480e      	ldr	r0, [pc, #56]	; (80006a0 <ConsoleInit+0x4c>)
 8000666:	f000 fc6f 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(CONSOLE_PROMPT);
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <ConsoleInit+0x50>)
 800066c:	f000 fc6c 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
	mReceivedSoFar = 0u;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <ConsoleInit+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2bff      	cmp	r3, #255	; 0xff
 800067e:	d808      	bhi.n	8000692 <ConsoleInit+0x3e>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <ConsoleInit+0x58>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	e7f3      	b.n	800067a <ConsoleInit+0x26>
	}

}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	08004228 	.word	0x08004228
 80006a0:	08004270 	.word	0x08004270
 80006a4:	08004274 	.word	0x08004274
 80006a8:	2000018c 	.word	0x2000018c
 80006ac:	2000008c 	.word	0x2000008c

080006b0 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 80006b6:	4b57      	ldr	r3, [pc, #348]	; (8000814 <ConsoleProcess+0x164>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a57      	ldr	r2, [pc, #348]	; (8000818 <ConsoleProcess+0x168>)
 80006bc:	1898      	adds	r0, r3, r2
 80006be:	4b55      	ldr	r3, [pc, #340]	; (8000814 <ConsoleProcess+0x164>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80006c6:	463a      	mov	r2, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	f000 fc23 	bl	8000f14 <_Z16ConsoleIoReceivePhmPm>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d104      	bne.n	80006de <ConsoleProcess+0x2e>
 80006d4:	4b51      	ldr	r3, [pc, #324]	; (800081c <ConsoleProcess+0x16c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	f000 8097 	beq.w	800080c <ConsoleProcess+0x15c>
	{
		mReceiveBufferNeedsChecking = false;
 80006de:	4b4f      	ldr	r3, [pc, #316]	; (800081c <ConsoleProcess+0x16c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 80006e4:	4b4b      	ldr	r3, [pc, #300]	; (8000814 <ConsoleProcess+0x164>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a49      	ldr	r2, [pc, #292]	; (8000814 <ConsoleProcess+0x164>)
 80006ee:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 80006f0:	4b48      	ldr	r3, [pc, #288]	; (8000814 <ConsoleProcess+0x164>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	4848      	ldr	r0, [pc, #288]	; (8000818 <ConsoleProcess+0x168>)
 80006f8:	f7ff ff81 	bl	80005fe <_ZL21ConsoleCommandEndlinePKcm>
 80006fc:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	f2c0 8083 	blt.w	800080c <ConsoleProcess+0x15c>
		{
			commandTable = ConsoleCommandsGetTable();
 8000706:	f000 fbcb 	bl	8000ea0 <_Z23ConsoleCommandsGetTablev>
 800070a:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	4613      	mov	r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	4413      	add	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	461a      	mov	r2, r3
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4413      	add	r3, r2
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d047      	beq.n	80007bc <ConsoleProcess+0x10c>
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000732:	d143      	bne.n	80007bc <ConsoleProcess+0x10c>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	4613      	mov	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4413      	add	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	461a      	mov	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4413      	add	r3, r2
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4934      	ldr	r1, [pc, #208]	; (8000818 <ConsoleProcess+0x168>)
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fed9 	bl	8000500 <_ZL19ConsoleCommandMatchPKcS0_>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf14      	ite	ne
 8000754:	2301      	movne	r3, #1
 8000756:	2300      	moveq	r3, #0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d02a      	beq.n	80007b4 <ConsoleProcess+0x104>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	4613      	mov	r3, r2
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	4413      	add	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	461a      	mov	r2, r3
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	4413      	add	r3, r2
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	4829      	ldr	r0, [pc, #164]	; (8000818 <ConsoleProcess+0x168>)
 8000772:	4798      	blx	r3
 8000774:	4603      	mov	r3, r0
 8000776:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d017      	beq.n	80007ae <ConsoleProcess+0xfe>
					{
						ConsoleIoSendString("Error: ");
 800077e:	4828      	ldr	r0, [pc, #160]	; (8000820 <ConsoleProcess+0x170>)
 8000780:	f000 fbe2 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(mReceiveBuffer);
 8000784:	4824      	ldr	r0, [pc, #144]	; (8000818 <ConsoleProcess+0x168>)
 8000786:	f000 fbdf 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>

						ConsoleIoSendString("Help: ");
 800078a:	4826      	ldr	r0, [pc, #152]	; (8000824 <ConsoleProcess+0x174>)
 800078c:	f000 fbdc 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	4613      	mov	r3, r2
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	4413      	add	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	461a      	mov	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	4413      	add	r3, r2
 80007a0:	3308      	adds	r3, #8
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fbd0 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
						ConsoleIoSendString(STR_ENDLINE);
 80007a8:	481f      	ldr	r0, [pc, #124]	; (8000828 <ConsoleProcess+0x178>)
 80007aa:	f000 fbcd 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>

					}
					found = cmdIndex;
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	e7b0      	b.n	8000716 <ConsoleProcess+0x66>
				}
				else
				{
					cmdIndex++;
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	3301      	adds	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ba:	e7ac      	b.n	8000716 <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00d      	beq.n	80007de <ConsoleProcess+0x12e>
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c8:	d109      	bne.n	80007de <ConsoleProcess+0x12e>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <ConsoleProcess+0x164>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d905      	bls.n	80007de <ConsoleProcess+0x12e>
				{
					ConsoleIoSendString("Command not found.");
 80007d2:	4816      	ldr	r0, [pc, #88]	; (800082c <ConsoleProcess+0x17c>)
 80007d4:	f000 fbb8 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
					ConsoleIoSendString(STR_ENDLINE);
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <ConsoleProcess+0x178>)
 80007da:	f000 fbb5 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <ConsoleProcess+0x164>)
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	3301      	adds	r3, #1
 80007e6:	461a      	mov	r2, r3
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <ConsoleProcess+0x168>)
 80007ea:	f7ff fed6 	bl	800059a <_ZL18ConsoleResetBufferPcmm>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a08      	ldr	r2, [pc, #32]	; (8000814 <ConsoleProcess+0x164>)
 80007f2:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <ConsoleProcess+0x164>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf14      	ite	ne
 80007fc:	2301      	movne	r3, #1
 80007fe:	2300      	moveq	r3, #0
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <ConsoleProcess+0x16c>)
 8000804:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000806:	480a      	ldr	r0, [pc, #40]	; (8000830 <ConsoleProcess+0x180>)
 8000808:	f000 fb9e 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
		}
	}
}
 800080c:	bf00      	nop
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000018c 	.word	0x2000018c
 8000818:	2000008c 	.word	0x2000008c
 800081c:	20000190 	.word	0x20000190
 8000820:	08004278 	.word	0x08004278
 8000824:	08004280 	.word	0x08004280
 8000828:	08004270 	.word	0x08004270
 800082c:	08004288 	.word	0x08004288
 8000830:	08004274 	.word	0x08004274

08000834 <_ZL17ConsoleParamFindNPKchPm>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	460b      	mov	r3, r1
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800084a:	2300      	movs	r3, #0
 800084c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800084e:	7afb      	ldrb	r3, [r7, #11]
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	429a      	cmp	r2, r3
 8000854:	d00f      	beq.n	8000876 <_ZL17ConsoleParamFindNPKchPm+0x42>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	2bff      	cmp	r3, #255	; 0xff
 800085a:	d80c      	bhi.n	8000876 <_ZL17ConsoleParamFindNPKchPm+0x42>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b20      	cmp	r3, #32
 8000866:	d102      	bne.n	800086e <_ZL17ConsoleParamFindNPKchPm+0x3a>
		{
			parameterIndex++;
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	3301      	adds	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3301      	adds	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000874:	e7eb      	b.n	800084e <_ZL17ConsoleParamFindNPKchPm+0x1a>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800087c:	d102      	bne.n	8000884 <_ZL17ConsoleParamFindNPKchPm+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800087e:	2310      	movs	r3, #16
 8000880:	75fb      	strb	r3, [r7, #23]
 8000882:	e002      	b.n	800088a <_ZL17ConsoleParamFindNPKchPm+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69fa      	ldr	r2, [r7, #28]
 8000888:	601a      	str	r2, [r3, #0]
	}
	return result;
 800088a:	7dfb      	ldrb	r3, [r7, #23]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3724      	adds	r7, #36	; 0x24
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	460b      	mov	r3, r1
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80008aa:	f107 021c 	add.w	r2, r7, #28
 80008ae:	7afb      	ldrb	r3, [r7, #11]
 80008b0:	4619      	mov	r1, r3
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f7ff ffbe 	bl	8000834 <_ZL17ConsoleParamFindNPKchPm>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	4413      	add	r3, r2
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80008d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008d6:	2b0a      	cmp	r3, #10
 80008d8:	d01d      	beq.n	8000916 <ConsoleReceiveParamInt16+0x7e>
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 80008da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008de:	2b0d      	cmp	r3, #13
 80008e0:	d019      	beq.n	8000916 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 80008e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008e6:	2b20      	cmp	r3, #32
 80008e8:	d015      	beq.n	8000916 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	2b07      	cmp	r3, #7
 80008ee:	d812      	bhi.n	8000916 <ConsoleReceiveParamInt16+0x7e>
	{
		str[i] = charVal;					// copy the relevant part
 80008f0:	f107 0214 	add.w	r2, r7, #20
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	4413      	add	r3, r2
 80008f8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80008fc:	701a      	strb	r2, [r3, #0]
		i++;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	3301      	adds	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000904:	69fa      	ldr	r2, [r7, #28]
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	4413      	add	r3, r2
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4413      	add	r3, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000914:	e7dd      	b.n	80008d2 <ConsoleReceiveParamInt16+0x3a>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	2b08      	cmp	r3, #8
 800091a:	d102      	bne.n	8000922 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 800091c:	2310      	movs	r3, #16
 800091e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10e      	bne.n	8000948 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 800092a:	f107 0214 	add.w	r2, r7, #20
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	4413      	add	r3, r2
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fba6 	bl	800408c <atoi>
 8000940:	4603      	mov	r3, r0
 8000942:	b21a      	sxth	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800094c:	4618      	mov	r0, r3
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	460b      	mov	r3, r1
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800096a:	f107 0218 	add.w	r2, r7, #24
 800096e:	7afb      	ldrb	r3, [r7, #11]
 8000970:	4619      	mov	r1, r3
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f7ff ff5e 	bl	8000834 <_ZL17ConsoleParamFindNPKchPm>
 8000978:	4603      	mov	r3, r0
 800097a:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 800097c:	7ffb      	ldrb	r3, [r7, #31]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d12c      	bne.n	80009dc <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d81f      	bhi.n	80009cc <ConsoleReceiveParamHexUint16+0x78>
		{
			if ( COMMAND_SUCCESS == result )
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d10d      	bne.n	80009ae <ConsoleReceiveParamHexUint16+0x5a>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	6a3b      	ldr	r3, [r7, #32]
 8000996:	4413      	add	r3, r2
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	f107 0217 	add.w	r2, r7, #23
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f8c9 	bl	8000b3c <_ZL23ConsoleUtilHexCharToIntcPh>
 80009aa:	4603      	mov	r3, r0
 80009ac:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d107      	bne.n	80009c4 <ConsoleReceiveParamHexUint16+0x70>
			{
				value = (value << 4u);
 80009b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 80009ba:	7dfb      	ldrb	r3, [r7, #23]
 80009bc:	b29a      	uxth	r2, r3
 80009be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009c0:	4413      	add	r3, r2
 80009c2:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80009c4:	6a3b      	ldr	r3, [r7, #32]
 80009c6:	3301      	adds	r3, #1
 80009c8:	623b      	str	r3, [r7, #32]
 80009ca:	e7dc      	b.n	8000986 <ConsoleReceiveParamHexUint16+0x32>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	2b11      	cmp	r3, #17
 80009d0:	d101      	bne.n	80009d6 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 80009d2:	2300      	movs	r3, #0
 80009d4:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80009da:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 80009f0:	2300      	movs	r3, #0
 80009f2:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d81c      	bhi.n	8000a38 <ConsoleSendParamHexUint16+0x52>
	{
		if ( COMMAND_SUCCESS == result )
 80009fe:	7cfb      	ldrb	r3, [r7, #19]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d115      	bne.n	8000a30 <ConsoleSendParamHexUint16+0x4a>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f1c3 0303 	rsb	r3, r3, #3
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	fa42 f303 	asr.w	r3, r2, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f003 030f 	and.w	r3, r3, #15
 8000a18:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000a1a:	f107 020c 	add.w	r2, r7, #12
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	441a      	add	r2, r3
 8000a22:	7cbb      	ldrb	r3, [r7, #18]
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f8c9 	bl	8000bbe <_ZL24ConsoleUtilsIntToHexCharhPc>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	3301      	adds	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	e7df      	b.n	80009f8 <ConsoleSendParamHexUint16+0x12>
		}
	}
	out[i] = NULL_CHAR;
 8000a38:	f107 020c 	add.w	r2, r7, #12
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	4413      	add	r3, r2
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fa7d 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>

	return COMMAND_SUCCESS;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <_ZL9smallItoaiPci>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000a64:	2300      	movs	r3, #0
 8000a66:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000a68:	2301      	movs	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da07      	bge.n	8000a82 <_ZL9smallItoaiPci+0x2a>
		isNegative = true;
 8000a72:	2301      	movs	r3, #1
 8000a74:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	425b      	negs	r3, r3
 8000a7a:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d008      	beq.n	8000aa4 <_ZL9smallItoaiPci+0x4c>
		tmpIn = (int)tmpIn/radix;
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a9a:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000aa2:	e7f0      	b.n	8000a86 <_ZL9smallItoaiPci+0x2e>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	fb93 f2f2 	sdiv	r2, r3, r2
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	fb01 f202 	mul.w	r2, r1, r2
 8000ac6:	1a9b      	subs	r3, r3, r2
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	440b      	add	r3, r1
 8000ad0:	3230      	adds	r2, #48	; 0x30
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ade:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	1e5a      	subs	r2, r3, #1
 8000ae4:	617a      	str	r2, [r7, #20]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d000      	beq.n	8000af6 <_ZL9smallItoaiPci+0x9e>
	do {
 8000af4:	e7e0      	b.n	8000ab8 <_ZL9smallItoaiPci+0x60>

	if (isNegative) {
 8000af6:	7ffb      	ldrb	r3, [r7, #31]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <_ZL9smallItoaiPci+0xaa>
		*(outBuffer) = '-';
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	222d      	movs	r2, #45	; 0x2d
 8000b00:	701a      	strb	r2, [r3, #0]
	}
}
 8000b02:	bf00      	nop
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b084      	sub	sp, #16
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b1c:	f107 0108 	add.w	r1, r7, #8
 8000b20:	220a      	movs	r2, #10
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ff98 	bl	8000a58 <_ZL9smallItoaiPci>
	ConsoleIoSendString(out);
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 fa0b 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>

	return COMMAND_SUCCESS;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_ZL23ConsoleUtilHexCharToIntcPh>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b2f      	cmp	r3, #47	; 0x2f
 8000b50:	d908      	bls.n	8000b64 <_ZL23ConsoleUtilHexCharToIntcPh+0x28>
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b39      	cmp	r3, #57	; 0x39
 8000b56:	d805      	bhi.n	8000b64 <_ZL23ConsoleUtilHexCharToIntcPh+0x28>
    {
        *pInt = charVal - '0';
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	3b30      	subs	r3, #48	; 0x30
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e025      	b.n	8000bb0 <_ZL23ConsoleUtilHexCharToIntcPh+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b40      	cmp	r3, #64	; 0x40
 8000b68:	d908      	bls.n	8000b7c <_ZL23ConsoleUtilHexCharToIntcPh+0x40>
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b46      	cmp	r3, #70	; 0x46
 8000b6e:	d805      	bhi.n	8000b7c <_ZL23ConsoleUtilHexCharToIntcPh+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	3b37      	subs	r3, #55	; 0x37
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e019      	b.n	8000bb0 <_ZL23ConsoleUtilHexCharToIntcPh+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b60      	cmp	r3, #96	; 0x60
 8000b80:	d908      	bls.n	8000b94 <_ZL23ConsoleUtilHexCharToIntcPh+0x58>
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b66      	cmp	r3, #102	; 0x66
 8000b86:	d805      	bhi.n	8000b94 <_ZL23ConsoleUtilHexCharToIntcPh+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	3b57      	subs	r3, #87	; 0x57
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	e00d      	b.n	8000bb0 <_ZL23ConsoleUtilHexCharToIntcPh+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b0a      	cmp	r3, #10
 8000b98:	d105      	bne.n	8000ba6 <_ZL23ConsoleUtilHexCharToIntcPh+0x6a>
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b0d      	cmp	r3, #13
 8000b9e:	d102      	bne.n	8000ba6 <_ZL23ConsoleUtilHexCharToIntcPh+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b20      	cmp	r3, #32
 8000ba4:	d102      	bne.n	8000bac <_ZL23ConsoleUtilHexCharToIntcPh+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000ba6:	2311      	movs	r3, #17
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	e001      	b.n	8000bb0 <_ZL23ConsoleUtilHexCharToIntcPh+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000bac:	2310      	movs	r3, #16
 8000bae:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_ZL24ConsoleUtilsIntToHexCharhPc>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	6039      	str	r1, [r7, #0]
 8000bc8:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b09      	cmp	r3, #9
 8000bd2:	d805      	bhi.n	8000be0 <_ZL24ConsoleUtilsIntToHexCharhPc+0x22>
    {
        *pChar = intVal + '0';
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	3330      	adds	r3, #48	; 0x30
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e00d      	b.n	8000bfc <_ZL24ConsoleUtilsIntToHexCharhPc+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b09      	cmp	r3, #9
 8000be4:	d908      	bls.n	8000bf8 <_ZL24ConsoleUtilsIntToHexCharhPc+0x3a>
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d805      	bhi.n	8000bf8 <_ZL24ConsoleUtilsIntToHexCharhPc+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3337      	adds	r3, #55	; 0x37
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e001      	b.n	8000bfc <_ZL24ConsoleUtilsIntToHexCharhPc+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_ZL21ConsoleCommandCommentPKc>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_ZL18ConsoleCommandHelpPKc>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000c2c:	230b      	movs	r3, #11
 8000c2e:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d21f      	bcs.n	8000c7e <_ZL18ConsoleCommandHelpPKc+0x5e>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000c3e:	4912      	ldr	r1, [pc, #72]	; (8000c88 <_ZL18ConsoleCommandHelpPKc+0x68>)
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	4613      	mov	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4413      	add	r3, r2
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	440b      	add	r3, r1
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f97a 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <_ZL18ConsoleCommandHelpPKc+0x6c>)
 8000c56:	f000 f977 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	3308      	adds	r3, #8
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <_ZL18ConsoleCommandHelpPKc+0x68>)
 8000c68:	4413      	add	r3, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f96c 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <_ZL18ConsoleCommandHelpPKc+0x70>)
 8000c72:	f000 f969 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e7da      	b.n	8000c34 <_ZL18ConsoleCommandHelpPKc+0x14>
	}
	return result;
 8000c7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	08004360 	.word	0x08004360
 8000c8c:	080042f0 	.word	0x080042f0
 8000c90:	080042f4 	.word	0x080042f4

08000c94 <_ZL31ConsoleCommandParamExampleInt16PKc>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fdf7 	bl	8000898 <ConsoleReceiveParamInt16>
 8000caa:	4603      	mov	r3, r0
 8000cac:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d116      	bne.n	8000ce2 <_ZL31ConsoleCommandParamExampleInt16PKc+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <_ZL31ConsoleCommandParamExampleInt16PKc+0x58>)
 8000cb6:	f000 f947 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
		ConsoleSendParamInt16(parameterInt);
 8000cba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff25 	bl	8000b0e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <_ZL31ConsoleCommandParamExampleInt16PKc+0x5c>)
 8000cc6:	f000 f93f 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000cca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe88 	bl	80009e6 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000cd6:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <_ZL31ConsoleCommandParamExampleInt16PKc+0x60>)
 8000cd8:	f000 f936 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
		ConsoleIoSendString(STR_ENDLINE);
 8000cdc:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <_ZL31ConsoleCommandParamExampleInt16PKc+0x64>)
 8000cde:	f000 f933 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
	}
	return result;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	080042f8 	.word	0x080042f8
 8000cf0:	08004308 	.word	0x08004308
 8000cf4:	08004310 	.word	0x08004310
 8000cf8:	080042f4 	.word	0x080042f4

08000cfc <_ZL35ConsoleCommandParamExampleHexUint16PKc>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fe21 	bl	8000954 <ConsoleReceiveParamHexUint16>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d109      	bne.n	8000d30 <_ZL35ConsoleCommandParamExampleHexUint16PKc+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000d1c:	4807      	ldr	r0, [pc, #28]	; (8000d3c <_ZL35ConsoleCommandParamExampleHexUint16PKc+0x40>)
 8000d1e:	f000 f913 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
		ConsoleSendParamHexUint16(parameterUint16);
 8000d22:	89bb      	ldrh	r3, [r7, #12]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fe5e 	bl	80009e6 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <_ZL35ConsoleCommandParamExampleHexUint16PKc+0x44>)
 8000d2c:	f000 f90c 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
	}
	return result;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08004314 	.word	0x08004314
 8000d40:	080042f4 	.word	0x080042f4

08000d44 <_ZL20ConsoleCommandLedRedPKc>:

static eCommandResult_T ConsoleCommandLedRed(const char buffer[])
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 65535;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d56:	605a      	str	r2, [r3, #4]
	systemState.LEDGreen = 0;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
	systemState.LEDBlue = 0;
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <_ZL20ConsoleCommandLedRedPKc+0x30>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
	return result;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200001d8 	.word	0x200001d8

08000d78 <_ZL22ConsoleCommandLedGreenPKc>:

static eCommandResult_T ConsoleCommandLedGreen(const char buffer[])
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 0;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
	systemState.LEDGreen = 65535;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d90:	609a      	str	r2, [r3, #8]
	systemState.LEDBlue = 0;
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <_ZL22ConsoleCommandLedGreenPKc+0x30>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
	return result;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	200001d8 	.word	0x200001d8

08000dac <_ZL21ConsoleCommandLedBluePKc>:

static eCommandResult_T ConsoleCommandLedBlue(const char buffer[])
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

	systemState.LEDRed = 0;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
	systemState.LEDGreen = 0;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
	systemState.LEDBlue = 65535;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <_ZL21ConsoleCommandLedBluePKc+0x30>)
 8000dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dca:	60da      	str	r2, [r3, #12]
	return result;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200001d8 	.word	0x200001d8

08000de0 <_ZL25ConsoleCommandGetSetpointPKc>:

static eCommandResult_T ConsoleCommandGetSetpoint(const char buffer[])
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString("setpoint = ");
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <_ZL25ConsoleCommandGetSetpointPKc+0x30>)
 8000dea:	f000 f8ad 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
	ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <_ZL25ConsoleCommandGetSetpointPKc+0x34>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe8a 	bl	8000b0e <ConsoleSendParamInt16>
	ConsoleIoSendString(STR_ENDLINE);
 8000dfa:	4807      	ldr	r0, [pc, #28]	; (8000e18 <_ZL25ConsoleCommandGetSetpointPKc+0x38>)
 8000dfc:	f000 f8a4 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>

	eCommandResult_T result = COMMAND_SUCCESS;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
	return result;
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	08004324 	.word	0x08004324
 8000e14:	200001d8 	.word	0x200001d8
 8000e18:	080042f4 	.word	0x080042f4

08000e1c <_ZL25ConsoleCommandSetSetpointPKc>:

static eCommandResult_T ConsoleCommandSetSetpoint(const char buffer[])
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
		eCommandResult_T result;
		result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fd33 	bl	8000898 <ConsoleReceiveParamInt16>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
		if ( COMMAND_SUCCESS == result )
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d110      	bne.n	8000e5e <_ZL25ConsoleCommandSetSetpointPKc+0x42>
		{
			systemState.setpoint = (uint32_t)parameterInt;
 8000e3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <_ZL25ConsoleCommandSetSetpointPKc+0x4c>)
 8000e44:	601a      	str	r2, [r3, #0]
			ConsoleIoSendString("Setpoint updated to ");
 8000e46:	4809      	ldr	r0, [pc, #36]	; (8000e6c <_ZL25ConsoleCommandSetSetpointPKc+0x50>)
 8000e48:	f000 f87e 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
			ConsoleSendParamInt16((uint16_t)systemState.setpoint);
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <_ZL25ConsoleCommandSetSetpointPKc+0x4c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fe5b 	bl	8000b0e <ConsoleSendParamInt16>
			ConsoleIoSendString(STR_ENDLINE);
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <_ZL25ConsoleCommandSetSetpointPKc+0x54>)
 8000e5a:	f000 f875 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
		}

	return result;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001d8 	.word	0x200001d8
 8000e6c:	08004330 	.word	0x08004330
 8000e70:	080042f4 	.word	0x080042f4

08000e74 <_ZL17ConsoleCommandVerPKc>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <_ZL17ConsoleCommandVerPKc+0x24>)
 8000e82:	f000 f861 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
	ConsoleIoSendString(STR_ENDLINE);
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <_ZL17ConsoleCommandVerPKc+0x28>)
 8000e88:	f000 f85e 	bl	8000f48 <_Z19ConsoleIoSendStringPKc>
	return result;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08004348 	.word	0x08004348
 8000e9c:	080042f4 	.word	0x080042f4

08000ea0 <_Z23ConsoleCommandsGetTablev>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000ea4:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <_Z23ConsoleCommandsGetTablev+0x10>)
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	08004360 	.word	0x08004360

08000eb4 <_Z13ConsoleIoInitv>:
#include <global.h>

UART_HandleTypeDef huart1;

eConsoleError ConsoleIoInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	    huart1.Instance = USART1;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <_Z13ConsoleIoInitv+0x58>)
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <_Z13ConsoleIoInitv+0x5c>)
 8000ebc:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <_Z13ConsoleIoInitv+0x58>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <_Z13ConsoleIoInitv+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <_Z13ConsoleIoInitv+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <_Z13ConsoleIoInitv+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <_Z13ConsoleIoInitv+0x58>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <_Z13ConsoleIoInitv+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <_Z13ConsoleIoInitv+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eea:	4808      	ldr	r0, [pc, #32]	; (8000f0c <_Z13ConsoleIoInitv+0x58>)
 8000eec:	f002 fc6a 	bl	80037c4 <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bf14      	ite	ne
 8000ef6:	2301      	movne	r3, #1
 8000ef8:	2300      	moveq	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <_Z13ConsoleIoInitv+0x50>
		{
		  Error_Handler();
 8000f00:	f000 f9d6 	bl	80012b0 <Error_Handler>
		}


	return CONSOLE_SUCCESS;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000194 	.word	0x20000194
 8000f10:	40011000 	.word	0x40011000

08000f14 <_Z16ConsoleIoReceivePhmPm>:
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]


	HAL_UART_Receive(&huart1, (uint8_t *)buffer, bufferLength, 100);
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	2364      	movs	r3, #100	; 0x64
 8000f26:	68f9      	ldr	r1, [r7, #12]
 8000f28:	4806      	ldr	r0, [pc, #24]	; (8000f44 <_Z16ConsoleIoReceivePhmPm+0x30>)
 8000f2a:	f002 fd2a 	bl	8003982 <HAL_UART_Receive>
	*readLength = strlen((const char*)buffer);
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f7ff f95c 	bl	80001ec <strlen>
 8000f34:	4602      	mov	r2, r0
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]

	return CONSOLE_SUCCESS;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000194 	.word	0x20000194

08000f48 <_Z19ConsoleIoSendStringPKc>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer) , 10);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff f94b 	bl	80001ec <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4804      	ldr	r0, [pc, #16]	; (8000f70 <_Z19ConsoleIoSendStringPKc+0x28>)
 8000f60:	f002 fc7d 	bl	800385e <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000194 	.word	0x20000194

08000f74 <_ZN7encoder4initEv>:
#include <io_mapping.h>
#include <processor.h>
#include <main.h>

void encoder::init()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b096      	sub	sp, #88	; 0x58
 8000f78:	af00      	add	r7, sp, #0
	SPI_HandleTypeDef hspi1;

	//SPI
	hspi1.Instance = SPI1;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <_ZN7encoder4initEv+0x60>)
 8000f7c:	603b      	str	r3, [r7, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f7e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000f82:	607b      	str	r3, [r7, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f98:	61bb      	str	r3, [r7, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000faa:	230a      	movs	r3, #10
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fca5 	bl	8002900 <HAL_SPI_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	bf14      	ite	ne
 8000fbc:	2301      	movne	r3, #1
 8000fbe:	2300      	moveq	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <_ZN7encoder4initEv+0x56>
	{
	  Error_Handler();
 8000fc6:	f000 f807 	bl	8000fd8 <_ZN7encoder13Error_HandlerEv>
	}
}
 8000fca:	bf00      	nop
 8000fcc:	3758      	adds	r7, #88	; 0x58
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40013000 	.word	0x40013000

08000fd8 <_ZN7encoder13Error_HandlerEv>:



void encoder::Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <_ZN7encoder13Error_HandlerEv+0x8>
	...

08000fe4 <_ZN3led4initEv>:
#include <led.h>
#include <io_mapping.h>
#include <processor.h>
#include <main.h>

void led::init(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b0a8      	sub	sp, #160	; 0xa0
 8000fe8:	af00      	add	r7, sp, #0
	  TIM_HandleTypeDef htim1;

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
 8001012:	615a      	str	r2, [r3, #20]
 8001014:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2220      	movs	r2, #32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f003 f863 	bl	80040e8 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8001022:	4b6b      	ldr	r3, [pc, #428]	; (80011d0 <_ZN3led4initEv+0x1ec>)
 8001024:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Prescaler = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	2300      	movs	r3, #0
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.Period = 65535;
 800102e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001032:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	66bb      	str	r3, [r7, #104]	; 0x68
	  htim1.Init.RepetitionCounter = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	673b      	str	r3, [r7, #112]	; 0x70
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001040:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001044:	4618      	mov	r0, r3
 8001046:	f001 fce4 	bl	8002a12 <HAL_TIM_Base_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	bf14      	ite	ne
 8001050:	2301      	movne	r3, #1
 8001052:	2300      	moveq	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <_ZN3led4initEv+0x7a>
	  {
	    Error_Handler();
 800105a:	f000 f8fb 	bl	8001254 <_ZN3led13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001064:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001068:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f001 ff02 	bl	8002e78 <HAL_TIM_ConfigClockSource>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <_ZN3led4initEv+0xa4>
	  {
	    Error_Handler();
 8001084:	f000 f8e6 	bl	8001254 <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001088:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fd0f 	bl	8002ab0 <HAL_TIM_PWM_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <_ZN3led4initEv+0xc2>
	  {
	    Error_Handler();
 80010a2:	f000 f8d7 	bl	8001254 <_ZN3led13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	643b      	str	r3, [r7, #64]	; 0x40
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80010b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fab5 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bf14      	ite	ne
 80010c4:	2301      	movne	r3, #1
 80010c6:	2300      	moveq	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <_ZN3led4initEv+0xee>
	  {
	    Error_Handler();
 80010ce:	f000 f8c1 	bl	8001254 <_ZN3led13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d2:	2360      	movs	r3, #96	; 0x60
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
	  sConfigOC.Pulse = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80010f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010f6:	2200      	movs	r2, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fdfb 	bl	8002cf4 <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <_ZN3led4initEv+0x12e>
	  {
	    Error_Handler();
 800110e:	f000 f8a1 	bl	8001254 <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001112:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001116:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800111a:	2204      	movs	r2, #4
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fde9 	bl	8002cf4 <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf14      	ite	ne
 8001128:	2301      	movne	r3, #1
 800112a:	2300      	moveq	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <_ZN3led4initEv+0x152>
	  {
	    Error_Handler();
 8001132:	f000 f88f 	bl	8001254 <_ZN3led13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001136:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800113a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800113e:	2208      	movs	r2, #8
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fdd7 	bl	8002cf4 <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf14      	ite	ne
 800114c:	2301      	movne	r3, #1
 800114e:	2300      	moveq	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <_ZN3led4initEv+0x176>
	  {
	    Error_Handler();
 8001156:	f000 f87d 	bl	8001254 <_ZN3led13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800116e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001172:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001178:	1d3a      	adds	r2, r7, #4
 800117a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f002 facd 	bl	8003720 <HAL_TIMEx_ConfigBreakDeadTime>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	bf14      	ite	ne
 800118c:	2301      	movne	r3, #1
 800118e:	2300      	moveq	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <_ZN3led4initEv+0x1b6>
	  {
	    Error_Handler();
 8001196:	f000 f85d 	bl	8001254 <_ZN3led13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 800119a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fa38 	bl	8001614 <HAL_TIM_MspPostInit>

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fcda 	bl	8002b64 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011b4:	2104      	movs	r1, #4
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fcd4 	bl	8002b64 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011c0:	2108      	movs	r1, #8
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fcce 	bl	8002b64 <HAL_TIM_PWM_Start>
}
 80011c8:	bf00      	nop
 80011ca:	37a0      	adds	r7, #160	; 0xa0
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40010000 	.word	0x40010000

080011d4 <_ZN3led6SetRGBEiii>:

void led::SetRGB(int red, int green, int blue){
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	int32_t max = 65535;
 80011e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e4:	617b      	str	r3, [r7, #20]
	int32_t min = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]

	if(red > max){red = max;};
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dd01      	ble.n	80011f6 <_ZN3led6SetRGBEiii+0x22>
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	60fb      	str	r3, [r7, #12]
	if(green > max){green = max;};
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dd01      	ble.n	8001202 <_ZN3led6SetRGBEiii+0x2e>
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	60bb      	str	r3, [r7, #8]
	if(blue > max){blue = max;};
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	429a      	cmp	r2, r3
 8001208:	dd01      	ble.n	800120e <_ZN3led6SetRGBEiii+0x3a>
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	607b      	str	r3, [r7, #4]

	if(red < min){red = min;};
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	429a      	cmp	r2, r3
 8001214:	da01      	bge.n	800121a <_ZN3led6SetRGBEiii+0x46>
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	60fb      	str	r3, [r7, #12]
	if(green < min){green = min;};
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	429a      	cmp	r2, r3
 8001220:	da01      	bge.n	8001226 <_ZN3led6SetRGBEiii+0x52>
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	60bb      	str	r3, [r7, #8]
	if(blue < min){blue = min;};
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	429a      	cmp	r2, r3
 800122c:	da01      	bge.n	8001232 <_ZN3led6SetRGBEiii+0x5e>
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	607b      	str	r3, [r7, #4]

	TIM1->CCR1 = (int32_t)red;
 8001232:	4a07      	ldr	r2, [pc, #28]	; (8001250 <_ZN3led6SetRGBEiii+0x7c>)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = (int32_t)green;
 8001238:	4a05      	ldr	r2, [pc, #20]	; (8001250 <_ZN3led6SetRGBEiii+0x7c>)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = (int32_t)blue;
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <_ZN3led6SetRGBEiii+0x7c>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	63d3      	str	r3, [r2, #60]	; 0x3c

}
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	40010000 	.word	0x40010000

08001254 <_ZN3led13Error_HandlerEv>:

void led::Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  __disable_irq();
  while (1)
 800125c:	e7fe      	b.n	800125c <_ZN3led13Error_HandlerEv+0x8>
	...

08001260 <main>:

 struct MachineState systemState;


int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  //Initialize the various parts of the system (each is encapulated in its own c++ class with the excption of globals above)
  Machine::init();
 8001264:	f000 fa9c 	bl	80017a0 <_ZN7Machine4initEv>
  led::init();
 8001268:	f7ff febc 	bl	8000fe4 <_ZN3led4initEv>
  motor::init();
 800126c:	f000 f826 	bl	80012bc <_ZN5motor4initEv>
  //communication::init();
  encoder::init();
 8001270:	f7ff fe80 	bl	8000f74 <_ZN7encoder4initEv>

  systemState.setpoint = 100;
 8001274:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <main+0x4c>)
 8001276:	2264      	movs	r2, #100	; 0x64
 8001278:	601a      	str	r2, [r3, #0]
  systemState.LEDRed = 0;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <main+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  systemState.LEDGreen = 0;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <main+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  systemState.LEDBlue = 0;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <main+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]


  ConsoleInit();
 800128c:	f7ff f9e2 	bl	8000654 <ConsoleInit>

  while (1)
  {
	  led::SetRGB(systemState.LEDRed, systemState.LEDGreen, systemState.LEDBlue);
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <main+0x4c>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <main+0x4c>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	4619      	mov	r1, r3
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <main+0x4c>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	461a      	mov	r2, r3
 80012a2:	f7ff ff97 	bl	80011d4 <_ZN3led6SetRGBEiii>
	  //led::SetRGB(0,65535,0);
	  //HAL_Delay(100);
	  //led::SetRGB(0,0,65535);
	  //HAL_Delay(100);

	  ConsoleProcess();
 80012a6:	f7ff fa03 	bl	80006b0 <ConsoleProcess>
	  led::SetRGB(systemState.LEDRed, systemState.LEDGreen, systemState.LEDBlue);
 80012aa:	e7f1      	b.n	8001290 <main+0x30>
 80012ac:	200001d8 	.word	0x200001d8

080012b0 <Error_Handler>:
  }
}


void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <_ZN5motor4initEv>:
#include <io_mapping.h>
#include <processor.h>
#include <main.h>

void motor::init()
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0
	//GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
 80012d6:	4b80      	ldr	r3, [pc, #512]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a7f      	ldr	r2, [pc, #508]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b7d      	ldr	r3, [pc, #500]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	623b      	str	r3, [r7, #32]
 80012ec:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	4b79      	ldr	r3, [pc, #484]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a78      	ldr	r2, [pc, #480]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	4b72      	ldr	r3, [pc, #456]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a71      	ldr	r2, [pc, #452]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b6f      	ldr	r3, [pc, #444]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a6a      	ldr	r2, [pc, #424]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001330:	f043 0310 	orr.w	r3, r3, #16
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b64      	ldr	r3, [pc, #400]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a63      	ldr	r2, [pc, #396]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a5c      	ldr	r2, [pc, #368]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b5a      	ldr	r3, [pc, #360]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a55      	ldr	r2, [pc, #340]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 80013a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b4c      	ldr	r3, [pc, #304]	; (80014d8 <_ZN5motor4initEv+0x21c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b8:	4848      	ldr	r0, [pc, #288]	; (80014dc <_ZN5motor4initEv+0x220>)
 80013ba:	f000 fdc7 	bl	8001f4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 80013c4:	4846      	ldr	r0, [pc, #280]	; (80014e0 <_ZN5motor4initEv+0x224>)
 80013c6:	f000 fdc1 	bl	8001f4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 80013d0:	4844      	ldr	r0, [pc, #272]	; (80014e4 <_ZN5motor4initEv+0x228>)
 80013d2:	f000 fdbb 	bl	8001f4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80013dc:	4842      	ldr	r0, [pc, #264]	; (80014e8 <_ZN5motor4initEv+0x22c>)
 80013de:	f000 fdb5 	bl	8001f4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80013e8:	4840      	ldr	r0, [pc, #256]	; (80014ec <_ZN5motor4initEv+0x230>)
 80013ea:	f000 fdaf 	bl	8001f4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PF12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	4835      	ldr	r0, [pc, #212]	; (80014dc <_ZN5motor4initEv+0x220>)
 8001408:	f000 fbf4 	bl	8001bf4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE10 PE12 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 800140c:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	482e      	ldr	r0, [pc, #184]	; (80014e0 <_ZN5motor4initEv+0x224>)
 8001426:	f000 fbe5 	bl	8001bf4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB12 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 800142a:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	4828      	ldr	r0, [pc, #160]	; (80014e4 <_ZN5motor4initEv+0x228>)
 8001444:	f000 fbd6 	bl	8001bf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800145a:	2309      	movs	r3, #9
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	481f      	ldr	r0, [pc, #124]	; (80014e4 <_ZN5motor4initEv+0x228>)
 8001466:	f000 fbc5 	bl	8001bf4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD10 PD12 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800146a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	4819      	ldr	r0, [pc, #100]	; (80014e8 <_ZN5motor4initEv+0x22c>)
 8001484:	f000 fbb6 	bl	8001bf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001488:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	4812      	ldr	r0, [pc, #72]	; (80014e8 <_ZN5motor4initEv+0x22c>)
 800149e:	f000 fba9 	bl	8001bf4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG13 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <_ZN5motor4initEv+0x230>)
 80014bc:	f000 fb9a 	bl	8001bf4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	2006      	movs	r0, #6
 80014c6:	f000 fb5e 	bl	8001b86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014ca:	2006      	movs	r0, #6
 80014cc:	f000 fb77 	bl	8001bbe <HAL_NVIC_EnableIRQ>
}
 80014d0:	bf00      	nop
 80014d2:	3738      	adds	r7, #56	; 0x38
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40021400 	.word	0x40021400
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020400 	.word	0x40020400
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021800 	.word	0x40021800

080014f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_MspInit+0x4c>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_MspInit+0x4c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	; (80015c4 <HAL_SPI_MspInit+0x84>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12b      	bne.n	80015ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_SPI_MspInit+0x88>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <HAL_SPI_MspInit+0x88>)
 800156c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_SPI_MspInit+0x88>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_SPI_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_SPI_MspInit+0x88>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_SPI_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800159a:	23e0      	movs	r3, #224	; 0xe0
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015aa:	2305      	movs	r3, #5
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_SPI_MspInit+0x8c>)
 80015b6:	f000 fb1d 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40013000 	.word	0x40013000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_TIM_Base_MspInit+0x3c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d10d      	bne.n	80015fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_TIM_Base_MspInit+0x40>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a09      	ldr	r2, [pc, #36]	; (8001610 <HAL_TIM_Base_MspInit+0x40>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_TIM_Base_MspInit+0x40>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40010000 	.word	0x40010000
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a12      	ldr	r2, [pc, #72]	; (800167c <HAL_TIM_MspPostInit+0x68>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d11e      	bne.n	8001674 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_TIM_MspPostInit+0x6c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_TIM_MspPostInit+0x6c>)
 8001640:	f043 0310 	orr.w	r3, r3, #16
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_TIM_MspPostInit+0x6c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001652:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001664:	2301      	movs	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_TIM_MspPostInit+0x70>)
 8001670:	f000 fac0 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40010000 	.word	0x40010000
 8001680:	40023800 	.word	0x40023800
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_UART_MspInit+0x84>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d12c      	bne.n	8001704 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a17      	ldr	r2, [pc, #92]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016b4:	f043 0310 	orr.w	r3, r3, #16
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f4:	2307      	movs	r3, #7
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <HAL_UART_MspInit+0x8c>)
 8001700:	f000 fa78 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40011000 	.word	0x40011000
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f914 	bl	8001990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI0_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(Button_Pin);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <SystemInit+0x20>)
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <SystemInit+0x20>)
 8001788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800178c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <_ZN7Machine4initEv>:
#include <machine.h>
#include <processor.h>


void Machine::init()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	HAL_Init();
 80017a4:	f000 f8a2 	bl	80018ec <HAL_Init>
	Machine::Config_Clock();
 80017a8:	f000 f802 	bl	80017b0 <_ZN7Machine12Config_ClockEv>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN7Machine12Config_ClockEv>:

void Machine::Config_Clock(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b094      	sub	sp, #80	; 0x50
 80017b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b6:	f107 0320 	add.w	r3, r7, #32
 80017ba:	2230      	movs	r2, #48	; 0x30
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f002 fc92 	bl	80040e8 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <_ZN7Machine12Config_ClockEv+0xd4>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a29      	ldr	r2, [pc, #164]	; (8001884 <_ZN7Machine12Config_ClockEv+0xd4>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <_ZN7Machine12Config_ClockEv+0xd4>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <_ZN7Machine12Config_ClockEv+0xd8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017fc:	4a22      	ldr	r2, [pc, #136]	; (8001888 <_ZN7Machine12Config_ClockEv+0xd8>)
 80017fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <_ZN7Machine12Config_ClockEv+0xd8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001814:	2301      	movs	r3, #1
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001818:	2310      	movs	r3, #16
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001820:	f107 0320 	add.w	r3, r7, #32
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fbab 	bl	8001f80 <HAL_RCC_OscConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf14      	ite	ne
 8001830:	2301      	movne	r3, #1
 8001832:	2300      	moveq	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <_ZN7Machine12Config_ClockEv+0x8e>
	  {
	    Error_Handler();
 800183a:	f000 f827 	bl	800188c <_ZN7Machine13Error_HandlerEv>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183e:	230f      	movs	r3, #15
 8001840:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fe09 	bl	8002470 <HAL_RCC_ClockConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <_ZN7Machine12Config_ClockEv+0xc2>
	  {
	    Error_Handler();
 800186e:	f000 f80d 	bl	800188c <_ZN7Machine13Error_HandlerEv>
	  }
	  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2000      	movs	r0, #0
 8001878:	f000 fee0 	bl	800263c <HAL_RCC_MCOConfig>
}
 800187c:	bf00      	nop
 800187e:	3750      	adds	r7, #80	; 0x50
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40007000 	.word	0x40007000

0800188c <_ZN7Machine13Error_HandlerEv>:

void Machine::Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <_ZN7Machine13Error_HandlerEv+0x8>
	...

08001898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800189e:	490e      	ldr	r1, [pc, #56]	; (80018d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b4:	4c0b      	ldr	r4, [pc, #44]	; (80018e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c2:	f7ff ff5b 	bl	800177c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c6:	f002 fbeb 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ca:	f7ff fcc9 	bl	8001260 <main>
  bx  lr    
 80018ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018dc:	080047a4 	.word	0x080047a4
  ldr r2, =_sbss
 80018e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018e4:	200001ec 	.word	0x200001ec

080018e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC_IRQHandler>
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_Init+0x40>)
 80018f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_Init+0x40>)
 8001902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_Init+0x40>)
 800190e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f000 f92b 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191a:	200f      	movs	r0, #15
 800191c:	f000 f808 	bl	8001930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001920:	f7ff fde6 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00

08001930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0x54>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x58>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001946:	fbb3 f3f1 	udiv	r3, r3, r1
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f943 	bl	8001bda <HAL_SYSTICK_Config>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e00e      	b.n	800197c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b0f      	cmp	r3, #15
 8001962:	d80a      	bhi.n	800197a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001964:	2200      	movs	r2, #0
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f000 f90b 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001970:	4a06      	ldr	r2, [pc, #24]	; (800198c <HAL_InitTick+0x5c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000000 	.word	0x20000000
 8001988:	20000008 	.word	0x20000008
 800198c:	20000004 	.word	0x20000004

08001990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_IncTick+0x20>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x24>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_IncTick+0x24>)
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000008 	.word	0x20000008
 80019b4:	200001e8 	.word	0x200001e8

080019b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return uwTick;
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_GetTick+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	200001e8 	.word	0x200001e8

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	; (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff29 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff3e 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff8e 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5d 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff31 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffa2 	bl	8001b2c <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e177      	b.n	8001f00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8166 	bne.w	8001efa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d005      	beq.n	8001c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d130      	bne.n	8001ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 0201 	and.w	r2, r3, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d017      	beq.n	8001ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d123      	bne.n	8001d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	08da      	lsrs	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3208      	adds	r2, #8
 8001cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80c0 	beq.w	8001efa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a65      	ldr	r2, [pc, #404]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d96:	4a61      	ldr	r2, [pc, #388]	; (8001f1c <HAL_GPIO_Init+0x328>)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_GPIO_Init+0x32c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d037      	beq.n	8001e32 <HAL_GPIO_Init+0x23e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a57      	ldr	r2, [pc, #348]	; (8001f24 <HAL_GPIO_Init+0x330>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d031      	beq.n	8001e2e <HAL_GPIO_Init+0x23a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a56      	ldr	r2, [pc, #344]	; (8001f28 <HAL_GPIO_Init+0x334>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02b      	beq.n	8001e2a <HAL_GPIO_Init+0x236>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a55      	ldr	r2, [pc, #340]	; (8001f2c <HAL_GPIO_Init+0x338>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d025      	beq.n	8001e26 <HAL_GPIO_Init+0x232>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a54      	ldr	r2, [pc, #336]	; (8001f30 <HAL_GPIO_Init+0x33c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01f      	beq.n	8001e22 <HAL_GPIO_Init+0x22e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a53      	ldr	r2, [pc, #332]	; (8001f34 <HAL_GPIO_Init+0x340>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x22a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_GPIO_Init+0x344>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x226>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <HAL_GPIO_Init+0x348>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x222>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a50      	ldr	r2, [pc, #320]	; (8001f40 <HAL_GPIO_Init+0x34c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x21e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4f      	ldr	r2, [pc, #316]	; (8001f44 <HAL_GPIO_Init+0x350>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x21a>
 8001e0a:	2309      	movs	r3, #9
 8001e0c:	e012      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e0e:	230a      	movs	r3, #10
 8001e10:	e010      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e12:	2308      	movs	r3, #8
 8001e14:	e00e      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e00c      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00a      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e1e:	2305      	movs	r3, #5
 8001e20:	e008      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e26:	2303      	movs	r3, #3
 8001e28:	e004      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e32:	2300      	movs	r3, #0
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f002 0203 	and.w	r2, r2, #3
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e44:	4935      	ldr	r1, [pc, #212]	; (8001f1c <HAL_GPIO_Init+0x328>)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e52:	4b3d      	ldr	r3, [pc, #244]	; (8001f48 <HAL_GPIO_Init+0x354>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e76:	4a34      	ldr	r2, [pc, #208]	; (8001f48 <HAL_GPIO_Init+0x354>)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e7c:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <HAL_GPIO_Init+0x354>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea0:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <HAL_GPIO_Init+0x354>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea6:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_GPIO_Init+0x354>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eca:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <HAL_GPIO_Init+0x354>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_GPIO_Init+0x354>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef4:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <HAL_GPIO_Init+0x354>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3301      	adds	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b0f      	cmp	r3, #15
 8001f04:	f67f ae84 	bls.w	8001c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40021400 	.word	0x40021400
 8001f38:	40021800 	.word	0x40021800
 8001f3c:	40021c00 	.word	0x40021c00
 8001f40:	40022000 	.word	0x40022000
 8001f44:	40022400 	.word	0x40022400
 8001f48:	40013c00 	.word	0x40013c00

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f68:	e003      	b.n	8001f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	041a      	lsls	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	619a      	str	r2, [r3, #24]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e267      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d075      	beq.n	800208a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f9e:	4b88      	ldr	r3, [pc, #544]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001faa:	4b85      	ldr	r3, [pc, #532]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d112      	bne.n	8001fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb6:	4b82      	ldr	r3, [pc, #520]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc2:	d10b      	bne.n	8001fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	4b7e      	ldr	r3, [pc, #504]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d05b      	beq.n	8002088 <HAL_RCC_OscConfig+0x108>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d157      	bne.n	8002088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e242      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe4:	d106      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x74>
 8001fe6:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a75      	ldr	r2, [pc, #468]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e01d      	b.n	8002030 <HAL_RCC_OscConfig+0xb0>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x98>
 8001ffe:	4b70      	ldr	r3, [pc, #448]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6f      	ldr	r2, [pc, #444]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8002004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b6d      	ldr	r3, [pc, #436]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a6c      	ldr	r2, [pc, #432]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e00b      	b.n	8002030 <HAL_RCC_OscConfig+0xb0>
 8002018:	4b69      	ldr	r3, [pc, #420]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a68      	ldr	r2, [pc, #416]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 800201e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b66      	ldr	r3, [pc, #408]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a65      	ldr	r2, [pc, #404]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 800202a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff fcbe 	bl	80019b8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff fcba 	bl	80019b8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e207      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0xc0>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fcaa 	bl	80019b8 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff fca6 	bl	80019b8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1f3      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	4b51      	ldr	r3, [pc, #324]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0xe8>
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d063      	beq.n	800215e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002096:	4b4a      	ldr	r3, [pc, #296]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a2:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d11c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ae:	4b44      	ldr	r3, [pc, #272]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d116      	bne.n	80020e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_RCC_OscConfig+0x152>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d001      	beq.n	80020d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e1c7      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d2:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4937      	ldr	r1, [pc, #220]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	e03a      	b.n	800215e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f0:	4b34      	ldr	r3, [pc, #208]	; (80021c4 <HAL_RCC_OscConfig+0x244>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7ff fc5f 	bl	80019b8 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fe:	f7ff fc5b 	bl	80019b8 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e1a8      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4925      	ldr	r1, [pc, #148]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
 8002130:	e015      	b.n	800215e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_OscConfig+0x244>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff fc3e 	bl	80019b8 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002140:	f7ff fc3a 	bl	80019b8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e187      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d036      	beq.n	80021d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d016      	beq.n	80021a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_RCC_OscConfig+0x248>)
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7ff fc1e 	bl	80019b8 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002180:	f7ff fc1a 	bl	80019b8 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e167      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_RCC_OscConfig+0x240>)
 8002194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x200>
 800219e:	e01b      	b.n	80021d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCC_OscConfig+0x248>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a6:	f7ff fc07 	bl	80019b8 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ac:	e00e      	b.n	80021cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ae:	f7ff fc03 	bl	80019b8 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d907      	bls.n	80021cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e150      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
 80021c0:	40023800 	.word	0x40023800
 80021c4:	42470000 	.word	0x42470000
 80021c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021cc:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 80021ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1ea      	bne.n	80021ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8097 	beq.w	8002314 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ea:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10f      	bne.n	8002216 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	4b7d      	ldr	r3, [pc, #500]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a7c      	ldr	r2, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b7a      	ldr	r3, [pc, #488]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002212:	2301      	movs	r3, #1
 8002214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002216:	4b77      	ldr	r3, [pc, #476]	; (80023f4 <HAL_RCC_OscConfig+0x474>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d118      	bne.n	8002254 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002222:	4b74      	ldr	r3, [pc, #464]	; (80023f4 <HAL_RCC_OscConfig+0x474>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a73      	ldr	r2, [pc, #460]	; (80023f4 <HAL_RCC_OscConfig+0x474>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222e:	f7ff fbc3 	bl	80019b8 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002236:	f7ff fbbf 	bl	80019b8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e10c      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	4b6a      	ldr	r3, [pc, #424]	; (80023f4 <HAL_RCC_OscConfig+0x474>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x2ea>
 800225c:	4b64      	ldr	r3, [pc, #400]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	4a63      	ldr	r2, [pc, #396]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6713      	str	r3, [r2, #112]	; 0x70
 8002268:	e01c      	b.n	80022a4 <HAL_RCC_OscConfig+0x324>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b05      	cmp	r3, #5
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0x30c>
 8002272:	4b5f      	ldr	r3, [pc, #380]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	4a5e      	ldr	r2, [pc, #376]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	6713      	str	r3, [r2, #112]	; 0x70
 800227e:	4b5c      	ldr	r3, [pc, #368]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	4a5b      	ldr	r2, [pc, #364]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6713      	str	r3, [r2, #112]	; 0x70
 800228a:	e00b      	b.n	80022a4 <HAL_RCC_OscConfig+0x324>
 800228c:	4b58      	ldr	r3, [pc, #352]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a57      	ldr	r2, [pc, #348]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
 8002298:	4b55      	ldr	r3, [pc, #340]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a54      	ldr	r2, [pc, #336]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 800229e:	f023 0304 	bic.w	r3, r3, #4
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d015      	beq.n	80022d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7ff fb84 	bl	80019b8 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7ff fb80 	bl	80019b8 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0cb      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ca:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0ee      	beq.n	80022b4 <HAL_RCC_OscConfig+0x334>
 80022d6:	e014      	b.n	8002302 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7ff fb6e 	bl	80019b8 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7ff fb6a 	bl	80019b8 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e0b5      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f6:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1ee      	bne.n	80022e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002308:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	4a38      	ldr	r2, [pc, #224]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 800230e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002312:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a1 	beq.w	8002460 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800231e:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b08      	cmp	r3, #8
 8002328:	d05c      	beq.n	80023e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d141      	bne.n	80023b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	4b31      	ldr	r3, [pc, #196]	; (80023f8 <HAL_RCC_OscConfig+0x478>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff fb3e 	bl	80019b8 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002340:	f7ff fb3a 	bl	80019b8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e087      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	019b      	lsls	r3, r3, #6
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	3b01      	subs	r3, #1
 8002378:	041b      	lsls	r3, r3, #16
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	491b      	ldr	r1, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x478>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7ff fb13 	bl	80019b8 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002396:	f7ff fb0f 	bl	80019b8 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e05c      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x416>
 80023b4:	e054      	b.n	8002460 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_RCC_OscConfig+0x478>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7ff fafc 	bl	80019b8 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c4:	f7ff faf8 	bl	80019b8 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e045      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_RCC_OscConfig+0x470>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x444>
 80023e2:	e03d      	b.n	8002460 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e038      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40007000 	.word	0x40007000
 80023f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_RCC_OscConfig+0x4ec>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d028      	beq.n	800245c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d121      	bne.n	800245c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d11a      	bne.n	800245c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800242c:	4013      	ands	r3, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002434:	4293      	cmp	r3, r2
 8002436:	d111      	bne.n	800245c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	085b      	lsrs	r3, r3, #1
 8002444:	3b01      	subs	r3, #1
 8002446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d107      	bne.n	800245c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800

08002470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0cc      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b68      	ldr	r3, [pc, #416]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d90c      	bls.n	80024ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b65      	ldr	r3, [pc, #404]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b63      	ldr	r3, [pc, #396]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0b8      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c4:	4b59      	ldr	r3, [pc, #356]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a58      	ldr	r2, [pc, #352]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024dc:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a52      	ldr	r2, [pc, #328]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b50      	ldr	r3, [pc, #320]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	494d      	ldr	r1, [pc, #308]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d044      	beq.n	8002590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b47      	ldr	r3, [pc, #284]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d119      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e07f      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d003      	beq.n	800252e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252a:	2b03      	cmp	r3, #3
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	4b3f      	ldr	r3, [pc, #252]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e06f      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e067      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254e:	4b37      	ldr	r3, [pc, #220]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f023 0203 	bic.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4934      	ldr	r1, [pc, #208]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002560:	f7ff fa2a 	bl	80019b8 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	e00a      	b.n	800257e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002568:	f7ff fa26 	bl	80019b8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e04f      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b2b      	ldr	r3, [pc, #172]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 020c 	and.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d1eb      	bne.n	8002568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d20c      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e032      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4916      	ldr	r1, [pc, #88]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	490e      	ldr	r1, [pc, #56]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025f6:	f000 f889 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	490a      	ldr	r1, [pc, #40]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	5ccb      	ldrb	r3, [r1, r3]
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	4a09      	ldr	r2, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f98a 	bl	8001930 <HAL_InitTick>

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023c00 	.word	0x40023c00
 800262c:	40023800 	.word	0x40023800
 8002630:	08004678 	.word	0x08004678
 8002634:	20000000 	.word	0x20000000
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08c      	sub	sp, #48	; 0x30
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d129      	bne.n	80026a2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <HAL_RCC_MCOConfig+0xc4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a2a      	ldr	r2, [pc, #168]	; (8002700 <HAL_RCC_MCOConfig+0xc4>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b28      	ldr	r3, [pc, #160]	; (8002700 <HAL_RCC_MCOConfig+0xc4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800266a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002674:	2303      	movs	r3, #3
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002680:	f107 031c 	add.w	r3, r7, #28
 8002684:	4619      	mov	r1, r3
 8002686:	481f      	ldr	r0, [pc, #124]	; (8002704 <HAL_RCC_MCOConfig+0xc8>)
 8002688:	f7ff fab4 	bl	8001bf4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_RCC_MCOConfig+0xc4>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	430b      	orrs	r3, r1
 800269a:	4919      	ldr	r1, [pc, #100]	; (8002700 <HAL_RCC_MCOConfig+0xc4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80026a0:	e029      	b.n	80026f6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_RCC_MCOConfig+0xc4>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a15      	ldr	r2, [pc, #84]	; (8002700 <HAL_RCC_MCOConfig+0xc4>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <HAL_RCC_MCOConfig+0xc4>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80026be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	4619      	mov	r1, r3
 80026da:	480b      	ldr	r0, [pc, #44]	; (8002708 <HAL_RCC_MCOConfig+0xcc>)
 80026dc:	f7ff fa8a 	bl	8001bf4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <HAL_RCC_MCOConfig+0xc4>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	00d9      	lsls	r1, r3, #3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	430b      	orrs	r3, r1
 80026f0:	4903      	ldr	r1, [pc, #12]	; (8002700 <HAL_RCC_MCOConfig+0xc4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
}
 80026f6:	bf00      	nop
 80026f8:	3730      	adds	r7, #48	; 0x30
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020800 	.word	0x40020800

0800270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002710:	b090      	sub	sp, #64	; 0x40
 8002712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
 8002718:	2300      	movs	r3, #0
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800271c:	2300      	movs	r3, #0
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002724:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d00d      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x40>
 8002730:	2b08      	cmp	r3, #8
 8002732:	f200 80a1 	bhi.w	8002878 <HAL_RCC_GetSysClockFreq+0x16c>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x34>
 800273a:	2b04      	cmp	r3, #4
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0x3a>
 800273e:	e09b      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_RCC_GetSysClockFreq+0x184>)
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002744:	e09b      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002746:	4b53      	ldr	r3, [pc, #332]	; (8002894 <HAL_RCC_GetSysClockFreq+0x188>)
 8002748:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800274a:	e098      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800274c:	4b4f      	ldr	r3, [pc, #316]	; (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002754:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002756:	4b4d      	ldr	r3, [pc, #308]	; (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d028      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002762:	4b4a      	ldr	r3, [pc, #296]	; (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	099b      	lsrs	r3, r3, #6
 8002768:	2200      	movs	r2, #0
 800276a:	623b      	str	r3, [r7, #32]
 800276c:	627a      	str	r2, [r7, #36]	; 0x24
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002774:	2100      	movs	r1, #0
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_RCC_GetSysClockFreq+0x188>)
 8002778:	fb03 f201 	mul.w	r2, r3, r1
 800277c:	2300      	movs	r3, #0
 800277e:	fb00 f303 	mul.w	r3, r0, r3
 8002782:	4413      	add	r3, r2
 8002784:	4a43      	ldr	r2, [pc, #268]	; (8002894 <HAL_RCC_GetSysClockFreq+0x188>)
 8002786:	fba0 1202 	umull	r1, r2, r0, r2
 800278a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800278c:	460a      	mov	r2, r1
 800278e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002792:	4413      	add	r3, r2
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002798:	2200      	movs	r2, #0
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	61fa      	str	r2, [r7, #28]
 800279e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027a6:	f7fd fd29 	bl	80001fc <__aeabi_uldivmod>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4613      	mov	r3, r2
 80027b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b2:	e053      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b4:	4b35      	ldr	r3, [pc, #212]	; (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	2200      	movs	r2, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	617a      	str	r2, [r7, #20]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027c6:	f04f 0b00 	mov.w	fp, #0
 80027ca:	4652      	mov	r2, sl
 80027cc:	465b      	mov	r3, fp
 80027ce:	f04f 0000 	mov.w	r0, #0
 80027d2:	f04f 0100 	mov.w	r1, #0
 80027d6:	0159      	lsls	r1, r3, #5
 80027d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027dc:	0150      	lsls	r0, r2, #5
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	ebb2 080a 	subs.w	r8, r2, sl
 80027e6:	eb63 090b 	sbc.w	r9, r3, fp
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002802:	eb63 0509 	sbc.w	r5, r3, r9
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	00eb      	lsls	r3, r5, #3
 8002810:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002814:	00e2      	lsls	r2, r4, #3
 8002816:	4614      	mov	r4, r2
 8002818:	461d      	mov	r5, r3
 800281a:	eb14 030a 	adds.w	r3, r4, sl
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	eb45 030b 	adc.w	r3, r5, fp
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002832:	4629      	mov	r1, r5
 8002834:	028b      	lsls	r3, r1, #10
 8002836:	4621      	mov	r1, r4
 8002838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800283c:	4621      	mov	r1, r4
 800283e:	028a      	lsls	r2, r1, #10
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002846:	2200      	movs	r2, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	60fa      	str	r2, [r7, #12]
 800284c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002850:	f7fd fcd4 	bl	80001fc <__aeabi_uldivmod>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4613      	mov	r3, r2
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	0c1b      	lsrs	r3, r3, #16
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	3301      	adds	r3, #1
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800286c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002876:	e002      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetSysClockFreq+0x184>)
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800287c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002880:	4618      	mov	r0, r3
 8002882:	3740      	adds	r7, #64	; 0x40
 8002884:	46bd      	mov	sp, r7
 8002886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	00f42400 	.word	0x00f42400
 8002894:	017d7840 	.word	0x017d7840

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_RCC_GetHCLKFreq+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000000 	.word	0x20000000

080028b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b4:	f7ff fff0 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0a9b      	lsrs	r3, r3, #10
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4903      	ldr	r1, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08004688 	.word	0x08004688

080028d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028dc:	f7ff ffdc 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0b5b      	lsrs	r3, r3, #13
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4903      	ldr	r1, [pc, #12]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	08004688 	.word	0x08004688

08002900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07b      	b.n	8002a0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b00      	cmp	r3, #0
 8002918:	d108      	bne.n	800292c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002922:	d009      	beq.n	8002938 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
 800292a:	e005      	b.n	8002938 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fdf4 	bl	8001540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800296e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	ea42 0103 	orr.w	r1, r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	f003 0104 	and.w	r1, r3, #4
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	f003 0210 	and.w	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69da      	ldr	r2, [r3, #28]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e041      	b.n	8002aa8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7fe fdc9 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f000 fad9 	bl	8003008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e041      	b.n	8002b46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f839 	bl	8002b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f000 fa8a 	bl	8003008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <HAL_TIM_PWM_Start+0x24>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e022      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d109      	bne.n	8002ba2 <HAL_TIM_PWM_Start+0x3e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	e015      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d109      	bne.n	8002bbc <HAL_TIM_PWM_Start+0x58>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e008      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e07c      	b.n	8002cd0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x82>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be4:	e013      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0x92>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf4:	e00b      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_PWM_Start+0xa2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c04:	e003      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fce0 	bl	80035dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2d      	ldr	r2, [pc, #180]	; (8002cd8 <HAL_TIM_PWM_Start+0x174>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_TIM_PWM_Start+0xcc>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2c      	ldr	r2, [pc, #176]	; (8002cdc <HAL_TIM_PWM_Start+0x178>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_TIM_PWM_Start+0xd0>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_TIM_PWM_Start+0xd2>
 8002c34:	2300      	movs	r3, #0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d007      	beq.n	8002c4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a22      	ldr	r2, [pc, #136]	; (8002cd8 <HAL_TIM_PWM_Start+0x174>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d022      	beq.n	8002c9a <HAL_TIM_PWM_Start+0x136>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5c:	d01d      	beq.n	8002c9a <HAL_TIM_PWM_Start+0x136>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1f      	ldr	r2, [pc, #124]	; (8002ce0 <HAL_TIM_PWM_Start+0x17c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d018      	beq.n	8002c9a <HAL_TIM_PWM_Start+0x136>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <HAL_TIM_PWM_Start+0x180>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <HAL_TIM_PWM_Start+0x136>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <HAL_TIM_PWM_Start+0x184>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00e      	beq.n	8002c9a <HAL_TIM_PWM_Start+0x136>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a16      	ldr	r2, [pc, #88]	; (8002cdc <HAL_TIM_PWM_Start+0x178>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d009      	beq.n	8002c9a <HAL_TIM_PWM_Start+0x136>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a18      	ldr	r2, [pc, #96]	; (8002cec <HAL_TIM_PWM_Start+0x188>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d004      	beq.n	8002c9a <HAL_TIM_PWM_Start+0x136>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <HAL_TIM_PWM_Start+0x18c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d111      	bne.n	8002cbe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d010      	beq.n	8002cce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbc:	e007      	b.n	8002cce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40010400 	.word	0x40010400
 8002ce0:	40000400 	.word	0x40000400
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40000c00 	.word	0x40000c00
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	40001800 	.word	0x40001800

08002cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e0ae      	b.n	8002e70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	f200 809f 	bhi.w	8002e60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d22:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d5d 	.word	0x08002d5d
 8002d2c:	08002e61 	.word	0x08002e61
 8002d30:	08002e61 	.word	0x08002e61
 8002d34:	08002e61 	.word	0x08002e61
 8002d38:	08002d9d 	.word	0x08002d9d
 8002d3c:	08002e61 	.word	0x08002e61
 8002d40:	08002e61 	.word	0x08002e61
 8002d44:	08002e61 	.word	0x08002e61
 8002d48:	08002ddf 	.word	0x08002ddf
 8002d4c:	08002e61 	.word	0x08002e61
 8002d50:	08002e61 	.word	0x08002e61
 8002d54:	08002e61 	.word	0x08002e61
 8002d58:	08002e1f 	.word	0x08002e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f9f0 	bl	8003148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0208 	orr.w	r2, r2, #8
 8002d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0204 	bic.w	r2, r2, #4
 8002d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6999      	ldr	r1, [r3, #24]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	619a      	str	r2, [r3, #24]
      break;
 8002d9a:	e064      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fa40 	bl	8003228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6999      	ldr	r1, [r3, #24]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	021a      	lsls	r2, r3, #8
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	619a      	str	r2, [r3, #24]
      break;
 8002ddc:	e043      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fa95 	bl	8003314 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0208 	orr.w	r2, r2, #8
 8002df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0204 	bic.w	r2, r2, #4
 8002e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69d9      	ldr	r1, [r3, #28]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]
      break;
 8002e1c:	e023      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fae9 	bl	80033fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69d9      	ldr	r1, [r3, #28]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	021a      	lsls	r2, r3, #8
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	61da      	str	r2, [r3, #28]
      break;
 8002e5e:	e002      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
      break;
 8002e64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIM_ConfigClockSource+0x1c>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e0b4      	b.n	8002ffe <HAL_TIM_ConfigClockSource+0x186>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ecc:	d03e      	beq.n	8002f4c <HAL_TIM_ConfigClockSource+0xd4>
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	f200 8087 	bhi.w	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	f000 8086 	beq.w	8002fea <HAL_TIM_ConfigClockSource+0x172>
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d87f      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b70      	cmp	r3, #112	; 0x70
 8002ee6:	d01a      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0xa6>
 8002ee8:	2b70      	cmp	r3, #112	; 0x70
 8002eea:	d87b      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b60      	cmp	r3, #96	; 0x60
 8002eee:	d050      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x11a>
 8002ef0:	2b60      	cmp	r3, #96	; 0x60
 8002ef2:	d877      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b50      	cmp	r3, #80	; 0x50
 8002ef6:	d03c      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0xfa>
 8002ef8:	2b50      	cmp	r3, #80	; 0x50
 8002efa:	d873      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d058      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x13a>
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d86f      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b30      	cmp	r3, #48	; 0x30
 8002f06:	d064      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f08:	2b30      	cmp	r3, #48	; 0x30
 8002f0a:	d86b      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d060      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d867      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05c      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d05a      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f1c:	e062      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f000 fb35 	bl	800359c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	609a      	str	r2, [r3, #8]
      break;
 8002f4a:	e04f      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f000 fb1e 	bl	800359c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f6e:	609a      	str	r2, [r3, #8]
      break;
 8002f70:	e03c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f000 fa92 	bl	80034a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2150      	movs	r1, #80	; 0x50
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 faeb 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002f90:	e02c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 fab1 	bl	8003506 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2160      	movs	r1, #96	; 0x60
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fadb 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e01c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f000 fa72 	bl	80034a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2140      	movs	r1, #64	; 0x40
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 facb 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002fd0:	e00c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f000 fac2 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002fe2:	e003      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe8:	e000      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a40      	ldr	r2, [pc, #256]	; (800311c <TIM_Base_SetConfig+0x114>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003026:	d00f      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a3d      	ldr	r2, [pc, #244]	; (8003120 <TIM_Base_SetConfig+0x118>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00b      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a3c      	ldr	r2, [pc, #240]	; (8003124 <TIM_Base_SetConfig+0x11c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a3b      	ldr	r2, [pc, #236]	; (8003128 <TIM_Base_SetConfig+0x120>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a3a      	ldr	r2, [pc, #232]	; (800312c <TIM_Base_SetConfig+0x124>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d108      	bne.n	800305a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a2f      	ldr	r2, [pc, #188]	; (800311c <TIM_Base_SetConfig+0x114>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d02b      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003068:	d027      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <TIM_Base_SetConfig+0x118>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d023      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a2b      	ldr	r2, [pc, #172]	; (8003124 <TIM_Base_SetConfig+0x11c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d01f      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <TIM_Base_SetConfig+0x120>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01b      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a29      	ldr	r2, [pc, #164]	; (800312c <TIM_Base_SetConfig+0x124>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d017      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a28      	ldr	r2, [pc, #160]	; (8003130 <TIM_Base_SetConfig+0x128>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <TIM_Base_SetConfig+0x12c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00f      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a26      	ldr	r2, [pc, #152]	; (8003138 <TIM_Base_SetConfig+0x130>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00b      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a25      	ldr	r2, [pc, #148]	; (800313c <TIM_Base_SetConfig+0x134>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a24      	ldr	r2, [pc, #144]	; (8003140 <TIM_Base_SetConfig+0x138>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a23      	ldr	r2, [pc, #140]	; (8003144 <TIM_Base_SetConfig+0x13c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d108      	bne.n	80030cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <TIM_Base_SetConfig+0x114>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_Base_SetConfig+0xf8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a0c      	ldr	r2, [pc, #48]	; (800312c <TIM_Base_SetConfig+0x124>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d103      	bne.n	8003108 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	615a      	str	r2, [r3, #20]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	40000c00 	.word	0x40000c00
 800312c:	40010400 	.word	0x40010400
 8003130:	40014000 	.word	0x40014000
 8003134:	40014400 	.word	0x40014400
 8003138:	40014800 	.word	0x40014800
 800313c:	40001800 	.word	0x40001800
 8003140:	40001c00 	.word	0x40001c00
 8003144:	40002000 	.word	0x40002000

08003148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f023 0201 	bic.w	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f023 0302 	bic.w	r3, r3, #2
 8003190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a20      	ldr	r2, [pc, #128]	; (8003220 <TIM_OC1_SetConfig+0xd8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d003      	beq.n	80031ac <TIM_OC1_SetConfig+0x64>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <TIM_OC1_SetConfig+0xdc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d10c      	bne.n	80031c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f023 0308 	bic.w	r3, r3, #8
 80031b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a15      	ldr	r2, [pc, #84]	; (8003220 <TIM_OC1_SetConfig+0xd8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_OC1_SetConfig+0x8e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <TIM_OC1_SetConfig+0xdc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d111      	bne.n	80031fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40010000 	.word	0x40010000
 8003224:	40010400 	.word	0x40010400

08003228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f023 0210 	bic.w	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0320 	bic.w	r3, r3, #32
 8003272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a22      	ldr	r2, [pc, #136]	; (800330c <TIM_OC2_SetConfig+0xe4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_OC2_SetConfig+0x68>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a21      	ldr	r2, [pc, #132]	; (8003310 <TIM_OC2_SetConfig+0xe8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d10d      	bne.n	80032ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a17      	ldr	r2, [pc, #92]	; (800330c <TIM_OC2_SetConfig+0xe4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_OC2_SetConfig+0x94>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a16      	ldr	r2, [pc, #88]	; (8003310 <TIM_OC2_SetConfig+0xe8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d113      	bne.n	80032e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	621a      	str	r2, [r3, #32]
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40010000 	.word	0x40010000
 8003310:	40010400 	.word	0x40010400

08003314 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800335c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a21      	ldr	r2, [pc, #132]	; (80033f4 <TIM_OC3_SetConfig+0xe0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d003      	beq.n	800337a <TIM_OC3_SetConfig+0x66>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a20      	ldr	r2, [pc, #128]	; (80033f8 <TIM_OC3_SetConfig+0xe4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d10d      	bne.n	8003396 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <TIM_OC3_SetConfig+0xe0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <TIM_OC3_SetConfig+0x92>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <TIM_OC3_SetConfig+0xe4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d113      	bne.n	80033ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40010400 	.word	0x40010400

080033fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	031b      	lsls	r3, r3, #12
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <TIM_OC4_SetConfig+0xa4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_OC4_SetConfig+0x68>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <TIM_OC4_SetConfig+0xa8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d109      	bne.n	8003478 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800346a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40010400 	.word	0x40010400

080034a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0201 	bic.w	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 030a 	bic.w	r3, r3, #10
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003506:	b480      	push	{r7}
 8003508:	b087      	sub	sp, #28
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0210 	bic.w	r2, r3, #16
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	031b      	lsls	r3, r3, #12
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	f043 0307 	orr.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	021a      	lsls	r2, r3, #8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	431a      	orrs	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2201      	movs	r2, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	401a      	ands	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800363c:	2302      	movs	r3, #2
 800363e:	e05a      	b.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a21      	ldr	r2, [pc, #132]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d022      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d01d      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d018      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00e      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a17      	ldr	r2, [pc, #92]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d10c      	bne.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40010400 	.word	0x40010400
 8003718:	40014000 	.word	0x40014000
 800371c:	40001800 	.word	0x40001800

08003720 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003738:	2302      	movs	r3, #2
 800373a:	e03d      	b.n	80037b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e03f      	b.n	8003856 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd ff4c 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2224      	movs	r2, #36	; 0x24
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f9cb 	bl	8003ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800381c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800382c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800383c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b08a      	sub	sp, #40	; 0x28
 8003862:	af02      	add	r7, sp, #8
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	d17c      	bne.n	8003978 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_UART_Transmit+0x2c>
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e075      	b.n	800397a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_UART_Transmit+0x3e>
 8003898:	2302      	movs	r3, #2
 800389a:	e06e      	b.n	800397a <HAL_UART_Transmit+0x11c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2221      	movs	r2, #33	; 0x21
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038b2:	f7fe f881 	bl	80019b8 <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038cc:	d108      	bne.n	80038e0 <HAL_UART_Transmit+0x82>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d104      	bne.n	80038e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e003      	b.n	80038e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038f0:	e02a      	b.n	8003948 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2180      	movs	r1, #128	; 0x80
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f8e2 	bl	8003ac6 <UART_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e036      	b.n	800397a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	3302      	adds	r3, #2
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	e007      	b.n	800393a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	3301      	adds	r3, #1
 8003938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1cf      	bne.n	80038f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	2140      	movs	r1, #64	; 0x40
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f8b2 	bl	8003ac6 <UART_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e006      	b.n	800397a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b08a      	sub	sp, #40	; 0x28
 8003986:	af02      	add	r7, sp, #8
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b20      	cmp	r3, #32
 80039a0:	f040 808c 	bne.w	8003abc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_UART_Receive+0x2e>
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e084      	b.n	8003abe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Receive+0x40>
 80039be:	2302      	movs	r3, #2
 80039c0:	e07d      	b.n	8003abe <HAL_UART_Receive+0x13c>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2222      	movs	r2, #34	; 0x22
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039de:	f7fd ffeb 	bl	80019b8 <HAL_GetTick>
 80039e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f8:	d108      	bne.n	8003a0c <HAL_UART_Receive+0x8a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	e003      	b.n	8003a14 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a1c:	e043      	b.n	8003aa6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2200      	movs	r2, #0
 8003a26:	2120      	movs	r1, #32
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f84c 	bl	8003ac6 <UART_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e042      	b.n	8003abe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	3302      	adds	r3, #2
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e01f      	b.n	8003a98 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a60:	d007      	beq.n	8003a72 <HAL_UART_Receive+0xf0>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_UART_Receive+0xfe>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e008      	b.n	8003a92 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3301      	adds	r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1b6      	bne.n	8003a1e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b090      	sub	sp, #64	; 0x40
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad6:	e050      	b.n	8003b7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d04c      	beq.n	8003b7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ae6:	f7fd ff67 	bl	80019b8 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d241      	bcs.n	8003b7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	330c      	adds	r3, #12
 8003b14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b16:	637a      	str	r2, [r7, #52]	; 0x34
 8003b18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e5      	bne.n	8003af6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3314      	adds	r3, #20
 8003b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3314      	adds	r3, #20
 8003b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b4a:	623a      	str	r2, [r7, #32]
 8003b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	69f9      	ldr	r1, [r7, #28]
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e5      	bne.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e00f      	b.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4013      	ands	r3, r2
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	bf0c      	ite	eq
 8003b8a:	2301      	moveq	r3, #1
 8003b8c:	2300      	movne	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d09f      	beq.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3740      	adds	r7, #64	; 0x40
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba8:	b0c0      	sub	sp, #256	; 0x100
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc0:	68d9      	ldr	r1, [r3, #12]
 8003bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	ea40 0301 	orr.w	r3, r0, r1
 8003bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bfc:	f021 010c 	bic.w	r1, r1, #12
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1e:	6999      	ldr	r1, [r3, #24]
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	ea40 0301 	orr.w	r3, r0, r1
 8003c2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4b8f      	ldr	r3, [pc, #572]	; (8003e70 <UART_SetConfig+0x2cc>)
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d005      	beq.n	8003c44 <UART_SetConfig+0xa0>
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4b8d      	ldr	r3, [pc, #564]	; (8003e74 <UART_SetConfig+0x2d0>)
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d104      	bne.n	8003c4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c44:	f7fe fe48 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8003c48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c4c:	e003      	b.n	8003c56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c4e:	f7fe fe2f 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 8003c52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c60:	f040 810c 	bne.w	8003e7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c76:	4622      	mov	r2, r4
 8003c78:	462b      	mov	r3, r5
 8003c7a:	1891      	adds	r1, r2, r2
 8003c7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c7e:	415b      	adcs	r3, r3
 8003c80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c86:	4621      	mov	r1, r4
 8003c88:	eb12 0801 	adds.w	r8, r2, r1
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	eb43 0901 	adc.w	r9, r3, r1
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ca6:	4690      	mov	r8, r2
 8003ca8:	4699      	mov	r9, r3
 8003caa:	4623      	mov	r3, r4
 8003cac:	eb18 0303 	adds.w	r3, r8, r3
 8003cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cb4:	462b      	mov	r3, r5
 8003cb6:	eb49 0303 	adc.w	r3, r9, r3
 8003cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	18db      	adds	r3, r3, r3
 8003cd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003cd8:	4613      	mov	r3, r2
 8003cda:	eb42 0303 	adc.w	r3, r2, r3
 8003cde:	657b      	str	r3, [r7, #84]	; 0x54
 8003ce0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ce4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ce8:	f7fc fa88 	bl	80001fc <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4b61      	ldr	r3, [pc, #388]	; (8003e78 <UART_SetConfig+0x2d4>)
 8003cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	011c      	lsls	r4, r3, #4
 8003cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	464b      	mov	r3, r9
 8003d10:	1891      	adds	r1, r2, r2
 8003d12:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d14:	415b      	adcs	r3, r3
 8003d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d22:	4649      	mov	r1, r9
 8003d24:	eb43 0b01 	adc.w	fp, r3, r1
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d3c:	4692      	mov	sl, r2
 8003d3e:	469b      	mov	fp, r3
 8003d40:	4643      	mov	r3, r8
 8003d42:	eb1a 0303 	adds.w	r3, sl, r3
 8003d46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	18db      	adds	r3, r3, r3
 8003d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d6e:	4613      	mov	r3, r2
 8003d70:	eb42 0303 	adc.w	r3, r2, r3
 8003d74:	647b      	str	r3, [r7, #68]	; 0x44
 8003d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d7e:	f7fc fa3d 	bl	80001fc <__aeabi_uldivmod>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	4b3b      	ldr	r3, [pc, #236]	; (8003e78 <UART_SetConfig+0x2d4>)
 8003d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	2264      	movs	r2, #100	; 0x64
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	1acb      	subs	r3, r1, r3
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d9e:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <UART_SetConfig+0x2d4>)
 8003da0:	fba3 2302 	umull	r2, r3, r3, r2
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dac:	441c      	add	r4, r3
 8003dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003db8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	1891      	adds	r1, r2, r2
 8003dc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dc8:	415b      	adcs	r3, r3
 8003dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	1851      	adds	r1, r2, r1
 8003dd4:	6339      	str	r1, [r7, #48]	; 0x30
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	414b      	adcs	r3, r1
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003de8:	4659      	mov	r1, fp
 8003dea:	00cb      	lsls	r3, r1, #3
 8003dec:	4651      	mov	r1, sl
 8003dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df2:	4651      	mov	r1, sl
 8003df4:	00ca      	lsls	r2, r1, #3
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e04:	464b      	mov	r3, r9
 8003e06:	460a      	mov	r2, r1
 8003e08:	eb42 0303 	adc.w	r3, r2, r3
 8003e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e24:	460b      	mov	r3, r1
 8003e26:	18db      	adds	r3, r3, r3
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	eb42 0303 	adc.w	r3, r2, r3
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e3a:	f7fc f9df 	bl	80001fc <__aeabi_uldivmod>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <UART_SetConfig+0x2d4>)
 8003e44:	fba3 1302 	umull	r1, r3, r3, r2
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	2164      	movs	r1, #100	; 0x64
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	3332      	adds	r3, #50	; 0x32
 8003e56:	4a08      	ldr	r2, [pc, #32]	; (8003e78 <UART_SetConfig+0x2d4>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	f003 0207 	and.w	r2, r3, #7
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4422      	add	r2, r4
 8003e6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e6c:	e105      	b.n	800407a <UART_SetConfig+0x4d6>
 8003e6e:	bf00      	nop
 8003e70:	40011000 	.word	0x40011000
 8003e74:	40011400 	.word	0x40011400
 8003e78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e8e:	4642      	mov	r2, r8
 8003e90:	464b      	mov	r3, r9
 8003e92:	1891      	adds	r1, r2, r2
 8003e94:	6239      	str	r1, [r7, #32]
 8003e96:	415b      	adcs	r3, r3
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	1854      	adds	r4, r2, r1
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	eb43 0501 	adc.w	r5, r3, r1
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	00eb      	lsls	r3, r5, #3
 8003eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eb6:	00e2      	lsls	r2, r4, #3
 8003eb8:	4614      	mov	r4, r2
 8003eba:	461d      	mov	r5, r3
 8003ebc:	4643      	mov	r3, r8
 8003ebe:	18e3      	adds	r3, r4, r3
 8003ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	eb45 0303 	adc.w	r3, r5, r3
 8003eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003eea:	4629      	mov	r1, r5
 8003eec:	008b      	lsls	r3, r1, #2
 8003eee:	4621      	mov	r1, r4
 8003ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	008a      	lsls	r2, r1, #2
 8003ef8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003efc:	f7fc f97e 	bl	80001fc <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4b60      	ldr	r3, [pc, #384]	; (8004088 <UART_SetConfig+0x4e4>)
 8003f06:	fba3 2302 	umull	r2, r3, r3, r2
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	011c      	lsls	r4, r3, #4
 8003f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f20:	4642      	mov	r2, r8
 8003f22:	464b      	mov	r3, r9
 8003f24:	1891      	adds	r1, r2, r2
 8003f26:	61b9      	str	r1, [r7, #24]
 8003f28:	415b      	adcs	r3, r3
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f30:	4641      	mov	r1, r8
 8003f32:	1851      	adds	r1, r2, r1
 8003f34:	6139      	str	r1, [r7, #16]
 8003f36:	4649      	mov	r1, r9
 8003f38:	414b      	adcs	r3, r1
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f48:	4659      	mov	r1, fp
 8003f4a:	00cb      	lsls	r3, r1, #3
 8003f4c:	4651      	mov	r1, sl
 8003f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f52:	4651      	mov	r1, sl
 8003f54:	00ca      	lsls	r2, r1, #3
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4642      	mov	r2, r8
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f64:	464b      	mov	r3, r9
 8003f66:	460a      	mov	r2, r1
 8003f68:	eb42 0303 	adc.w	r3, r2, r3
 8003f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f88:	4649      	mov	r1, r9
 8003f8a:	008b      	lsls	r3, r1, #2
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f92:	4641      	mov	r1, r8
 8003f94:	008a      	lsls	r2, r1, #2
 8003f96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f9a:	f7fc f92f 	bl	80001fc <__aeabi_uldivmod>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4b39      	ldr	r3, [pc, #228]	; (8004088 <UART_SetConfig+0x4e4>)
 8003fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	2164      	movs	r1, #100	; 0x64
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	3332      	adds	r3, #50	; 0x32
 8003fb6:	4a34      	ldr	r2, [pc, #208]	; (8004088 <UART_SetConfig+0x4e4>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc2:	441c      	add	r4, r3
 8003fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc8:	2200      	movs	r2, #0
 8003fca:	673b      	str	r3, [r7, #112]	; 0x70
 8003fcc:	677a      	str	r2, [r7, #116]	; 0x74
 8003fce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fd2:	4642      	mov	r2, r8
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	1891      	adds	r1, r2, r2
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	415b      	adcs	r3, r3
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	1851      	adds	r1, r2, r1
 8003fe6:	6039      	str	r1, [r7, #0]
 8003fe8:	4649      	mov	r1, r9
 8003fea:	414b      	adcs	r3, r1
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ffa:	4659      	mov	r1, fp
 8003ffc:	00cb      	lsls	r3, r1, #3
 8003ffe:	4651      	mov	r1, sl
 8004000:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004004:	4651      	mov	r1, sl
 8004006:	00ca      	lsls	r2, r1, #3
 8004008:	4610      	mov	r0, r2
 800400a:	4619      	mov	r1, r3
 800400c:	4603      	mov	r3, r0
 800400e:	4642      	mov	r2, r8
 8004010:	189b      	adds	r3, r3, r2
 8004012:	66bb      	str	r3, [r7, #104]	; 0x68
 8004014:	464b      	mov	r3, r9
 8004016:	460a      	mov	r2, r1
 8004018:	eb42 0303 	adc.w	r3, r2, r3
 800401c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800401e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	663b      	str	r3, [r7, #96]	; 0x60
 8004028:	667a      	str	r2, [r7, #100]	; 0x64
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004036:	4649      	mov	r1, r9
 8004038:	008b      	lsls	r3, r1, #2
 800403a:	4641      	mov	r1, r8
 800403c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004040:	4641      	mov	r1, r8
 8004042:	008a      	lsls	r2, r1, #2
 8004044:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004048:	f7fc f8d8 	bl	80001fc <__aeabi_uldivmod>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <UART_SetConfig+0x4e4>)
 8004052:	fba3 1302 	umull	r1, r3, r3, r2
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	2164      	movs	r1, #100	; 0x64
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	3332      	adds	r3, #50	; 0x32
 8004064:	4a08      	ldr	r2, [pc, #32]	; (8004088 <UART_SetConfig+0x4e4>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	f003 020f 	and.w	r2, r3, #15
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4422      	add	r2, r4
 8004078:	609a      	str	r2, [r3, #8]
}
 800407a:	bf00      	nop
 800407c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004080:	46bd      	mov	sp, r7
 8004082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004086:	bf00      	nop
 8004088:	51eb851f 	.word	0x51eb851f

0800408c <atoi>:
 800408c:	220a      	movs	r2, #10
 800408e:	2100      	movs	r1, #0
 8004090:	f000 b8b4 	b.w	80041fc <strtol>

08004094 <__errno>:
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <__errno+0x8>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	2000000c 	.word	0x2000000c

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4d0d      	ldr	r5, [pc, #52]	; (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2600      	movs	r6, #0
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4d0b      	ldr	r5, [pc, #44]	; (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	; (80040e4 <__libc_init_array+0x44>)
 80040b4:	f000 f8ac 	bl	8004210 <_init>
 80040b8:	1b64      	subs	r4, r4, r5
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2600      	movs	r6, #0
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	0800479c 	.word	0x0800479c
 80040dc:	0800479c 	.word	0x0800479c
 80040e0:	0800479c 	.word	0x0800479c
 80040e4:	080047a0 	.word	0x080047a0

080040e8 <memset>:
 80040e8:	4402      	add	r2, r0
 80040ea:	4603      	mov	r3, r0
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d100      	bne.n	80040f2 <memset+0xa>
 80040f0:	4770      	bx	lr
 80040f2:	f803 1b01 	strb.w	r1, [r3], #1
 80040f6:	e7f9      	b.n	80040ec <memset+0x4>

080040f8 <_strtol_l.constprop.0>:
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040fe:	d001      	beq.n	8004104 <_strtol_l.constprop.0+0xc>
 8004100:	2b24      	cmp	r3, #36	; 0x24
 8004102:	d906      	bls.n	8004112 <_strtol_l.constprop.0+0x1a>
 8004104:	f7ff ffc6 	bl	8004094 <__errno>
 8004108:	2316      	movs	r3, #22
 800410a:	6003      	str	r3, [r0, #0]
 800410c:	2000      	movs	r0, #0
 800410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004112:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80041f8 <_strtol_l.constprop.0+0x100>
 8004116:	460d      	mov	r5, r1
 8004118:	462e      	mov	r6, r5
 800411a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800411e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004122:	f017 0708 	ands.w	r7, r7, #8
 8004126:	d1f7      	bne.n	8004118 <_strtol_l.constprop.0+0x20>
 8004128:	2c2d      	cmp	r4, #45	; 0x2d
 800412a:	d132      	bne.n	8004192 <_strtol_l.constprop.0+0x9a>
 800412c:	782c      	ldrb	r4, [r5, #0]
 800412e:	2701      	movs	r7, #1
 8004130:	1cb5      	adds	r5, r6, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d05b      	beq.n	80041ee <_strtol_l.constprop.0+0xf6>
 8004136:	2b10      	cmp	r3, #16
 8004138:	d109      	bne.n	800414e <_strtol_l.constprop.0+0x56>
 800413a:	2c30      	cmp	r4, #48	; 0x30
 800413c:	d107      	bne.n	800414e <_strtol_l.constprop.0+0x56>
 800413e:	782c      	ldrb	r4, [r5, #0]
 8004140:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004144:	2c58      	cmp	r4, #88	; 0x58
 8004146:	d14d      	bne.n	80041e4 <_strtol_l.constprop.0+0xec>
 8004148:	786c      	ldrb	r4, [r5, #1]
 800414a:	2310      	movs	r3, #16
 800414c:	3502      	adds	r5, #2
 800414e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004152:	f108 38ff 	add.w	r8, r8, #4294967295
 8004156:	f04f 0c00 	mov.w	ip, #0
 800415a:	fbb8 f9f3 	udiv	r9, r8, r3
 800415e:	4666      	mov	r6, ip
 8004160:	fb03 8a19 	mls	sl, r3, r9, r8
 8004164:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004168:	f1be 0f09 	cmp.w	lr, #9
 800416c:	d816      	bhi.n	800419c <_strtol_l.constprop.0+0xa4>
 800416e:	4674      	mov	r4, lr
 8004170:	42a3      	cmp	r3, r4
 8004172:	dd24      	ble.n	80041be <_strtol_l.constprop.0+0xc6>
 8004174:	f1bc 0f00 	cmp.w	ip, #0
 8004178:	db1e      	blt.n	80041b8 <_strtol_l.constprop.0+0xc0>
 800417a:	45b1      	cmp	r9, r6
 800417c:	d31c      	bcc.n	80041b8 <_strtol_l.constprop.0+0xc0>
 800417e:	d101      	bne.n	8004184 <_strtol_l.constprop.0+0x8c>
 8004180:	45a2      	cmp	sl, r4
 8004182:	db19      	blt.n	80041b8 <_strtol_l.constprop.0+0xc0>
 8004184:	fb06 4603 	mla	r6, r6, r3, r4
 8004188:	f04f 0c01 	mov.w	ip, #1
 800418c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004190:	e7e8      	b.n	8004164 <_strtol_l.constprop.0+0x6c>
 8004192:	2c2b      	cmp	r4, #43	; 0x2b
 8004194:	bf04      	itt	eq
 8004196:	782c      	ldrbeq	r4, [r5, #0]
 8004198:	1cb5      	addeq	r5, r6, #2
 800419a:	e7ca      	b.n	8004132 <_strtol_l.constprop.0+0x3a>
 800419c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80041a0:	f1be 0f19 	cmp.w	lr, #25
 80041a4:	d801      	bhi.n	80041aa <_strtol_l.constprop.0+0xb2>
 80041a6:	3c37      	subs	r4, #55	; 0x37
 80041a8:	e7e2      	b.n	8004170 <_strtol_l.constprop.0+0x78>
 80041aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80041ae:	f1be 0f19 	cmp.w	lr, #25
 80041b2:	d804      	bhi.n	80041be <_strtol_l.constprop.0+0xc6>
 80041b4:	3c57      	subs	r4, #87	; 0x57
 80041b6:	e7db      	b.n	8004170 <_strtol_l.constprop.0+0x78>
 80041b8:	f04f 3cff 	mov.w	ip, #4294967295
 80041bc:	e7e6      	b.n	800418c <_strtol_l.constprop.0+0x94>
 80041be:	f1bc 0f00 	cmp.w	ip, #0
 80041c2:	da05      	bge.n	80041d0 <_strtol_l.constprop.0+0xd8>
 80041c4:	2322      	movs	r3, #34	; 0x22
 80041c6:	6003      	str	r3, [r0, #0]
 80041c8:	4646      	mov	r6, r8
 80041ca:	b942      	cbnz	r2, 80041de <_strtol_l.constprop.0+0xe6>
 80041cc:	4630      	mov	r0, r6
 80041ce:	e79e      	b.n	800410e <_strtol_l.constprop.0+0x16>
 80041d0:	b107      	cbz	r7, 80041d4 <_strtol_l.constprop.0+0xdc>
 80041d2:	4276      	negs	r6, r6
 80041d4:	2a00      	cmp	r2, #0
 80041d6:	d0f9      	beq.n	80041cc <_strtol_l.constprop.0+0xd4>
 80041d8:	f1bc 0f00 	cmp.w	ip, #0
 80041dc:	d000      	beq.n	80041e0 <_strtol_l.constprop.0+0xe8>
 80041de:	1e69      	subs	r1, r5, #1
 80041e0:	6011      	str	r1, [r2, #0]
 80041e2:	e7f3      	b.n	80041cc <_strtol_l.constprop.0+0xd4>
 80041e4:	2430      	movs	r4, #48	; 0x30
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1b1      	bne.n	800414e <_strtol_l.constprop.0+0x56>
 80041ea:	2308      	movs	r3, #8
 80041ec:	e7af      	b.n	800414e <_strtol_l.constprop.0+0x56>
 80041ee:	2c30      	cmp	r4, #48	; 0x30
 80041f0:	d0a5      	beq.n	800413e <_strtol_l.constprop.0+0x46>
 80041f2:	230a      	movs	r3, #10
 80041f4:	e7ab      	b.n	800414e <_strtol_l.constprop.0+0x56>
 80041f6:	bf00      	nop
 80041f8:	08004691 	.word	0x08004691

080041fc <strtol>:
 80041fc:	4613      	mov	r3, r2
 80041fe:	460a      	mov	r2, r1
 8004200:	4601      	mov	r1, r0
 8004202:	4802      	ldr	r0, [pc, #8]	; (800420c <strtol+0x10>)
 8004204:	6800      	ldr	r0, [r0, #0]
 8004206:	f7ff bf77 	b.w	80040f8 <_strtol_l.constprop.0>
 800420a:	bf00      	nop
 800420c:	2000000c 	.word	0x2000000c

08004210 <_init>:
 8004210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004212:	bf00      	nop
 8004214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004216:	bc08      	pop	{r3}
 8004218:	469e      	mov	lr, r3
 800421a:	4770      	bx	lr

0800421c <_fini>:
 800421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421e:	bf00      	nop
 8004220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004222:	bc08      	pop	{r3}
 8004224:	469e      	mov	lr, r3
 8004226:	4770      	bx	lr
